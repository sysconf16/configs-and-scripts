{
  "title": "Retro Collection",
  "categories": [
    {
      "title": "Arcade",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/arcade-thum.png?raw=true",
      "background": "https://images.squarespace-cdn.com/content/v1/56e8ad87e32140cc5d4e8231/7b81b32c-f0a4-4cd2-a408-8c23382cf361/Predator+Sml.png",
      "backgroundPixelated": false,
      "longTitle": "Arcade",
      "description": "An arcade game or coin-op game is a coin-operated entertainment machine typically installed in public businesses such as restaurants, bars and amusement arcades. Most arcade games are presented as primarily games of skill and include arcade video games, Pinball machines, electro-mechanical games, redemption games or merchandisers.",
      "items": [
        {
          "type": "arcade",
          "title": "1943: The Battle of Midway",
          "longTitle": "1943: The Battle of Midway",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/1943_%20The%20Battle%20of%20Midway%20(Euro).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/1943_%20The%20Battle%20of%20Midway%20(Euro).png",
          "description": "The game is set in the Pacific theater of World War II, off the coast of the Midway Atoll. The goal is to attack the Japanese Air Fleet that bombed the players' American Aircraft Carrier, pursue all Japanese Air and Sea forces, fly through the 16 levels of play, make their way to the Japanese battleship Yamato and destroy her. 11 Levels consist of an Air-to-Sea battle (with a huge battleship or an aircraft carrier as an End-Level Boss), while 5 levels consist of an all-aerial battle against a squadron of Japanese Bombers and a Mother Bomber that needs to be destroyed.\nAs in 1942, players pilot a P-38. Two buttons are used: one for regular attacks (with several weapons) and one for special actions that executes either a loop like in 1942 or one of three special attacks that damage the plane. Unlike 1942, the player only has one life, with one refillable energy meter. Destroying a complete formation of red enemy planes will result in a power-up, such as a health boost or a temporary special weapons which replaces the default twin gun.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/1943.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "arcade",
          "title": "After Burner II",
          "longTitle": "After Burner II",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/After%20Burner%20II.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/After%20Burner%20II.png",
          "description": "After Burner is another Sega game rendered with their then-ubiquitous 3-D sprite-scaling technology; this time putting the player into the seat of a powerful F14 Tomcat jet fighter. \n\nPlayers must fight their way through 21 colourful, fast-moving stages, shooting down waves of enemy fighters while avoiding the enemy's incoming missiles. The F14 is equipped with a machine gun and a limited number of homing missiles. The gun has infinite ammunition and targeting is achieved by maneuvering the Tomcat so that the targeting cursor situated just in front of the jet is placed over an enemy fighter. \n\nAfter Burner's straightforward shoot-em-up gameplay is simple and repetitive, but the game's incredible visuals ensured its success.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/aburner2.zip"
          },
          "added": 1651336653510
        },
        {
          "type": "arcade",
          "title": "Alex Kidd: The Lost Stars",
          "longTitle": "Alex Kidd: The Lost Stars",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Alex%20Kidd_%20The%20Lost%20Stars%20(set%202%2C%20unprotected).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Alex%20Kidd_%20The%20Lost%20Stars%20(set%202%2C%20unprotected).png",
          "description": "Alex Kidd: The Lost Stars features Alex Kidd and Stella searching for the twelve Zodiac signs. Alex's mission is to run through each level, knocking down enemies, and obtain the six miracle balls. These balls are hidden inside such unusual places as a Christmas present, the Fantasy Zone ship out of action, a pumpkin, a clamshell, a golden egg, and a desk bell. Levels include Toy World, Machine World, World of Make Believe, Water World, Monster World, and Giant's Body.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/alexkidd.zip"
          },
          "added": 1651336662869
        },
        {
          "type": "arcade",
          "title": "Altered Beast",
          "longTitle": "Altered Beast",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Altered%20Beast%20(set%208%2C%208751%20317-0078).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Altered%20Beast%20(set%208%2C%208751%20317-0078).png",
          "description": "Altered Beast is a 1988 beat 'em up arcade video game developed and manufactured by Sega. The game is set in Ancient Greece and follows a player character chosen by Zeus to rescue his daughter Athena from the demonic ruler of the underworld, Neff. Through the use of power-ups, the player character can assume the form of different magical beasts (wolf, dragon, bear, tiger, and golden wolf).\n\nThe game was developed by Makoto Uchida, who developed the game as his first project as a lead developer. Uchida and his team used the System 16 arcade system board for its graphical capabilities with sprites.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/altbeast.zip"
          },
          "added": 1651336668558
        },
        {
          "type": "arcade",
          "title": "Asteroids",
          "longTitle": "Asteroids",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Asteroids%20(rev%204).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Asteroids%20(rev%204).png",
          "description": "Asteroids is a space-themed multidirectional shooter arcade video game designed by Lyle Rains and Ed Logg released in November 1979 by Atari, Inc. The player controls a single spaceship in an asteroid field which is periodically traversed by flying saucers. The object of the game is to shoot and destroy the asteroids and saucers, while not colliding with either, or being hit by the saucers' counter-fire. The game becomes harder as the number of asteroids increases.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/asteroid.zip"
          },
          "added": 1712676940021
        },
        {
          "type": "arcade",
          "title": "Bionic Commando",
          "longTitle": "Bionic Commando",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Bionic%20Commando%20(Euro).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Bionic%20Commando%20(Euro).png",
          "description": "Bionic Commando is a 1987 run-and-gun platform game released by Capcom in arcades in 1987. It was designed by Tokuro Fujiwara as a successor to his earlier \"wire action\" platformer Roc'n Rope (1983), building on its grappling hook mechanic; he was also the designer of Commando (1985). The music was composed by Harumi Fujita for the Yamaha YM2151 sound chip.\n\nThe protagonist is a commando equipped with a bionic arm featuring a grappling gun, allowing him to pull himself forward or swing from the ceiling. Despite being a platform game, the player cannot jump. To cross gaps or climb ledges, the hero must use the bionic arm.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/bionicc.zip"
          },
          "added": 1651336673118
        },
        {
          "type": "neogeo",
          "title": "Blazing Star",
          "longTitle": "Blazing Star",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Blazing%20Star.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Blazing%20Star.png",
          "description": "The unofficial sequel to Pulstar, Blazing Star is again a horizontal-scrolling shoot-'em-up. One or two players proceed along levels, each with a boss enemy at the end, trying to redeem the humankind. There are six ships to choose from, each with its own pilot (four of them females), weapons and characteristics of movement. Each ship has its own types of shots, but also a standard shot, charged shot (more powerful) and split shot (a charged shot can be parted into more bullets, lowering the power of each bullet while widening the fire range).",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/blazstar.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "arcade",
          "title": "Bomber Man World",
          "longTitle": "Bomber Man World",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Bomber%20Man%20World%20_%20New%20Dyna%20Blaster%20-%20Global%20Quest.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Bomber%20Man%20World%20_%20New%20Dyna%20Blaster%20-%20Global%20Quest.png",
          "description": "Bomber Man World is a 1992 video game released by Irem under license from Hudson Soft for arcades. It is part of the Bomberman series. It was the second Bomberman game to be released for arcades, preceded by Bomberman (1991), which was also released by Irem.\n\nWhen all enemies are destroyed the player automatically goes to the next stage. Items are lost after each stage, reducing the inventory to one bomb, and the default blast radius and walking speed. There are six worlds with six levels in each; after every fifth level there is a Bonus Stage, wherein soft blocks contain many points items and power ups.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/bbmanw.zip"
          },
          "added": 1651338798173
        },
        {
          "type": "arcade",
          "title": "Bonanza Bros",
          "longTitle": "Bonanza Bros",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Bonanza%20Bros%20(US%2C%20Floppy%20DS3-5000-07d_%20Based).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Bonanza%20Bros%20(US%2C%20Floppy%20DS3-5000-07d_%20Based).png",
          "description": "Bonanza Bros. is a strategic platform shoot-em-up with one or two players taking on the roles of Robo and Mobo, two cat-burgling brothers who must negotiate scrolling platform-based levels and steal a set number of valuable items, before making their way to the roof to escape in a waiting airship. The location of the items is highlighted on a cut-away map displayed in the middle of the screen and each stage must be completed within a set time limit.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/bnzabros.zip"
          },
          "added": 1651336679468
        },
        {
          "type": "arcade",
          "title": "Bubble Bobble",
          "longTitle": "Bubble Bobble",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Bubble%20Bobble%20(Japan%2C%20Ver%200.1).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Bubble%20Bobble%20(Japan%2C%20Ver%200.1).png",
          "description": "Bubble Bobble is a 1986 platform arcade game developed and published by Taito. It was distributed in the United States by Romstar, and in Europe by Electrocoin. Players control Bub and Bob, two dragons that set out to save their girlfriends from a world known as the Cave of Monsters. In each level, Bub and Bob must defeat each enemy present by trapping them in bubbles and popping, who turn into bonus items when they hit the ground. There are 100 levels total, each becoming progressively more difficult.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/bublbobl.zip"
          },
          "added": 1651338807623
        },
        {
          "type": "arcade",
          "title": "Centipede",
          "longTitle": "Centipede",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Centipede%20(revision%204).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Centipede%20(revision%204).png",
          "description": "Centipede is a 1981 fixed shooter arcade video game developed and published by Atari, Inc. Designed by Dona Bailey and Ed Logg, it was one of the most commercially successful games from the golden age of arcade video games and one of the first with a significant female player base. The primary objective is to shoot all the segments of a centipede that winds down the playing field. An arcade sequel, Millipede, followed in 1982.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/centiped.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "arcade",
          "title": "Chase H.Q.",
          "longTitle": "Chase H.Q.",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Chase%20H.Q.%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Chase%20H.Q.%20(World).png",
          "description": "\"Chase H.Q.\" is a checkpoint-based racing game in which the player takes on the role on an undercover cop called Tony Gibson in this 'Miami Vice' inspired game from Taito. Gibson drives a powerful unmarked police car (resembling a Porsche 911) along with his partner, 'Raymond Broady' and must chase down and apprehend various criminals.\n\nThe player has between fifty-five and seventy seconds (depending on the game's 'Dip' settings) to catch up with the fleeing criminal, then the same time period again to repeatedly ram into the criminal's car until it is too damaged to drive. The criminal's car is constantly moving away, so if the player repeatedly crashes or drives too slowly, the criminal will escape and the game ends.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/chasehq.zip"
          },
          "added": 1651343187578
        },
        {
          "type": "arcade",
          "title": "Commando",
          "longTitle": "Commando",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Commando%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Commando%20(World).png",
          "description": "Commando is a vertically scrolling shoot'em up in which the player takes on the role of a highly trained commando soldier called \"Super Joe\", who starts the game by being dropped off in a jungle by a helicopter. \n\nJoe's mission is to rescue captives and destroy the enemy bases and strongholds that appear at the end of each level, killing as many enemy soldiers as possible in the process. \n\nThe end-of-level strongholds see waves of enemy soldiers ordered to attack by a cowardly officer, who immediately runs away. Shooting the fleeing officer earns the player bonus points. Along the way, players can attempt to free prisoners-of-war by shooting their enemy guard escorts as they are transported across the screen.\n\nSuper Joe carries only two weapons: a limited-range machine gun with unlimited shots, and a limited supply of hand grenades. Extra grenades can be picked up as the player progresses through the levels.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/commando.zip"
          },
          "added": 1712675130516
        },
        {
          "type": "arcade",
          "title": "Cotton: Fantastic Night Dreams",
          "longTitle": "Cotton: Fantastic Night Dreams",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Cotton%20(set%203%2C%20World%2C%20FD1094%20317-0181a).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Cotton%20(set%203%2C%20World%2C%20FD1094%20317-0181a).png",
          "description": "Cotton: Fantastic Night Dreams is a scrolling shooter video game developed by Success and originally released in Japanese arcades in 1991. The first installment in the Cotton series, players assume the role of the young witch Cotton who, alongside her fairy companion Silk, sets out on her broomstick on a quest to defeat several monsters and get her Willow candy. Its gameplay mainly consists of shooting mixed with role-playing game elements using a main two-button configuration. It ran on the Sega System 16 hardware.\n\nFirst launched in arcades, it was later ported to multiple platforms, each one featuring several changes or additions compared with the original version. Cotton proved to be popular among players in Japanese arcades, earning several awards from Gamest magazine, however the console ports have been met with mixed reception from critics. It is regarded as a key title in the \"cute 'em up\" sub-genre.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/cotton.zip"
          },
          "added": 1661270542404
        },
        {
          "type": "arcade",
          "title": "Dig Dug",
          "longTitle": "Dig Dug",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Dig%20Dug%20(rev%202).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Dig%20Dug%20(rev%202).png",
          "description": "Dig Dug is a maze video game. The player controls protagonist Dig Dug (Taizo Hori) to eliminate each screen's enemies: Pookas, red creatures with comically large goggles, and Fygars, fire-breathing green dragons. Dig Dug can use an air pump to inflate them to bursting, or crush them under large falling rocks. Bonus points are awarded for squashing multiple enemies with a single rock, and dropping two rocks in a stage yields a bonus item, which can be eaten for points. Once all the enemies have been defeated, Dig Dug progresses to the next stage.\n\nEnemies chase Dig Dug through dirt in the form of ghostly eyes, only becoming solid in the air where his pump can stun or destroy them. Enemies eventually become faster and more aggressive and the last one then attempts escape. Later stages vary in dirt color, while increasing the number and speed of enemies.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://archive.org/download/2020_01_06_fbn/roms/arcade.zip/arcade%2Fdigdug.zip"
          },
          "added": 1651420408566
        },
        {
          "type": "arcade",
          "title": "DoDonPachi",
          "longTitle": "DoDonPachi",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/DoDonPachi%20(International%2C%20master%20ver.%2097_02_05).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/DoDonPachi%20(International%2C%20master%20ver.%2097_02_05).png",
          "description": "DoDonPachi is a vertically-scrolling bullet hell shoot' em up developed by Cave and published by Atlus in 1997. It was the second game developed by Cave, and the sixth on Cave's first-generation arcade hardware. As with its predecessor DonPachi, the title is both a Japanese term for expressing the sound of gunfire, and a term that relates to bees (here it means \"angry leader bee\"). The sequel to this game is DoDonPachi II, which was made by a different developer. The original developer later released its own sequel, DoDonPachi DaiOuJou.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/ddonpach.zip"
          },
          "added": 1712674257850
        },
        {
          "type": "arcade",
          "title": "DoDonPachi DaiOuJou",
          "longTitle": "DoDonPachi DaiOuJou",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/DoDonPachi%20III%20(World%2C%202002.05.15%20Master%20Ver).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/DoDonPachi%20III%20(World%2C%202002.05.15%20Master%20Ver).png",
          "description": "DaiOuJou follows the conventions of the previous game with only a few changes. The chaining system is intact and works in much the same way. Causing an enemy to explode fills a meter, and every enemy destroyed before the meter depletes adds to the current chain and again refills the meter. Holding the laser weapon over a large enemy will hold the meter steady and slowly accumulate hits. In this way it is possible to create a single chain out of any of the 5 stages.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/ddp3.zip"
          },
          "added": 1712674257850
        },
        {
          "type": "arcade",
          "title": "Donkey Kong",
          "longTitle": "Donkey Kong",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Donkey%20Kong%20(US%20set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Donkey%20Kong%20(US%20set%201).png",
          "description": "Donkey Kong is a 1981 arcade platform video game released by Nintendo. Its gameplay maneuvers Mario across platforms to ascend a construction site and rescue Pauline from the giant gorilla named Donkey Kong, all while avoiding or jumping over obstacles.\n\nIt is the product of Nintendo's increasingly desperate efforts to develop a hit to rival Pac-Man (1980) and break into the North American market. Hiroshi Yamauchi, Nintendo's president at the time, assigned the project to first-time video game designer Shigeru Miyamoto. Drawing from a wide range of inspirations including Popeye, Beauty and the Beast, and King Kong, Miyamoto developed the scenario and designed the game alongside chief engineer Gunpei Yokoi. They broke new ground by using graphics as a means of characterization, including cutscenes to advance the game's plot and integrating multiple stages into the gameplay.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/dkong.zip",
            "samples": "https://archive.org/download/fbneo/FBNeo/support.zip/support%2Fsamples%2Fdkong.zip"
          },
          "added": 1651342301043
        },
        {
          "type": "arcade",
          "title": "Donkey Kong 3",
          "longTitle": "Donkey Kong 3",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Donkey%20Kong%203%20(US).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Donkey%20Kong%203%20(US).png",
          "description": "Donkey Kong hangs from vines at the center of the screen, and the player-controlled Stanley the exterminator runs and jumps on platforms beneath him. Stanley can fire bug spray at both Donkey Kong and insects flying around the levels. A level is completed by continually using bug spray on Donkey Kong, forcing him to the top of the screen, or by killing all of the bugs. A super spray can on the vines falls down when Donkey Kong is sprayed past it. The super spray only lasts for a limited amount of time, but it pushes Donkey Kong upward at a much faster rate, making it easier to complete the level. It only spawns at the start of each life.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/dkong3.zip"
          },
          "added": 1651336711723
        },
        {
          "type": "arcade",
          "title": "Donkey Kong Jr.",
          "longTitle": "Donkey Kong Jr.",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Donkey%20Kong%20Junior%20(US%20set%20F-2).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Donkey%20Kong%20Junior%20(US%20set%20F-2).png",
          "description": "Fate has turned the tables on the inimitable Donkey Kong.\n\nAfter Mario saved the Beautiful Girl from the lustful clutches of Donkey Kong, he led the brokenhearted ape into captivity, locking him behind steel bars, never again to strut his stuff before the fair maidens of the world.\n\nAs the frustration of confinement enrages Donkey Kong, Mario complacently stands guard over the cell, holding the sought after key to freedom.\n\nBut wait! Unbeknownst to Little Mario, Donkey Kong has produced an offspring - Donkey Kong Junior! A death-defying little monkey, shrewd and cunning, who resists all enemies to rescue Papa Donkey Kong.\n\nAs Mario's brigade of snapping jaws, ape-eating birds and energy pods launch their offensive, Junior bombards them with a fusillade of Fruit Bombs that aim to annihilate his every foe.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/dkongjr.zip",
            "samples": "https://archive.org/download/fbneo/FBNeo/support.zip/support%2Fsamples%2Fdkongjr.zip"
          },
          "added": 1651336715034
        },
        {
          "type": "arcade",
          "title": "Double Dragon",
          "longTitle": "Double Dragon",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Double%20Dragon%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Double%20Dragon%20(Japan).png",
          "description": "Double Dragon is a 1987 beat 'em up video game developed by Technōs Japan and distributed by Taito for arcades across Asia, North America and Europe. It is the first title in the Double Dragon franchise. The game's development was led by Yoshihisa Kishimoto, and it is a spiritual and technological successor to Technos' earlier beat 'em up, Nekketsu Kōha Kunio-kun (1986), released outside of Japan by Taito as Renegade; Kishimoto originally envisioned it as a direct sequel and part of the Kunio-kun series, before making it a new game with a different cast and setting.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/ddragon.zip"
          },
          "added": 1651336684753
        },
        {
          "type": "arcade",
          "title": "Double Dragon 3 - The Rosetta Stone",
          "longTitle": "Double Dragon 3 - The Rosetta Stone",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Double%20Dragon%203%20-%20The%20Rosetta%20Stone%20(US).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Double%20Dragon%203%20-%20The%20Rosetta%20Stone%20(US).png",
          "description": "A mysterious fortune teller warns Billy & Jimmy Lee about the rise of a powerful enemy in Egypt. Since the Lee brothers are looking for a true challenge to put their martial arts skills to the ultimate test, they agree to face this mysterious new enemy. They embark on a world quest - joining up with new allies in the process - and try to lay claim to the famous 'Rosetta Stone'.\n\nThe 3rd and final arcade entry of the Double Dragon series (not counting the later Neo-Geo fighting game based on the movie) features a completely gameplay system and graphics from the first two installments. The game can played by up to 2 or 3 players, depending on the cabinet and settings. The 3rd player takes control of a yellow-clad Lee brother named Sonny, who is exclusive to this game. Techniques from the previous games such as the hair grab and the elbow punch are gone, but new ones are added such as the belly-to-back throw and the back-to-back hurricane kick, as well as the ability to dash by tapping the joystick left or right twice.\n\nThe game features weapon shops that allows the player to purchase power-ups by inserting additional tokens. The power-ups differ between stages differ between stages and are available as followed.\nExtra Guys - Allows the player to control a new character who replaces the current fighter when he dies. There are three character types in addition to the Lee brothers.\nThe Urquidez Brothers (Roney, Sunny, Jonny) -  Tall European grapplers. They have the most energy of the four character types.  Up to three fighters can be have in reserve.\nThe Chin Brothers (Seimei, Taimei, Sinmei) - Chubby Chinese men with powerful attacks.\nThe Oyama Brothers (Masao, Kunio, Akira) - Japanese karate masters dressed in gis specializing in speedy attacks.\n? Tricks - The hurricane kick and the one-armed stand head butt are added to the player's move set. If the player's current character dies, then the new techniques will be inherited by the next character in reserve, if there is one.\nWeapons - A nunchaku or sword are given player. Only the Lees can have purchase and wield weapons.\nEnergy - Restores the current character's life to 150%.\nPower-Up - Increases the character's agility.\n\nThere are 5 stages in the game:\n\nMission 1 - America - The enemies in this stage are typical thugs and bikers. The first area takes place in a downtown area of city. After defeating the first wave of enemies, the player will enter a warehouse, where they encounter bikers that will try to run over them with their bike. The boss in this is Jim, a red-haired biker wearing a leather jacket.\n\nMission 2 - China - The enemies are martial artists that specialize in flying kicks. The stage takes place in a single level set in a countryside near the Great Wall of China. The boss at the end of level is Li Cheng-Long, a Shaolin Martial Arts expert who resembles Bruce Lee. When he's down in life, he will wield out his club.\n\nMission 3 - Japan - The enemies are samurai swordsmen. The first area takes place outside a castle, with bamboo traps and enemies coming out of walls. The second area takes place inside a castle, where the player will face a few more swordsmen before taking out on the boss, Ranzou, a ninja. He attacks with throwing stars and smoke bombs and splits into three forms when he's down on his life.\n\nMission 4 - Italy - Consists of a single level set in the ruins of a coliseum. The enemies are roman archers. After defeating most of the archers, the boss Giuliano, a man decked in gladiator armor, will attempt to run the player over with his horse. After defeating all the archers, Giuliano will dismount at the end of the level and fight the player. He wields a long hand spear and can block attacks with his shield.\n\nMission 5 - Egypt - The final stage is composed of seven levels, which includes a desert field, an underground forest, a trap room with stone pillars and giant hands emerging from the floor, a hall with a flying disc. Enemies include living tree men and rock creatures.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/ddragon3.zip"
          },
          "added": 1651336703917
        },
        {
          "type": "arcade",
          "title": "Double Dragon II - The Revenge",
          "longTitle": "Double Dragon II - The Revenge",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Double%20Dragon%20II%20-%20The%20Revenge%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Double%20Dragon%20II%20-%20The%20Revenge%20(World).png",
          "description": "Double Dragon II: The Revenge is a side-scrolling beat 'em up produced by Technōs Japan originally released as a coin-operated arcade game in 1988. It is the first sequel to Double Dragon, released during the previous year. The sequel involves Billy and Jimmy Lee in a mission to avenge Billy's girlfriend Marian after she is shot to death by the Black Warriors leader Willy, who is retaliating against the Lee brothers after his defeat at the end of the previous game. Double Dragon II was initially developed as an upgrade kit for the original Double Dragon, but evolved into a stand-alone game due to an increase in memory size, resulting in the developers reusing assets for both games.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/ddragon2.zip"
          },
          "added": 1651336690111
        },
        {
          "type": "arcade",
          "title": "Fantasy Zone",
          "longTitle": "Fantasy Zone",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Fantasy%20Zone%20(Rev%20A%2C%20unprotected).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Fantasy%20Zone%20(Rev%20A%2C%20unprotected).png",
          "description": "Fantasy Zone is a 1986 arcade game by Sega, and the first game in the Fantasy Zone series. It was later ported to a wide variety of consoles, including the Master System. The player controls a sentient spaceship named Opa-Opa who fights an enemy invasion in the titular group of planets. The game contains a number of features atypical of the traditional scrolling shooter. The main character, Opa-Opa, is sometimes referred to as Sega's first mascot character.\n\nThe game design and main character have many similarities to the earlier TwinBee, and both are credited with establishing the cute 'em up subgenre. It also popularized the concept of a boss rush, a stage where the player faces multiple previous bosses again in succession.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/fantzone.zip"
          },
          "added": 1651336720435
        },
        {
          "type": "arcade-capcom",
          "title": "Final Fight",
          "longTitle": "Final Fight",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Final%20Fight%20(World%2C%20set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Final%20Fight%20(World%2C%20set%201).png",
          "description": "Final Fight can be played by up to two players simultaneously, with each player controlling a different character. Before the game begins, the player chooses between the three main characters, Guy, Cody, and Haggar, each with his own fighting style and attributes. Guy is the weakest but has faster attacks, Haggar is the strongest but also the slowest, and Cody has all-round attributes.\n\nFinal Fight consists of six stages or \"rounds\", as well as two bonus rounds. Each round takes place in a different section of Metro City such as the Slums and the Subway, with most rounds featuring more than one level. At the end of each round the player will face a boss character unique to that round.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/ffight.zip"
          },
          "added": 1712675394541
        },
        {
          "type": "arcade",
          "title": "Galaga",
          "longTitle": "Galaga",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Galaga%20(Namco%20rev.%20B).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Galaga%20(Namco%20rev.%20B).png",
          "description": "Galaga is a 1981 fixed shooter arcade video game developed and published by Namco. In North America, it was released by Midway Manufacturing. It is the sequel to Galaxian (1979), Namco's first major video game hit in arcades. Controlling a starship, the player is tasked with destroying the Galaga forces in each stage while avoiding enemies and projectiles. Some enemies can capture a player's ship via a tractor beam, which can be rescued to transform the player into a \"dual fighter\" with additional firepower.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/galaga.zip",
            "samples": "https://archive.org/download/fbneo/FBNeo/support.zip/support%2Fsamples%2Fgalaga.zip"
          },
          "added": 1651336724786
        },
        {
          "type": "arcade",
          "title": "Ghosts 'n Goblins",
          "longTitle": "Ghosts 'n Goblins",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Ghosts'n%20Goblins%20(World_%20set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Ghosts'n%20Goblins%20(World_%20set%201).png",
          "description": "Ghosts 'n Goblins is a platform game where the player controls a knight, named Sir Arthur, who must defeat zombies, ogres, demons, cyclops, dragons and other monsters in order to rescue Princess Prin Prin, who has been kidnapped by Satan, king of Demon World. Along the way the player can pick up new weapons, bonuses and extra suits of armor that can help in this task.\n\nThe player can only be hit twice before losing a life. If the player loses a life, they are returned to the start of the level, or the halfway point if they have managed to get that far. Furthermore, each life can only last a certain length of time. After defeating the final boss, the player must then replay the entire game on a higher difficulty level to reach the genuine final battle.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/gng.zip"
          },
          "added": 1651336181642
        },
        {
          "type": "arcade-capcom",
          "title": "Ghouls 'n Ghosts",
          "longTitle": "Ghouls 'n Ghosts",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Ghouls'n%20Ghosts%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Ghouls'n%20Ghosts%20(World).png",
          "description": "Three years after the events of Ghosts 'n Goblins, the Ghosts have returned with Ghouls for revenge, initiating a mortal holocaust on the Princess' kingdom as beams of light struck through countless villagers. When Sir Arthur returns to the village, his rescue attempt was too soon as his beloved Princess Prin-Prin also has her soul taken away from her body in front of his very eyes. Now it's up to the heroic knight once again to slay his way to the hellish castle to defeat the evil Lucifer and his legion of demons and restore the souls of Prin-Prin and every mortal.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/ghouls.zip"
          },
          "added": 1651336170845
        },
        {
          "type": "arcade",
          "title": "Golden Axe",
          "longTitle": "Golden Axe",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Golden%20Axe%20(set%206%2C%20US%2C%208751%20317-123A).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Golden%20Axe%20(set%206%2C%20US%2C%208751%20317-123A).png",
          "description": "Golden Axe is a sideways scrolling beat-em-up set in a traditional fantasy world, in which up to three warriors take up arms to rescue the kidnapped King and his Queen from the evil Death Adder.\n\nThe game's three different playable characters are an Amazonian warrior named Tyris Flare, a Barbarian hero named Ax Battler, and a Viking dwarf named Gilius Thunderhead. Each character has a special attack move that is activated by pressing both JUMP and ATTACK at the same time. Also, double-tapping the joystick right or left will make the character charge and smash into opponents.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/goldnaxe.zip"
          },
          "added": 1651336739930
        },
        {
          "type": "arcade",
          "title": "Golden Axe: The Revenge of Death Adder",
          "longTitle": "Golden Axe: The Revenge of Death Adder",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Golden%20Axe_%20The%20Revenge%20of%20Death%20Adder%20(World%2C%20Rev%20B).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Golden%20Axe_%20The%20Revenge%20of%20Death%20Adder%20(World%2C%20Rev%20B).png",
          "description": "Golden Axe: The Revenge of Death Adder is an arcade game released by Sega in 1992. It is a prequel to Golden Axe: The Duel and features the same hack and slash action as its predecessor with new additions and improvements. Powered by the System 32 arcade board, Revenge of Death Adder features more detailed graphics, adds new selectable characters and doubles the maximum number of simultaneous players from two to four. None of the three characters from the previous game are playable, with players choosing from four new protagonists who battle through various levels to defeat the villainous Death Adder.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/ga2.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "arcade-konami",
          "title": "Gradius",
          "longTitle": "Gradius",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Nemesis%20(ROM%20version).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Nemesis%20(ROM%20version).png",
          "description": "Gradius is a side-scrolling shooter video game developed and published by Konami. The first game in the Gradius series, it was originally released as a coin-operated arcade game in 1985. The player maneuvers a spacecraft known as the Vic Viper that must defend itself from the various alien enemies. The game uses a power-up system called the \"power meter\", based upon collecting capsules to purchase additional weapons.\n\nGradius was critically acclaimed for its gameplay and unique power-up system. Along with Namco's Xevious, it is cited as being one of the most important shooter games, having paved the way for many similar games to follow.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/nemesis.zip"
          },
          "added": 1651336926572
        },
        {
          "type": "arcade",
          "title": "Hang-On",
          "longTitle": "Hang-On",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Hang-On%20(rev%20A).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Hang-On%20(rev%20A).png",
          "description": "Hang-On is a superb point-to-point sprite scaling racing game in which the player takes control of a superbike and must race over five twisting circuits, avoiding rival bikers and trying to reach the end of each stage before the time limit expires.\n\nHang-On's handling and superb graphics were unlike anything seen before in the arcades and, like many Yu Suzuki games that followed, revolutionised the racing genre.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/hangon.zip"
          },
          "added": 1712678102038
        },
        {
          "type": "arcade-capcom",
          "title": "Hyper Street Fighter II: The Anniversary Edition",
          "longTitle": "Hyper Street Fighter II: The Anniversary Edition",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Hyper%20Street%20Fighter%20II_%20The%20Anniversary%20Edition%20(040202%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Hyper%20Street%20Fighter%20II_%20The%20Anniversary%20Edition%20(040202%20USA).png",
          "description": "Hyper Street Fighter II: The Anniversary Edition is a fighting game by Capcom that was originally released for the arcade and PlayStation 2 in 2003 in Japan and in 2004 in North America and Asia. Released to commemorate the 15th anniversary of the Street Fighter series, Hyper Street Fighter II is a modified port of Super Street Fighter II Turbo in which players can control any versions of the main characters from the five Street Fighter II games previously released for the arcades. Although originally released as a home console game, an arcade port was released shortly afterwards in limited quantities, turning it into the sixth arcade iteration. This game is also the last to use the CP System II.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/hsf2.zip"
          },
          "added": 1651337417250
        },
        {
          "type": "arcade",
          "title": "Mario Bros.",
          "longTitle": "Mario Bros.",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Mario%20Bros.%20(US%2C%20Revision%20G).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Mario%20Bros.%20(US%2C%20Revision%20G).png",
          "description": "Mario Bros. features two plumbers, Mario and Luigi, having to investigate the sewers of New York after strange creatures have been appearing down there. The objective of the game is to defeat all of the enemies in each phase. The mechanics of Mario Bros. involve only running and jumping. Unlike future Mario games, players cannot jump on enemies and squash them, unless they were already turned on their back. Each phase is a series of platforms with pipes at each corner of the screen, along with an object called a \"POW\" block in the center. Phases use wraparound, meaning that enemies and players that go off to one side will reappear on the opposite side. The game continues until the player loses all lives.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mario.zip",
            "samples": "https://archive.org/download/fbneo/FBNeo/support.zip/support%2Fsamples%2Fmario.zip"
          },
          "added": 1651336742245
        },
        {
          "type": "arcade-capcom",
          "title": "Marvel vs. Capcom: Clash of Super Heroes",
          "longTitle": "Marvel vs. Capcom: Clash of Super Heroes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Marvel%20vs%20Capcom%20-%20clash%20of%20super%20heroes%20(980123%20Euro).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Marvel%20vs%20Capcom%20-%20clash%20of%20super%20heroes%20(980123%20Euro).png",
          "description": "Marvel vs. Capcom: Clash of Super Heroes is the fifth Marvel Comics-licensed fighting game by Capcom and the third game in the Marvel vs. Capcom series. In contrast to X-Men vs. Street Fighter and Marvel Super Heroes vs. Street Fighter, the game features characters from numerous Capcom franchises such as Mega Man and Strider, rather than just Street Fighter characters. The game takes place within the Marvel comic continuity, as Professor Charles Xavier calls out for heroes to stop him before he merges with the consciousness of Magneto and becomes the being known as Onslaught, the final boss. The game was developed in late 1997 and first released in January 1998.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mvsc.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "neogeo",
          "title": "Metal Slug - Super Vehicle-001",
          "longTitle": "Metal Slug - Super Vehicle-001",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Metal%20Slug%20-%20Super%20Vehicle-001.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Metal%20Slug%20-%20Super%20Vehicle-001.png",
          "description": "Metal Slug, originally released on the Neo Geo, is a side-scrolling shoot'em'up.\n\nThe player(s) takes the role of a soldier (or two) and fights a gigantic army. Every level consists of running forward blasting anything that moves, while collecting power-ups along the way (there's also a wide selection of weaponry in the game). In the end of each level the player goes up against one gigantic boss. \n\nThe PlayStation port introduces some extra features: there is a combat school where the player may fight with other players for the best time on each level and an art gallery.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mslug.zip"
          },
          "added": 1712674674472
        },
        {
          "type": "neogeo",
          "title": "Metal Slug 2 - Super Vehicle-001/II",
          "longTitle": "Metal Slug 2 - Super Vehicle-001/II",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Metal%20Slug%202%20-%20Super%20Vehicle-001_II%20(NGM-2410)%20(NGH-2410).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Metal%20Slug%202%20-%20Super%20Vehicle-001_II%20(NGM-2410)%20(NGH-2410).png",
          "description": "The heroes of Metal Slug, Marco and Tarma, are called into action once again to take on the might of General Morden and his armies in this, the first of several sequels to the superb 1996 original. This time, however, Morden has acquired a number of powerful allies to aid him in his evil schemes, some of which are not even human. The 2 brave soldiers are called upon to deal with this threat once again, aided by members of the newly founded 'Sparrow Squad', Fio and Eri.\n\nMetal Slug 2 improved on much of what made the first game great; featuring more enemies, larger bosses, more weapons, more vehicles, more hostages, more surprises and more humour than its illustrious predecessor. The occasional moments of slowdown that blighted the first game are still present, however.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mslug2.zip"
          },
          "added": 1712674682269
        },
        {
          "type": "neogeo",
          "title": "Metal Slug 3",
          "longTitle": "Metal Slug 3",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Metal%20Slug%203%20(NGM-2560).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Metal%20Slug%203%20(NGM-2560).png",
          "description": "In the third installment of the Metal Slug series, General Morden is back and he plans to establish a new world order. You guide one of the heroes: Marco, Tarma, Eri or Fio as they blast their way through sidescrolling levels with a unique theme, filled with countless enemies and difficult bosses. You have to free hostages and you can ride bizarre vehicles such as camels, elephants, tanks and robots.\n\nIn the Xbox version, additional game modes, such as Storming the Mothership and Chubby Isle Paradiso, can be unlocked upon completing the five arcade stages. A co-op mode has been included, but no online multiplayer. The only Xbox Live feature available allows you to compare singleplayer scores.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mslug3.zip"
          },
          "added": 1712674745203
        },
        {
          "type": "neogeo",
          "title": "Metal Slug 4",
          "longTitle": "Metal Slug 4",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Metal%20Slug%204%20(NGM-2630).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Metal%20Slug%204%20(NGM-2630).png",
          "description": "The 5th episode of the most famous arcade-shooting-series comes bringing the unaltered classic gameplay, a new weapon, 6 new vehicles as well as 2 new soldiers for the pantheon. The most notable introduction to the series is the Metalish System, giving to the player a new possibility to score more points: after pick up certain shield-shape emblems, a timer bar will be displayed at the top of the screen. During this time, you must to shoot rapidly as many enemies as possible and, depending on your acting, you will receive a corresponding badge bonus that will be added to your score after completing it. When you die, the bonus wears off.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mslug4.zip"
          },
          "added": 1712674860004
        },
        {
          "type": "arcade",
          "title": "Millipede",
          "longTitle": "Millipede",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Millipede.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Millipede.png",
          "description": "Millipede is a 1- or 2-player game with a color raster-scan video display. The game action takes place on a playfield filled with mushrooms, flowers, and deadly DDT bombs. The player tries to destroy a variety of insects that drop from the top of the screen or enter from the sides of the screen, most of them to attack the player. The player controls a bow-shaped vehicle called the Archer. The object of the game is to shoot and destroy as many objects as possible for a high point score, before the player's lives are all used up.\n\nPlayer control consists of a Midi Trak-Ball control and a FIRE button. The Archer is moved by rotating the Midi Trak-Ball control. The Archer can be moved in all directions, but only within the bottom fifth of the screen. However, the Archer must move around mushrooms, flowers, and DDT bombs, since these are fixed and not 'transparent' objects. Pressing the FIRE button causes the Archer to emit an arrow that travels upward. The Archer may fire one or many arrows (by holding down the FIRE button constantly). But only one arrow will appear on the screen at a time.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/milliped.zip"
          },
          "added": 1651340480523
        },
        {
          "type": "arcade",
          "title": "Mortal Kombat",
          "longTitle": "Mortal Kombat",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Mortal%20Kombat%20(rev%205.0%20T-Unit%2003_19_93).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Mortal%20Kombat%20(rev%205.0%20T-Unit%2003_19_93).png",
          "description": "Mortal Kombat, first in the Mortal Kombat series, is a 1-on-1 fighting game featuring a cast of seven different characters. Mortal Kombat took ideas from Capcom's seminal Street Fighter II, such as the game's special moves and projectiles. It also introduced a cast of photo-realistic digitized fighters for players to fight either as or against. \n\nBattles are fought over the best of three rounds. At the end of a battle, a voice instructs the winner to 'Finish Him/Her!' and players have only a couple of seconds to try and execute their character's 'fatality', which sees the winner killing the loser in a spectacular and grisly fashion.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mk.zip"
          },
          "added": 1651336760008
        },
        {
          "type": "arcade",
          "title": "Mortal Kombat 3",
          "longTitle": "Mortal Kombat 3",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Mortal%20Kombat%203%20(rev%202.1).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Mortal%20Kombat%203%20(rev%202.1).png",
          "description": "Succeeding in taking over the Earth realm, Shao Kahn takes all the human souls on Earth as his own. To stop the Outworld realm from totally merging with the Earth realm, a few Earth warriors were chosen to have their souls protected from Shao Kahn in order to defend the Earth realm in a new Mortal Kombat tournament. 14 digitized characters fight to overthrow Shao Kahn and his Centaur lieutenant Motaro.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mk3.zip"
          },
          "added": 1651336880663
        },
        {
          "type": "arcade",
          "title": "Mortal Kombat II",
          "longTitle": "Mortal Kombat II",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Mortal%20Kombat%20II%20(rev%20L3.1).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Mortal%20Kombat%20II%20(rev%20L3.1).png",
          "description": "Mortal Kombat II is a direct sequel to the 1992 original featuring new fighters (increasing the character roster from 7 to 12) and improved graphics. \n\nAs with its predecessor, MKII's matches are divided into rounds, with victory awarded to the first player to win two rounds. At the point of defeat, the losing fighter will become dazed and the winner is given the opportunity to execute a 'finishing move'. \n\nSome of the standard fighting moves (moves shared by all characters) have now been expanded or enhanced. A crouching punch has been added and the 'roundhouse kick' is more powerful and now knocks opponents across the screen. Also, the difference in hit boxes between high and low kicks is now more marked. \n\nAdditionally, returning characters gain new special moves and MKII marks the first appearence of multiple Fatalities - as well as additional, non-lethal finishing moves - in the series. In addition to the Fatalities of its predecessor, MKII offers 'Babalities' (turning a defeated opponent into a crying baby), 'Friendships' (a non-malicious interaction, such as dancing or giving a gift to the defeated opponent) and stage-specific Fatalities (the winner uppercutting their opponent into an abyss below, spikes above, or a pool of acid in the background). \n\nEach character still shares generic attributes - speed, power, jump height and airtime - albeit with differing hit boxes. The sequel drops the points system of its prequel in favour of a consecutive win tally.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mk2.zip"
          },
          "added": 1712674860005
        },
        {
          "type": "arcade",
          "title": "Ms. Pac-Man",
          "longTitle": "Ms. Pac-Man",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/MS%20Pacman.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/MS%20Pacman.png",
          "description": "In this, the first proper sequel to Namco's legendary pill eating maze game, players must once again run around a number of mazes, eating all of the pills that are scattered throughout. The ever-present ghosts (Blinky, Pinky, Inky and Sue) return to hamper the player's progress. The infamous 'Power Pills' are also present and correct, with four appearing in each maze. \n\nNamco introduced a number of changes and enhancements over the original game. The first difference is in the main character. For the first time in video-game history, the game's lead character was female. Ms. Pac-Man is almost identical to the original character with two main differences; she wears a bow in her 'hair', and is also wearing lipstick. \n\nAnother change from the original is that the bonus fruit items are no longer static but now move randomly around the mazes. \n\nMs Pac-Man features four different maze layouts, which alternate every two to four rounds:",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/mspacman.zip"
          },
          "added": 1651336907295
        },
        {
          "type": "arcade",
          "title": "NBA Jam",
          "longTitle": "NBA Jam",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/NBA%20Jam%20(rev%203.01%204_07_93).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/NBA%20Jam%20(rev%203.01%204_07_93).png",
          "description": "NBA Jam is a basketball video game developed and published by Midway for arcades in 1993. It is the first entry in the NBA Jam series. It is one of the first real playable basketball arcade games and is also one of the first sports games to feature NBA-licensed teams and players, and their real digitized likenesses.\n\nA key feature of NBA Jam is the exaggerated nature of the play – players can jump extremely high and make slam dunks that defy both human capabilities and the laws of physics. There are no fouls, free throws, or violations except goaltending and 24-second violations. This means the player is able to freely shove or elbow opponents out of the way. Additionally, if a player makes three baskets in a row, the character becomes \"on fire\" and has an unlimited turbo and increased shooting precision. The \"on fire\" mode continues until the other team scores, or until the player who is \"on fire\" scores four additional consecutive baskets while \"on fire\".",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/nbajam.zip"
          },
          "added": 1651336922407
        },
        {
          "type": "arcade",
          "title": "Out Run",
          "longTitle": "Out Run",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Out%20Run%20(sitdown_upright%2C%20Rev%20B).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Out%20Run%20(sitdown_upright%2C%20Rev%20B).png",
          "description": "Out Run is a ground-breaking racing game in which the player drives a red Ferrari Testarossa through a number of colourful European locations, trying to reach each end-of-level checkpoint before the tight time limit expires.\n\nEach of the game's stages is packed with civilian traffic that must be carefully avoided, as players try to negotiate the game's twisting, hilly roads. \n\nAt the end of every stage players are presented with a fork in the road, allowing them to chose which route they wish to take next. This was not the first time this feature had appeared (Tatsumi's 1983 racer, TX-1, was the first to introduce forked roads).\n\nAs well as being able to choose routes, players could also - via the game's \"in-car radio\" - choose one of three different catchy tunes to listen to while driving. The songs are 'Magical Sound Shower', 'Passing Breeze' and 'Splash Wave'.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/outrun.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "arcade",
          "title": "Pac-Man",
          "longTitle": "Pac-Man",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Puck%20Man%20(Japan%20set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Puck%20Man%20(Japan%20set%201).png",
          "description": "Pac-Man, originally called Puck Man in Japan, is a 1980 maze action video game developed and released by Namco for arcades. In North America, the game was released by Midway Manufacturing as part of its licensing agreement with Namco America. The player controls Pac-Man, who must eat all the dots inside an enclosed maze while avoiding four colored ghosts. Eating large flashing dots called \"Power Pellets\" causes the ghosts to temporarily turn blue, allowing Pac-Man to eat them for bonus points.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/puckman.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "arcade",
          "title": "Popeye",
          "longTitle": "Popeye",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Popeye%20(revision%20D).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Popeye%20(revision%20D).png",
          "description": "Popeye is a superb and demanding platform game featuring characters from the famous King Features Syndicate cartoon show of the same name. The aim of the game is to rescue Popeye's girlfriend, Olive Oyl. This is achieved by catching a set number of objects thrown down by Olive from the top of the screen; such as hearts, letters and musical notes. Popeye is constantly pursued in his quest by love rival, Brutus (originally known as Bluto). Popeye must either run away from Brutus or grab some spinach and punch him off the screen (he will, of course, return).\n\nShould any of Olive Oyl's items fail to be caught, they will fall into the water at the bottom of the screen. Popeye will then have only a few seconds to retrieve the object or a life is lost. Several other Popeye characters also make an appearance in the game; namely Wimpy, Swee'Pea, the Sea Hag, and her vulture Bernard. The game's three levels are the dock scene, the street scene and the shipboard scene. These repeat with increasing difficulty.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/popeye.zip"
          },
          "added": 1658400318407
        },
        {
          "type": "neogeo",
          "title": "Pulstar",
          "longTitle": "Pulstar",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Pulstar.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Pulstar.png",
          "description": "An alien threat looms over the galaxy and only you and your trusty star fighter can defeat them.\n\nPulstar is a 2D side-scrolling shooter in which you control your ship as it makes its way past stages filled with waves after waves of enemies bent on your destruction. You can upgrade your main weapons by collecting power-ups and charging up energy allows you to release charged attacks at the cost of power-up consumption. Additionally your ship comes with an ever-prescent \"option\" gun pod that floats around your ship and which can be positioned in several configurations to help protect the ship or increase its firepower.\n\nWhile completely 2D, the game uses pre-rendered 3D sprites and includes fully animated cutscenes between each level. Also features support for two-player gameplay.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/pulstar.zip"
          },
          "added": 1712674096501
        },
        {
          "type": "arcade",
          "title": "Q*bert",
          "longTitle": "Q*bert",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Q_bert%20(US%20set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Q_bert%20(US%20set%201).png",
          "description": "Q*bert is an isometric platform game with puzzle elements where the player controls the titular protagonist from a third-person perspective. Q*bert starts each game at the top of a pyramid of cubes, and moves by jumping diagonally from cube to cube. Landing on a cube causes it to change color, and changing every cube to the target color allows the player to progress to the next stage.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/qbert.zip",
            "samples": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/mame-support/Support/Samples/qbert.zip"
          },
          "added": 1712674096501
        },
        {
          "type": "arcade",
          "title": "R-Type",
          "longTitle": "R-Type",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/R-Type%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/R-Type%20(World).png",
          "description": "R-Type is a sideways-scrolling shoot-em-up in which the evil Bydo Empire rules the galaxy through fear and intimidation and it's up to the player - piloting their heavily-armed R-9 space ship - to battle through eight tough levels to the heart of the Bydo stronghold and defeat them.\n\nThe game's revolutionary weapons system is its real stroke of genius. The first of numerous innovations that R-Type bought to the genre is the beam weapon: when the fire button is held down, a 'power meter' starts to charge up; once the meter is full, releasing the fire button unleashes a very powerful plasma burst capable of inflicting much greater damage to enemy ships or even destroying numerous enemies simultaneously. The trade-off is that charging the weapon takes up valuable seconds, giving the Bydo ships time to attack.\n\nThe most significant addition to R-type's arsenal is the now-legendary 'Force Pod'. This takes the form of an invincible, detachable laser-firing pod that can be attached to either the front or rear of the player's ship, or can be detached completely, after which the pod sits some distance either ahead or behind the player's ship, tracking its movements and providing additional fire power. When attached to the R9 ship, the pod acts as a shield. This forms a crucial part of R-Type's gameplay and has to be fully utilised to navigate certain sections of the game, such as the huge mothership that comprises the game's 3rd stage.\n\nR-Type's levels are designed to make full use of its unique weapons system, making for very linear and demanding gameplay in which losing or picking up the wrong weapon at the wrong time often leads to an instant death. Its intelligent, precise and demanding level design, gave the world its first truly 'strategic' shoot-em-up.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/rtype.zip"
          },
          "added": 1651336049719
        },
        {
          "type": "arcade",
          "title": "Rygar",
          "longTitle": "Rygar",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Rygar%20(US%20set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Rygar%20(US%20set%201).png",
          "description": "Rygar is a video game created by Tecmo in 1986. In the arcade version's story, the year 19XX sees the rise of dread creatures, not seen since before the Common Era, led by Ligar. Dominating the world, Ligar and his forces oppress humanity. The only thing that preserves humanity's will to survive is a prophecy that Ligar's rule will be opposed by the return of a long-dead warrior of Argos. That warrior does return to the world of the living, and he alone can save humanity.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/rygar.zip"
          },
          "added": 1651336093667
        },
        {
          "type": "neogeo",
          "title": "Samurai Shodown",
          "longTitle": "Samurai Shodown",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Samurai%20Shodown%20_%20Samurai%20Spirits%20(NGM-045).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Samurai%20Shodown%20_%20Samurai%20Spirits%20(NGM-045).png",
          "description": "Samurai Shodown is a competitive fighting game developed and published by SNK for their Neo Geo arcade and home platform. Released in 1993, it is the first installment in the Samurai Shodown series. In contrast to other fighting games at the time, which were set in modern times and focused primarily on hand-to-hand combat, Samurai Shodown is set in feudal-era Japan (similar to Kaneko's Shogun Warriors which was released the year prior) and was SNK's first arcade fighting game to focus primarily on weapon-based combat.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/samsho.zip"
          },
          "added": 1651337010754
        },
        {
          "type": "neogeo",
          "title": "Samurai Shodown II",
          "longTitle": "Samurai Shodown II",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Samurai%20Shodown%20II%20_%20Shin%20Samurai%20Spirits%20-%20Haohmaru%20jigokuhen%20(NGM-063)(NGH-063).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Samurai%20Shodown%20II%20_%20Shin%20Samurai%20Spirits%20-%20Haohmaru%20jigokuhen%20(NGM-063)(NGH-063).png",
          "description": "Following up on the extremely enthusiastic fan reception of the first Samurai Shodown game, SNK rebuilt the sequel from the ground up, including almost all of its predecessor's cast, adding several new characters, and refining the overall gameplay with more responsive control, more moves (particularly the use of the POW meter as a super special move meter; these moves not only cause severe damage to the opponents but also break their weapons, forcing them to fight unarmed for a short interval before a replacement weapon is issued), and a substantial number of Easter eggs.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/samsho2.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "neogeo",
          "title": "Samurai Shodown III: Blades of Blood",
          "longTitle": "Samurai Shodown III: Blades of Blood",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Samurai%20Shodown%20III%20_%20Samurai%20Spirits%20-%20Zankurou%20Musouken%20(NGM-087).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Samurai%20Shodown%20III%20_%20Samurai%20Spirits%20-%20Zankurou%20Musouken%20(NGM-087).png",
          "description": "Samurai Shodown III: Blades of Blood was released in the arcades on November 15, 1995. It is the third game in SNK's Samurai Shodown series of fighting games. While it is the third game in the main series, it is the first part of a two-chapter story that is chronologically set between the events of Samurai Shodown and Samurai Shodown II.\n\nThe game has a darker aesthetic compared to its predecessors. All characters consequently underwent a visual makeover to match this new tone. The humor that characterized the series made way for a more somber and gritty feel. Along with the aesthetic overhaul came significant changes in the gameplay with introduction of two selectable versions of each character: \"Slash\" (chivalry) and \"Bust\" (treachery). Each version comes with its own moves and fighting styles; Slash is closer to the first two games, while Bust is a more aggressive style that introduces new moves.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/samsho3.zip"
          },
          "added": 1651337090359
        },
        {
          "type": "neogeo",
          "title": "Samurai Shodown V Special",
          "longTitle": "Samurai Shodown V Special",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Samurai%20Shodown%20V%20Special%20_%20Samurai%20Spirits%20Zero%20Special%20(NGM-2720).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Samurai%20Shodown%20V%20Special%20_%20Samurai%20Spirits%20Zero%20Special%20(NGM-2720).png",
          "description": "Samurai Shodown V Special is the ninth entry in SNK's Samurai Shodown series of fighting games. It is an upgraded version of the game Samurai Shodown V and is the last official game for the Neo Geo platform. A further upgraded version of the game called Samurai Shodown V Perfect was location-tested in late 2004, but not officially released until it was included in the Samurai Shodown NeoGeo Collection in 2020.\n\nThe essential mechanics remained largely unchanged from previous games, with the update being directed towards graphical and audio changes. The updated visuals include portraits by artist Satoshi Ito, which convey a dark atmosphere similar to that of Samurai Shodown III.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/samsh5sp.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "neogeo",
          "title": "Sengoku",
          "longTitle": "Sengoku",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Sengoku%20_%20Sengoku%20Denshou%20(NGM-017)(NGH-017).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Sengoku%20_%20Sengoku%20Denshou%20(NGM-017)(NGH-017).png",
          "description": "A 2D side-scrolling beat 'em up, Sengoku casts you and a friend as two renegade fighters out to beat the crap out of the many assorted gangs that threaten the post-apocalyptic cities of the future. Unfortunately for them they also get caught in a time-warping scheme caused by the evil Nobunaga who attempts to invade the time period with mythical warriors and evil creatures from the Japanese sengoku period.\n\nThe game thus takes you from the city to a spirit-realm from time to time, in which you must fight all sorts of Japanese mythical figures, and release three haunted spirits that can aid you in your battle. Collecting orbs from defeated enemies allows you heal up, gain weapons and even energy attacks and also summon the warrior forms of the spirits you released, which change your character's form and give you a new collection of attacks and powers.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/sengoku.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "neogeo",
          "title": "Sengoku 2",
          "longTitle": "Sengoku 2",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Sengoku%202%20_%20Sengoku%20Denshou%202.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Sengoku%202%20_%20Sengoku%20Denshou%202.png",
          "description": "A sequel to Sengoku, Sengoku 2 once again casts you as two street fighting heroes caught in the midst of a supernatural attack by the undead forces of the evil Nobunaga from the Japanese sengoku period, although this time the game warps you through several time periods and locations to fight evil, from feudal Japan to WWII Europe.\n\nAs in the original, the game plays as a standard 2D side-scrolling beat 'em up, in which you have to proceed through each stage killing all enemies that cross your path and defeating the stage boss to proceed. New for the sequel is the inclusion of swords as your default weapons, which now feature both high and low attacks, as well as a block move that allows you to parry enemy attacks. Collecting orbs gives you weapon upgrades and energy attacks, as well as the ability to morph into any of the three spirits released in the original which give you a new arsenal of moves and powers.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/sengoku2.zip"
          },
          "added": 1712674860005
        },
        {
          "type": "neogeo",
          "title": "Sengoku 3",
          "longTitle": "Sengoku 3",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Sengoku%203%20_%20Sengoku%20Densho%202001%20(set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Sengoku%203%20_%20Sengoku%20Densho%202001%20(set%201).png",
          "description": "The third game in the Sengoku series of beat 'em ups, Sengoku 3 once again pits you and a friend against the undead forces of Nobunaga, however this time you can freely select from a group of different characters each with their own weapons and abilities, as well as choose which location in the world (or level) to tackle whenever you want.\n\nThe game incorporates a more complex fighting system similar to a one-on-one fighting game, by giving players different attack buttons, special moves based on directional inputs, combos and even a super bar used to unleash devastating super moves. You cannot change weapons or transform into other characters as in the previous games, but you can acquire different ranged weapons for additional attacks as well as unlock certain bosses to increase your available characters.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/sengoku3.zip"
          },
          "added": 1712674860005
        },
        {
          "type": "arcade",
          "title": "Shadow Dancer",
          "longTitle": "Shadow Dancer",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Shadow%20Dancer%20(set%203%2C%20US).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Shadow%20Dancer%20(set%203%2C%20US).png",
          "description": "Shadow Dancer is a side-scrolling hack-and-slash action game produced by Sega and originally released as an arcade game in 1989. It is the second and the final arcade game in the Shinobi series, following the original Shinobi itself. The player controls a ninja aided by an attack dog, who is fighting to save the city from a terrorist organization.\n\nShadow Dancer was the first game developed for the Sega System 18 arcade board hardware, and its generally well-received home versions were released for the Master System console and several home computer systems in 1991. A loose adaptation titled Shadow Dancer: The Secret of Shinobi was released exclusively for the Mega Drive/Genesis in 1990.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/shdancer.zip"
          },
          "added": 1712674935969
        },
        {
          "type": "arcade",
          "title": "Shinobi",
          "longTitle": "Shinobi",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Shinobi%20(set%206%2C%20System%2016A%2C%20unprotected).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Shinobi%20(set%206%2C%20System%2016A%2C%20unprotected).png",
          "description": "Shinobi is a scrolling platform beat-em-up in which the player takes on the role of Joe Musashi, a Shinobi Ninja, who must fight his way through 5 tough missions - each made up of between 3 to 5 stages - in his quest to rescue the kidnapped Ninja children of the Iga clan; now hostages of an evil Ninja syndicate called \"Zeed\". To complete a mission, the player must rescue all of the kidnapped children on each level, with the number of hostages remaining displayed on a meter in the bottom left corner of the screen.\n\nShinobi was a huge success for Sega, and deservedly so. Its perfectly realized blend of platform and fighting action and is as fine an exponent of the 'easy to get into, difficult to master' gameplay ethic as video games have seen.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/shinobi.zip"
          },
          "added": 1651337269206
        },
        {
          "type": "neogeo",
          "title": "Shock Troopers",
          "longTitle": "Shock Troopers",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/Shock%20Troopers%20(set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/Shock%20Troopers%20(set%201).png",
          "description": "Shock Troopers pits the players against a mighty terrorist group who are holding a girl hostage, in order to force her grandfather to surrender a powerful drug which will enable the terrorists to control the minds of the grandfather's soldiers and create a huge, unstoppable army.\n\nShock Troopers is a multi-directional scrolling shoot-em-up for one or two players that builds upon the foundations laid by Capcom's 1985 classic, \"Commando (Capcom)\" and also borrows heavily from Commando's sequel, '\"Mercs\". As well as enemy troops, players must contend with tanks, choppers and assorted military vehicles, and must also be careful to avoid any of the landmines that litter the levels. Extra weapons and health can be picked up from destroyed enemy vehicles, as well as being found in enemy supply crates. Shock Troopers is effectively three games in one as players can chose one of three different routes; each made up of different levels. The game also offers greater variety of gameplay than other of the genre; with levels having the players travel on the back of fast moving vehicles, climbing a rock face etc.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/shocktro.zip"
          },
          "added": 1712674954675
        },
        {
          "type": "arcade",
          "title": "Sky Skipper",
          "longTitle": "Sky Skipper",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Sky%20Skipper.png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Sky%20Skipper.png",
          "description": "Sky Skipper is a 1981 arcade game by Nintendo. In the game, the player pilots a biplane and must save animals and a royal family from gorillas holding them captured.\n\nThe game was poorly received in location testing and was never widely released. The cabinets were converted into Popeye machines for release the following year. Nintendo of America stored one cabinet in its archives which is now the only known Sky Skipper cabinet remaining in the world. The cabinet was scanned and photographed by arcade enthusiasts in 2016, who also sourced one of four known remaining Sky Skipper arcade boards to build a faithful cabinet restoration. The board from the Nintendo of America cabinet is the only known unmodified boardset of the game. Nintendo copied the ROM image from this board and released it on the Nintendo Switch eShop in 2018 as part of the Arcade Archives series of digital download titles.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/skyskipr.zip"
          },
          "added": 1651337273108
        },
        {
          "type": "arcade",
          "title": "Space Harrier",
          "longTitle": "Space Harrier",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Space%20Harrier%20(Rev%20A%2C%208751%20315-5163A).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Space%20Harrier%20(Rev%20A%2C%208751%20315-5163A).png",
          "description": "Space Harrier is a sprite-scaling 3D shoot-em-up set in the 'Fantasy Zone'; a surreal world composed of abstract structures and a checkerboard landscape. The game's enemies are as abstract as its setting; with creatures including prehistoric Mammoths, alien pods, giant mushrooms and, at the end of most stages, a huge, fireball-spitting Chinese Dragon.\n\nThe player's on-screen counterpart carries a portable jetpack under his arm which allows him to fly. The player can also run along the ground to avoid overhead structures and enemies.\n\nIn addition to its flight capability, the jetpack is also equipped with a laser, used to destroy both the game's many enemies as well as some (but not all) obstructions, such as the trees and floating rocks on the first stage.\n\nSpace Harrier has a total of 18 stages, each with a boss fight at the end. Three exceptions are the bonus stages (5th and 12th) and the 18th stage, which is a 'boss rush' featuring some of the bosses encountered up to that point.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/sharrier.zip"
          },
          "added": 1651337261295
        },
        {
          "type": "arcade",
          "title": "Space Invaders DX",
          "longTitle": "Space Invaders DX",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Space%20Invaders%20DX%20(US%2C%20v2.1).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Space%20Invaders%20DX%20(US%2C%20v2.1).png",
          "description": "A modern and fitting tribute to Taito's 1978 seminal shoot-em-up, \"Space Invaders\". \n\nThere are now 3 different game modes to choose from. These include a faithful recreation of the legendary original - available in both upright and cocktail versions - and replete with a simulation of the infamous \"coloured plastic overlay\" that was used to add the impression of full colour graphics to the original game.\n\nThe 2 remaining game modes are 'Versus', with simultaneous split-screen 2-player action, and \"Parody\", which features characters and graphics from other well-known Taito games, such as \"The New Zealand Story\", \"Bubble Bobble\" and \"Liquid Kids\". Despite the graphical changes, the Parody version plays identically to the original game, and all modes retain the original, legendary sound effects.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/spacedx.zip"
          },
          "added": 1651420354193
        },
        {
          "type": "arcade",
          "title": "Street Fighter",
          "longTitle": "Street Fighter",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Street%20Fighter%20(US%2C%20set%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Street%20Fighter%20(US%2C%20set%201).png",
          "description": "Street Fighter is a 1987 arcade video game by Japanese developer and publisher Capcom. It is the first competitive fighting game produced by the company and the first instalment in the Street Fighter series. It was a commercial success in arcades and introduced special attacks and some of the conventions made standard in later fighting games, such as the six-button controls and the use of command-based special moves.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/sf.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "arcade-capcom",
          "title": "Street Fighter Alpha 3",
          "longTitle": "Street Fighter Alpha 3",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Street%20Fighter%20Alpha%203%20(980904%20Euro).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Street%20Fighter%20Alpha%203%20(980904%20Euro).png",
          "description": "Street Fighter Alpha 3, the third game in the Alpha series, has a total of 31 fighters, the most in the series so far. New characters include old favorites E. Honda, Blanka, Vega, Cammy, T. Hawk, Dee Jay, Juni and Juli. Some of the newest fighters on the block include a former Final Fight character (Cody, who has been in jail since the last Final Fight game, or so his clothing suggests), Karin Kanzuki and Rainbow Mika. The major difference between this Alpha and the last two are the new play modes World Tour, Arcade, VS, Training and Entry.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/sfa3.zip"
          },
          "added": 1651337226599
        },
        {
          "type": "arcade-capcom",
          "title": "Street Fighter III: 3rd Strike - Fight for the Future",
          "longTitle": "Street Fighter III: 3rd Strike - Fight for the Future",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Street%20Fighter%20III%203rd%20Strike_%20Fight%20for%20the%20Future%20(Euro%20990608).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Street%20Fighter%20III%203rd%20Strike_%20Fight%20for%20the%20Future%20(Euro%20990608).png",
          "description": "Street Fighter III: 3rd Strike - Fight for the Future is a 2D fighting game developed and published by Capcom, originally released in 1999 for the arcades and in 2000 for the Dreamcast. In 2004 it was released on the PlayStation 2 and Xbox. A downloadable online version titled Street Fighter III: 3rd Strike Online Edition was released on PlayStation Network and Xbox Live Arcade in 2011.\n\nStreet Fighter III 3rd Strike is the second and final follow-up to Street Fighter III, following Street Fighter III: 2nd Impact. Like its predecessors, it runs on the CP System III hardware. 3rd Strike increased the character roster by adding five new characters, notably including Chun-Li. It also added further refinements to the previous game's play mechanics and rules. The game was well received in all of its versions and has since been regarded as one of the greatest fighting games of all time. On 29 May 2018, Street Fighter III: 3rd Strike - Fight for the Future was released as a part of the Street Fighter 30th Anniversary Collection for the Nintendo Switch, PlayStation 4, Steam, and Xbox One.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/sfiii3.zip"
          },
          "added": 1712676848650
        },
        {
          "type": "arcade-capcom",
          "title": "Super Gem Fighter Mini Mix",
          "longTitle": "Super Gem Fighter Mini Mix",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Super%20Gem%20Fighter%20Mini%20Mix%20(970904%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Super%20Gem%20Fighter%20Mini%20Mix%20(970904%20USA).png",
          "description": "Super Gem Fighter: Mini Mix / Pocket Fighter is a superb, abstract and humorous fighting game featuring miniaturized renditions from several Capcom fighting games; including the legendary \"Street Fighter\" series, as well as \"Darkstalkers\" and the little-known \"Red Earth\".\n\nDuring a bout, players will be able to release coloured gems from successful attacks against their opponent, as well as from wooden chests that regularly appear. Collecting these gems will 'power-up' the player's character, giving them more powerful attacks. There are two bars and three sub-bars in the interface. The two main bars are the life bar and the super bar; the first indicates the player's health and the second their ability to throw super combos. The Super Bar itself can be filled up to nine levels, allowing players to execute more super combos. Each super combo has a level assigned to it, and it uses Super Bars depending on it.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/sgemf.zip"
          },
          "added": 1661269291408
        },
        {
          "type": "arcade",
          "title": "Super Hang-On",
          "longTitle": "Super Hang-On",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Super%20Hang-On%20(sitdown_upright%2C%20unprotected).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Super%20Hang-On%20(sitdown_upright%2C%20unprotected).png",
          "description": "Super Hang-On is a checkpoint-based racing game and is the sequel to the acclaimed \"Hang-On\", released two years earlier. As with the prequel, players take control of a superbike and must race over twisting road-based circuits, avoiding rival bikers and trying to reach the end-of-stage checkpoint before the time limit expires.\n\nFor the sequel, Sega introduced the hilly, undulating roads that had been executed so superbly in 1986's \"Out Run\". The gameplay was further enhanced with the introduction of the 'turbo' button. Upon reaching the bike's maximum speed of 280kph, players could press and hold the turbo and push the bike up to 324kph - something that was necessary to beat the game's extremely tight time limits. This had to be used carefully, however, as the increase in speed made the bike harder to control and accelerating at the wrong time would invariably see a head-on collision with either rival bikers or the road-side objects that litter the stages.\n\nPlayers could chose to race on any one of four courses: Africa, Asia, America and Europe. Africa is the easiest and shortest of the four, with each subsequent course becoming both more demanding - with tighter bends and more aggressive rival racers - and having a greater number of stages to have to beat. Africa, for example, is made up of only six stages, while the hardest course, Europe, has eighteen stages.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/shangon.zip"
          },
          "added": 1651337247308
        },
        {
          "type": "arcade-konami",
          "title": "Teenage Mutant Ninja Turtles",
          "longTitle": "Teenage Mutant Ninja Turtles",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Teenage%20Mutant%20Ninja%20Turtles%20(World%204%20Players%2C%20version%20X).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Teenage%20Mutant%20Ninja%20Turtles%20(World%204%20Players%2C%20version%20X).png",
          "description": "Teenage Mutant Ninja Turtles is a side-scrolling beat 'em up released by Konami in 1989. It is based on the first Teenage Mutant Ninja Turtles animated series which began airing in the winter of 1987. The player chooses from one of the four Ninja Turtles: Leonardo, Michelangelo, Donatello, and Raphael. After Shredder kidnaps the Turtles' friend April O'Neil and their mentor Splinter, they must give chase, save their comrades, and defeat the evil Shredder. Up to four players (two in some versions) can take control of any of the Turtles. Donatello has slower attacks but a longer range, Michelangelo and Raphael have faster attacks but a shorter range, and Leonardo is a well-rounded Turtle with average range and speed. Most of the enemies the Turtles face are the Foot Soldiers, all color-coded to indicate their attack patterns and weapon of choices. Some enemies, such as the standard purple-clad Foot Soldiers and Roadkill Rodney robots, have the ability to restrain the Turtles' mobility and drain their health, leaving the player open to attack for other enemies. The bosses in the game include Rocksteady and Bebop (individually at first in that order, and later the two of them together), Baxter Stockman, Granitor, General Traag, Krang, and Shredder himself.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/tmnt.zip"
          },
          "added": 1651337343801
        },
        {
          "type": "neogeo",
          "title": "The King of Fighters '96",
          "longTitle": "The King of Fighters '96",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/The%20King%20of%20Fighters%20'96%20(NGM-214).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/The%20King%20of%20Fighters%20'96%20(NGM-214).png",
          "description": "SNK's flagship series returns for another year. Many of the changes in this year's KOF release come in the form of improved graphics, sound effects, music and totally redone character sprites. The gameplay of the system has been altered with the addition of \"Rush\" multi-hit combos and new moves for practically every character. The storyline of the series receives heavy focus in this release with the Orochi Saga swinging into high-gear. Other features carried over from the previous year include the ability to choose between the default \"Team Fighting\" mode or the traditional \"Single Fighter\" style of gameplay, plus the \"Versus\" and \"Survival\" gameplay modes.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/kof96.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "neogeo",
          "title": "The King of Fighters '97",
          "longTitle": "The King of Fighters '97",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/The%20King%20of%20Fighters%20'97%20(NGM-2320).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/The%20King%20of%20Fighters%20'97%20(NGM-2320).png",
          "description": "The King of Fighters '97 is a fighting game produced by SNK for the Neo Geo arcade and home console in 1997. It is the fourth game in The King of Fighters series. It was ported to the Neo Geo CD, as well as the PlayStation and the Sega Saturn in Japan only.\n\nKOF '97 follows the same format as the previous KOF games, but introduces two distinct playing styles which the player can select before choosing their team: Advanced and Extra.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/kof97.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "neogeo",
          "title": "The King of Fighters '98: The Slugfest",
          "longTitle": "The King of Fighters '98: The Slugfest",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/The%20King%20of%20Fighters%20'98%20-%20The%20Slugfest%20_%20King%20of%20Fighters%20'98%20-%20dream%20match%20never%20ends%20(NGM-2420).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/The%20King%20of%20Fighters%20'98%20-%20The%20Slugfest%20_%20King%20of%20Fighters%20'98%20-%20dream%20match%20never%20ends%20(NGM-2420).png",
          "description": "The King of Fighters '98: The Slugfest, known in Japan as The King of Fighters '98: Dream Match Never Ends, is a fighting game released by SNK for the Neo Geo arcade and home consoles in 1998. It is the fifth game in The King of Fighters series. It was advertised by SNK as a \"special edition\" of the series, as it featured most of the characters who appeared in the previous games (from KOF '94 to '97).\n\nKOF '98 was also released for the Neo Geo CD in 1998 and for the PlayStation in Japan in 1999. An updated Dreamcast version titled The King of Fighters: Dream Match 1999 was released in 1999, featuring remade 3D backgrounds. Another updated version was also made for the Taito Type X arcade system and home consoles as The King of Fighters '98: Ultimate Match (KOF '98UM), which expands the number of playable characters, further tweaks the gameplay and features a third fighting style option. A third updated version titled The King of Fighters '98: Ultimate Match Final Edition (KOF '98UMFE) was released in 2011.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/kof98.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "neogeo",
          "title": "The King of Fighters 2000",
          "longTitle": "The King of Fighters 2000",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/The%20King%20of%20Fighters%202000%20(NGM-2570)%20(NGH-2570).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/The%20King%20of%20Fighters%202000%20(NGM-2570)%20(NGH-2570).png",
          "description": "The final King of Fighters game released by SNK in its original state, The King of Fighters 2000 expands on the story and gameplay presented in The King of Fighters '99. This year's tournament is sponsored by the Ikari Warriors in an attempt to discover more about the NESTS organization, and to derail the plans of potential NESTS agents K' and Maxima. Not everything is as straight-forward as it usually is, however, and even the Ikari Warriors themselves are at risk of being betrayed from within by the end of the tournament.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/kof2000.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "neogeo",
          "title": "The King of Fighters 2002",
          "longTitle": "The King of Fighters 2002",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/The%20King%20of%20Fighters%202002%20(NGM-2650)(NGH-2650).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/The%20King%20of%20Fighters%202002%20(NGM-2650)(NGH-2650).png",
          "description": "The second plotless \"dream match\" in The King of Fighters series, this game sports 39 normal characters and 5 hidden characters, some of whom haven't appeared since KOF98. The King of Fighters 2002 also has five characters exclusive to the X-Box, the PS2 and/or Dreamcast systems: Shingo Yabuki, King, Geese Howard, \"Riot of the Blood\" Iori and Leopold Goenitz. Shingo and King are available on all the non-Neo Geo systems, while Geese and the rest are only available on the PS2 and X-Box platforms.\n\nThe gameplay system has also changed. The striker system and four-character teams found in the last three KOF releases have been totally removed. In their place are the old-school three man teams and the \"Advanced system\" from The King of Fighters '97 and The King of Fighters '98.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/kof2002.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "neogeo",
          "title": "The Last Blade 2: Heart of the Samurai",
          "longTitle": "The Last Blade 2: Heart of the Samurai",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Snaps/output/The%20Last%20Blade%202%20_%20Bakumatsu%20Roman%20-%20Dai%20Ni%20Maku%20Gekka%20no%20Kenshi%20(NGM-2430)(NGH-2430).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-neogeo-images/master/Named_Titles/resized/The%20Last%20Blade%202%20_%20Bakumatsu%20Roman%20-%20Dai%20Ni%20Maku%20Gekka%20no%20Kenshi%20(NGM-2430)(NGH-2430).png",
          "description": "The Last Blade 2: Heart of the Samurai is a 2D fighting game which features anime-style characters that fight each other with swords, clubs, and even fishing poles. These characters pull off their special moves with that 'quarter-circle-to-half-circle' and 'double-half-circle' controller motions, reminiscent of Street Fighter.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/lastbld2.zip"
          },
          "added": 1661270672658
        },
        {
          "type": "arcade-capcom",
          "title": "The Punisher",
          "longTitle": "The Punisher",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/The%20Punisher%20(930422%20World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/The%20Punisher%20(930422%20World).png",
          "description": "The Punisher is a 1993 beat 'em up arcade game developed and released by Capcom. It stars the Marvel Comics' antihero the Punisher (Frank Castle) and co-stars S.H.I.E.L.D. agent Nick Fury as the second player's character as they embark on a mission to kill the crime lord the Kingpin and bring down his organization. While following the same general formula as Capcom's previous beat 'em ups, the game has a range of usable weapons and a comics-style presentation.\n\nThe Punisher gained significant popularity in arcades and is widely regarded as one of the best titles in the beat 'em up genre as well as one of the best video game adaptations of comic books. A Mega Drive/Genesis port was developed by Sculptured Software and published by Capcom to mixed reviews and commercial failure.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/punisher.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "arcade",
          "title": "Turbo Out Run",
          "longTitle": "Turbo Out Run",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Turbo%20Out%20Run%20(Out%20Run%20upgrade%2C%20FD1094%20317-0118).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Turbo%20Out%20Run%20(Out%20Run%20upgrade%2C%20FD1094%20317-0118).png",
          "description": "Turbo OutRun is a 1989 arcade racing game released by Sega. A follow-up to 1986's Out Run, it was released as a dedicated game, as well as an upgrade kit for the original Out Run board.\n\nLike its predecessor, Turbo OutRun has players driving a Ferrari, this time a Ferrari F40. Players now traverse a set route across the entire continental United States from New York City to Los Angeles instead of the branching paths of the first game. In addition to a time limit, Turbo OutRun also adds a computer-controlled opponent driving a Porsche 959. The \"Turbo\" in the title also plays a factor as players can now press a button to receive a brief turbo boost of speed. Various power-ups which increase the vehicle's attributes can now be chosen at various stages of the game.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/toutrun.zip"
          },
          "added": 1651341926628
        },
        {
          "type": "arcade-konami",
          "title": "TwinBee",
          "longTitle": "TwinBee",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/TwinBee%20(ROM%20version).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/TwinBee%20(ROM%20version).png",
          "description": "TwinBee is a vertical-scrolling shoot 'em up game originally released by Konami as an arcade game in 1985 in Japan. Along with Sega's Fantasy Zone, released a year later, TwinBee is credited as an early archetype of the \"cute 'em up\" type in its genre. It was the first game to run on Konami's Bubble System hardware.\n\nTwinBee can be played by up to 2-players simultaneously. The player takes control of a cartoon-like anthropomorphic spacecraft, with Player 1 taking control of TwinBee, the titular ship, while Player 2 controls WinBee. The game control consists of an eight-way joystick and two buttons: one for shooting enemies in the air and the other for dropping bombs to ground enemies (similarly to Xevious).",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/twinbee.zip"
          },
          "added": 1651337350981
        },
        {
          "type": "arcade",
          "title": "Wonder Boy",
          "longTitle": "Wonder Boy",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Wonder%20Boy%20(set%201%2C%20315-5177).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Wonder%20Boy%20(set%201%2C%20315-5177).png",
          "description": "The titular Wonder Boy is a tribal caveman-like boy whose girlfriend Tina[b] has been captured by the dark King (known as Drancon in the Game Gear version). The player must guide the Wonder Boy through seven \"areas\", each consisting of four \"rounds\".\n\nThe boy can arm himself with a stone hatchet, which he can throw at oncoming foes, a skateboard with which he can rush through the levels and temporary protection by an angel which allows him to destroy foes by simply running into them. All of the aforementioned power-ups are obtained by breaking open eggs. These eggs can also contain unpleasant surprises – curses which cause him to lose vitality more quickly than usual, and poisonous mushrooms which reduce the boy's vitality in one go. The player must remain aware of the vitality meter, which constantly runs down at a steady pace and can only be refilled by collecting food throughout the level. There is also one doll to collect in each level, which doubles the bonus points awarded at the end of the level. If all 28 dolls are collected, then a bonus eighth area will be unlocked.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/wboy.zip"
          },
          "added": 1651337362555
        },
        {
          "type": "arcade",
          "title": "Wonder Boy III - Monster Lair",
          "longTitle": "Wonder Boy III - Monster Lair",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Wonder%20Boy%20III%20-%20Monster%20Lair%20(set%206%2C%20World%2C%20System%2016B%2C%208751%20317-0098).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Wonder%20Boy%20III%20-%20Monster%20Lair%20(set%206%2C%20World%2C%20System%2016B%2C%208751%20317-0098).png",
          "description": "Wonder Boy III: Monster Lair is a side-scrolling action game developed by Westone Bit Entertainment that was originally released for the arcades by Sega in 1988.\n\nThe game balances basic concepts found in both platformers and arcade shooters. The player is able to jump and shoot projectiles from a sword. He must ride a flying dragon and confront a large boss throughout the second half of each round. The player's life bar steadily diminishes as time passes. Health is gained through collection of fruit and projectile weapons. Some fruits, when shot, will expand and burst into multiple items.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/wb3.zip"
          },
          "added": 1651337358851
        },
        {
          "type": "arcade-konami",
          "title": "X-Men",
          "longTitle": "X-Men",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/X-Men%20(4%20Players%20ver%20EBA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/X-Men%20(4%20Players%20ver%20EBA).png",
          "description": "X-Men is a side-scrolling beat-em-up for up to four players. The X-Men's mission is to find and rescue Professor X, who has been captured by evil mutants and is now being held prisoner by Magneto.\n\nEach X-Man character has an 'Attack', 'Jump' and 'Mutant Power' button. The mutant power attack is a powerful special move unique to each X-Man. While it inflicts a lot of damage on the enemies, the trade-off is that each usage removes 3 bars from the players health meter (a full meter has 10 bars). Each level ends with a face-off against a powerful mutant boss character.\n\nThe game has six stages, with the final one set on 'Asteroid M', Magneto's base. The defeated mutant bosses from the previous levels each make an appearance (albeit in a less powerful form) before the final encounter with Magneto himself.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/xmen.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "arcade-capcom",
          "title": "X-Men vs. Street Fighter",
          "longTitle": "X-Men vs. Street Fighter",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/X-Men%20vs%20Street%20Fighter%20(961004%20Euro).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/X-Men%20vs%20Street%20Fighter%20(961004%20Euro).png",
          "description": "X-Men vs. Street Fighter is a crossover fighting video game developed and published by Capcom. It is Capcom's third fighting game to feature Marvel Comics characters, following X-Men: Children of the Atom and Marvel Super Heroes, and is the first installment in the Marvel vs. Capcom series. As the title suggests, the game includes characters from Marvel's X-Men franchise and the cast from Capcom's Street Fighter series. Originally released as a coin-operated arcade game in 1996, it was ported to the Sega Saturn in 1997 and the PlayStation in 1998.\n\nX-Men vs. Street Fighter features gameplay similar to Street Fighter, but incorporates dual-character selection and tag team-based combat. Each player selects two characters to compete in a one-on-one battle, attempting to defeat the opposing team. The players are given the ability to switch between their characters at any point during the match. The game also incorporates numerous elements from X-Men: Children of the Atom and Marvel Super Heroes.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/xmvsf.zip"
          },
          "added": 1712676274664
        },
        {
          "type": "arcade",
          "title": "Xevious",
          "longTitle": "Xevious",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Snaps/output/Xevious%20(Namco).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-fbneo-images/master/Named_Titles/resized/Xevious%20(Namco).png",
          "description": "Xevious is a vertically scrolling shooter developed by Namco and released in arcades in 1982. It was published in Japan and Europe by Namco and in North America by Atari, Inc. Controlling the Solvalou starship, the player attacks Xevious forces before they destroy all of mankind. The Solvalou has two weapons at its disposal: a zapper to destroy flying craft, and a blaster to bomb ground installations and enemies. It runs on the Namco Galaga arcade system.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/xevious.zip",
            "samples": "https://archive.org/download/fbneo/FBNeo/support.zip/support%2Fsamples%2Fxevious.zip"
          },
          "added": 1651337367097
        }
      ]
    },
    {
      "title": "NES",
      "items": [
        {
          "title": "Adventure Island",
          "longTitle": "Adventure Island",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Adventure%20Island%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Adventure%20Island%20(USA).png",
          "description": "You just found out that Princess Leilani was kidnapped by the Evil Witch Doctor and taken to Adventure Island in the South Pacific.\n\nYou land on Adventure Island without weapons or food. The island is thick with tropical forest, mountains and caves. Hidden on the island are your skateboard, axe, food and other helpful tools you must find by exploring the island.\n\nBetter find the weapons and food quickly because you will need them to fight the Witch Doctor's spiders, snakes, bats and demons. The Evil Witch Doctor has set lots of traps for you before you can face him one on one. Are you up for the challenge?! Can you live through Adventure Island to save Princess Leilani?!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Adventure%20Island%20%28USA%29.zip"
          },
          "added": 1650729045714
        },
        {
          "title": "Adventure Island II",
          "longTitle": "Adventure Island II",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Adventure%20Island%20II%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Adventure%20Island%20II%20(USA).png",
          "description": "Soar into action with Adventure Island II. That Evil Witch Doctor's just snatched your favorite lady. And you've got to battle your way past EIGHT treacherous islands to get her back.\nCombat prehistoric monsters -- some of the creepiest, fire-spitting critters ever to slither across a video screen! Survive molten volcanoes. Dodge giant scorpions and king cobras. And the action gets even crazier with a new vertical/horizontal scroll, while stage select lets you control play.\nSo sharpen your axe, slip on a leopard skin, and take off for ADVENTURE ISLAND II. It's gonna be a wild ride!!!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Adventure%20Island%20II%20%28USA%29.zip"
          },
          "added": 1650729060574
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Family%20Computer%20Disk%20System%20(FDS)/All%20Night%20Nippon%20Super%20Mario%20Bros.%20%28Japan%29%20%28Promo%29.zip"
          },
          "type": "retro-fceumm",
          "title": "All Night Nippon Super Mario Bros.",
          "added": 1730559707391,
          "background": "https://media.retroachievements.org/Images/017521.png",
          "backgroundPixelated": true,
          "longTitle": "All Night Nippon Super Mario Bros.",
          "thumbnail": "https://tcrf.net/images/6/60/ANNSMB-Title.png",
          "description": "All Night Nippon Super Mario Bros. is a promotional version of Super Mario Bros. designed as a tie-in with the Japanese radio show All Night Nippon, sold through a lottery system on the show as part of a contest to celebrate the show's then-upcoming 20th Anniversary.\n\nThe game is based off of Super Mario Bros.: The Lost Levels and uses a handful of the levels from that game, with the rest coming from Super Mario Bros. (using the item locations of their VS. Super Mario Bros. iterations). Some of the graphics have been altered to reference different aspects of All Night Nippon, including the Mushroom Retainers and some enemies being replaced with the program's hosts.\n\nANNSMB has never been rereleased (likely owing to rights issues, as Fuji TV owns All Night Nippon and the hosts' likenesses would also need to be cleared) and just 3,040 copies were released, making it a rare collector's item."
        },
        {
          "title": "Balloon Fight",
          "longTitle": "Balloon Fight",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Balloon%20Fight%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Balloon%20Fight%20(USA).png",
          "description": "The player controls the unnamed Balloon Fighter with two balloons attached to his back. Repeatedly pressing the A or B buttons causes the Balloon Fighter to flap his arms and rise into the air. If a balloon is popped, the player's flotation is decreased, making it harder to rise. A life is lost if both balloons are popped by enemy Balloon Fighters, if the player falls in the water, gets eaten by the large fish near the surface of the water, or is hit by lightning.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Balloon%20Fight%20%28USA%29.zip"
          },
          "added": 1650729067551
        },
        {
          "title": "Battletoads",
          "longTitle": "Battletoads",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Battletoads%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Battletoads%20(USA).png",
          "description": "After her defeat by the Galactic Corporation at the battle of Canis Major, the evil Dark Queen and her renegade space troops retreat to the outer reaches of the universe, hiding out in dark spaces between the stars. Meanwhile, on board the spaceship Vulture, Professor T. Bird and the trio of Battletoads - Rash, Zitz and Pimple - are escorting the Princess Angelica back to her home planet, where her father, the Terran Emperor, awaits her safe arrival. Along the way, Pimple, the biggest Battletoad, takes Angelica out for a cruise in the Toadster to a nearby Leisure Station, but the Dark Queen ambushes them before they can get there, and they are kidnapped and carried away to Ragnarok's World, the Dark Queen's planet. Professor Bird sends remaining Battletoads down on Ragnarok to save Pimple and Angelica, but it will be a hard battle against planet's dangerous environments, traps and Dark Queen's troops. They have to go a long way from the planet's rough surface to deep caves and landed Gargantua and ultimately to the Tower of Shadows, where the Dark Queen awaits.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Battletoads%20%28USA%29.zip"
          },
          "added": 1650729075606
        },
        {
          "title": "Blades of Steel",
          "longTitle": "Blades of Steel",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Blades%20of%20Steel%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Blades%20of%20Steel%20(USA).png",
          "description": "At the beginning of the game, players can select either \"Exhibition\" or \"Tournament\" matches. An exhibition match is just one game played against either the computer or another player. Tournament matches are similar to the NHL playoffs. It starts out as one team of the player's choice going against other teams in a playoff style tournament. The team that is successful in beating all of the opposing teams is awarded the Konami Cup.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Blades%20of%20Steel%20%28USA%29.zip"
          },
          "added": 1650729081932
        },
        {
          "title": "Bonk's Adventure",
          "longTitle": "Bonk's Adventure",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Bonk's%20Adventure%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Bonk's%20Adventure%20(USA).png",
          "description": "The game's protagonist is Bonk, a strong caveboy who battles anthropomorphic dinosaurs and other prehistoric themed enemies.  Bonk's mission is to rescue Princess Za (a small pink Pleisiosaur-type reptile) who has been kidnapped by the evil King Drool (a large, green Tyrannosaurus-type dinosaur).  In the Arcade version, Bonk is also assisted by a female version of himself.  Bonk attacks enemies by \"bonking\" them with his large, invincible forehead.  Bonk starts the game with three hearts' worth of health, which are depleted to blue as Bonk takes damage and three extra lives.  Bonk's health can be restored in increments by collecting fruits and vegetables.  Bonk can also collect pieces of meat as power-ups; these lend him special abilities and make him stronger.  There are three stages of power-up: his normal self, a second stage during which he can stun enemies by pounding on the ground and a third stage where he becomes temporarily invulnerable.  Meat can be found in two varieties: big meat and small meat.  The effects of meat are additive but wear off over time.  A small meat gives Bonk the second stage of meat power but will eventually decay into the first stage of meat power, and then back into regular Bonk.  Eating a small meat while in stage two will put Bonk into the third, invincible stage of meat power.  And eating either size of meat while in the third stage of meat power-up will reset the timer on Bonk's meat power.  Bonk can occasionally collect red heart power-ups that refill an entire heart worth of health, or even more rarely, a large red heart which restores all of Bonk's missing health.  There are also two rare, blue heart power-ups in the game which will increase Bonk's maximum health by one heart.  Bonking an enemy will typically knock it backward and slightly into the air.  Defeating an enemy yields points and also releases a small \"smiley\" power-up.  Bonk's smileys are totaled at the end of each stage after defeating the boss of that stage.  The player is given additional points and a caveman type congratulation based on how many smileys were collected.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Bonk%27s%20Adventure%20%28USA%29.zip"
          },
          "added": 1650729220601
        },
        {
          "title": "Castlevania",
          "longTitle": "Castlevania",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Castlevania%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Castlevania%20(USA).png",
          "description": "If you think it's scary on the outside, wait'll you see the basement! You're in for the longest night of your life. Ghosts, goblins, demons, wolves, bats - creatures lurking around every corner. As you descend deeper and deeper, they get thicker and thicker. Better stick close to the cavern floor - it's your only chance of finding a weapon or two. You're gonna need 'em. Because when you finally meet the Count, you know he'll be going for the jugular. So keep your courage up and your stake sharp. And say your prayers!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Castlevania%20%28USA%29.zip"
          },
          "added": 1650729234835
        },
        {
          "title": "Castlevania II - Simon's Quest",
          "longTitle": "Castlevania II - Simon's Quest",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Castlevania%20II%20-%20Simon's%20Quest%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Castlevania%20II%20-%20Simon's%20Quest%20(USA).png",
          "description": "Castlevania was a cakewalk compared to this bloody curse. You thought you had the Prince of Darkness defanged - eh, Simon Belmont? Well think again, 'cause according to a damsel in distress, evil Count Dracula has left a horrifying curse in his wake. And the only hope you have of ending the terror is to destroy his missing body parts! Talk about your frightening quest, searching a maze of mansions, graveyards and dark, eerie forests - each guarded by man-eating werewolves, fire-throwing zombies and other devilish demons. Your grim chances are kept alive in Transylvania, where cowardly villagers offer clues to the whereabouts of Dracula's remains. And where you'll purchase magic weapons, including silver knives and flame whips. But beware the night. For when the sun disappears, Dracula's curse grows deadlier. And your chances grow dimmer and dimmer.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Castlevania%20II%20-%20Simon%27s%20Quest%20%28USA%29.zip"
          },
          "added": 1650729236466
        },
        {
          "title": "Castlevania III - Dracula's Curse",
          "longTitle": "Castlevania III - Dracula's Curse",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Castlevania%20III%20-%20Dracula's%20Curse%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Castlevania%20III%20-%20Dracula's%20Curse%20(USA).png",
          "description": "Castlevania III abandons the adventure game elements of its immediate predecessor and returns to the platform game roots of the first Castlevania title. Unlike Castlevania, however, Castlevania III is not strictly linear: Trevor, the main character, can be assisted by one of three possible assistant characters, and after completing the first level, and at several other points throughout the game, the player is given a choice of paths to follow. The choices made by the player in these circumstances can have a profound impact on how the game unfolds. There are 15 stages in total.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Castlevania%20III%20-%20Dracula%27s%20Curse%20%28USA%29.zip"
          },
          "added": 1650729238913
        },
        {
          "title": "Chip 'n Dale - Rescue Rangers",
          "longTitle": "Chip 'n Dale - Rescue Rangers",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Chip%20'n%20Dale%20-%20Rescue%20Rangers%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Chip%20'n%20Dale%20-%20Rescue%20Rangers%20(USA).png",
          "description": "Chip and Dale, those pint-sized but courageous Disney detectives, have received another desperate call for help: The evil Fat Cat has kidnapped Gadget... his sinister goal - to take over the city!! Join the Rescue Rangers on their exciting search through the darkest depths of slimy sewers to the electrifying heights of live telephone wires! Play alone or with a friend to locate Fat Cat's headquarters and thwart his diabolical scheme! Fat Cat's Bad Guys: Can you escape them or do you stand and fight? Deadly Attacking Killer Bees: Can you out run them or do you let them bite? Rabid Robot Rats and Mechanical Dogs: Are you saved from their savage jaws or do you bite them back?",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Chip%20%27n%20Dale%20-%20Rescue%20Rangers%20%28USA%29.zip"
          },
          "added": 1650729244891
        },
        {
          "title": "City Connection",
          "longTitle": "City Connection",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/City%20Connection%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/City%20Connection%20(USA).png",
          "description": "The main character in the game is a female driver, Clarice, of a Honda City (the North American version features a male driver) on a tour of all the sights and roads across the world. To prove that she has visited a particular location, she must drive around the location painting every section of the road white. However, the police, who have no tolerance for vandalism, attempt to stop the driver from completing her goal. The player's car can jump and fire cans of oil. To avoid forcing the player from retracing the same roads again, the roads change color when the car drives over them, indicating that that specific road has been painted. There are three main obstacles: police, cats and spikes. The police chase after the car and if a police car comes into contact with the main character's car, the car \"explodes\" by turning into a group of hearts and the player loses a life. To combat this, the player can obtain cans of oil, which can be used to cause the police cars to spin out of control, allowing the player to bump them off the screen. Other enemies include a cat, which, when hit, causes the player to lose an extra life as the cat goes diagonally off the screen (but does not cause the car to \"explode\") with playing of a comical music, \"Der Flohwalzer\", known as \"Neko Funjatta\" (I Stepped on the Cat) in Japan. There is also spikes, which make the car \"explode\" on contact. Occasionally, a balloon may float by during any given stage. If the car touches one of these balloons, it collects it and collecting three such balloons will activate a warp that sends the car multiple stages ahead and provides significant bonus points. Although the city you travel to will change, the difficulty pattern of the road will remain the same. As the number of cities you travel to loop endlessly, the game is not shortened by taking a warp. One particular thing about this game is the \"catchy\" tune that plays in the background as you enter a new city. Although it uses \"ethnic\" variations according to the destination, it's an adaptation of a famous classic piece, \"Allegro non troppo e molto maestoso\", from Tchaikovsky's Piano Concerto No.1.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/City%20Connection%20%28USA%29.zip"
          },
          "added": 1650729250184
        },
        {
          "title": "Contra",
          "longTitle": "Contra",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Contra%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Contra%20(USA).png",
          "description": "The universe teeters on the brink of total annihilation at the hands of the vile alien warmonger, Red Falcon. Earth's only hope rests with you, a courageous member of the Special Forces elite commando squad. Your mission: Battle deep into the deadly Amazon jungle, where the Red Falcon and his galactic henchmen have transformed ancient Mayan temples into awesome monuments dedicated to mass destruction. A multitude of weapons, from rapid-fire machine guns to high-tech lasers are at your disposal as you sweat blood, fighting past 3-D mazes, underground security systems, and tropical forests surrounded by giant waterfalls and alien cannons. This is the ultimate test for the ultimate guerilla warrior. And if you survive, Earth survives!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Contra%20%28USA%29.zip"
          },
          "added": 1650729255347
        },
        {
          "title": "Dr. Mario",
          "longTitle": "Dr. Mario",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Dr.%20Mario%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Dr.%20Mario%20(Japan%2C%20USA).png",
          "description": "A puzzle game similar to Tetris, Dr. Mario features Nintendo mascot Mario as a doctor. Gameplay consists of dropping two-sided vitamin capsules into a playing field 8 blocks wide by 16 blocks high resembling a medicine bottle, populated by viruses of three colors",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Dr.%20Mario%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1650729265423
        },
        {
          "title": "Dragon Warrior",
          "longTitle": "Dragon Warrior",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Dragon%20Warrior%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Dragon%20Warrior%20(USA).png",
          "description": "Dragon Warrior uses console role-playing game mechanics which were described by Kurt Kalata of Gamasutra as archaic in 2008. The player takes the role of a namable Hero. The Hero's name has an effect on his statistical growth over the course of the game. Battles are fought in a turn-based format and experience points and gold are awarded after every battle, allowing the Hero to level-up in ability and allows them to buy better weapons, armor, and items. Progression consists of traveling over an overworld map and through dungeons, fighting monsters encountered via random battles along the journey.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Dragon%20Warrior%20%28USA%29.zip"
          },
          "added": 1650729274015
        },
        {
          "title": "Dragon Warrior II",
          "longTitle": "Dragon Warrior II",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Dragon%20Warrior%20II%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Dragon%20Warrior%20II%20(USA).png",
          "description": "This game allows the player to control more than one character, and it is the first one in the Dragon Quest series to do so. The player controls his or her characters as they move in the game world. They can search treasure chests, talk and trade with villagers, equip weapons and armor, and cast spells.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Dragon%20Warrior%20II%20%28USA%29.zip"
          },
          "added": 1712678446232
        },
        {
          "title": "Dragon Warrior III",
          "longTitle": "Dragon Warrior III",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Dragon%20Warrior%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Dragon%20Warrior%20III%20(USA).png",
          "description": "Dragon Warrior III is noted for greatly expanding upon the original Dragon Warrior and Dragon Warrior II. The game uses basic console role-playing game conventions, such as leveling up by gaining experience points and equipping items. Battle is turn-based like the other games in the series.\nDragon Warrior III features a class system, in which each character has a certain class. While the Hero always keeps the Hero class, the other characters can choose among the following: Soldier (Warrior in the GBC version), Fighter, Pilgrim (Cleric), Wizard (Mage), Merchant (Dealer), Goof-Off (Jester), Sage, and Thief which was available only in the later versions. The choice of class greatly affects the character's stats and spells he or she can learn. Furthermore, upon reaching experience Level 20, a character has the option of changing classes at the temple of Dhama, found halfway through the game. The game starts with just the Hero in the party, who then is able to recruit a party of three at the local tavern. Unlike most Dragon Quest parties, aside from the Hero, the party is not made up of characters involved in the story. Although only four characters can be in the party at a time, extra members of the party can be kept at the tavern, allowing room for new recruits. Another innovation is an arena where the player can place bets on the outcome of monster battles.\nThe remakes incorporated some interface changes from later games in the series, such as simplified door opening; the bag, which replaced bank item storage; the item sorting \"Tidy Item\" and \"Tidy Bag\" commands; and the \"Full HP\" command, which can be used outside of combat to automate the process of casting healing and status restoring spells.\nWhile the earlier Dragon Quest games were also non-linear, Dragon Quest III was the most substantial example of open-world gameplay among the early Dragon Quest games. It also allowed the player to swap characters in and out of the party at will, and another \"major innovation was the introduction of day/night cycles; certain items, characters, and quests are only accessible at certain times of day.\"",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Dragon%20Warrior%20III%20%28USA%29.zip"
          },
          "added": 1712678446233
        },
        {
          "title": "Dragon Warrior IV",
          "longTitle": "Dragon Warrior IV",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Dragon%20Warrior%20IV%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Dragon%20Warrior%20IV%20(USA).png",
          "description": "Dragon Quest IV differs from the rest of the series by breaking up the game into five distinct chapters, each of which focuses on a different protagonist or protagonists. The first four are told from the perspective of the Hero's future companions and the fifth one, from the hero's perspective, brings all the characters together as they begin their journey to save the world.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Dragon%20Warrior%20IV%20%28USA%29.zip"
          },
          "added": 1650729276745
        },
        {
          "title": "DuckTales",
          "longTitle": "DuckTales",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/DuckTales%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/DuckTales%20(USA).png",
          "description": "The player controls Scrooge McDuck throughout the entire game, searching for treasures to become the world's richest duck. Scrooge can jump using the A button; his cane is used as a weapon to defeat enemies or strike objects and as a pogo stick to jump higher. There is a wide variety of helpful non-player characters and enemy characters.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/DuckTales%20%28USA%29.zip"
          },
          "added": 1650729289670
        },
        {
          "title": "EarthBound Beginnings",
          "longTitle": "EarthBound Beginnings",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/EarthBound%20Beginnings%20(USA%2C%20Europe)%20(Virtual%20Console).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/EarthBound%20Beginnings%20(USA%2C%20Europe)%20(Virtual%20Console).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/EarthBound%20Beginnings%20%28USA%2C%20Europe%29%20%28Virtual%20Console%29.zip"
          },
          "added": 1650729658007,
          "description": "EarthBound Beginnings is the first installment in the Mother series. It was developed by Ape Inc., Nintendo Tokyo R&D Products, and Pax Softnica, and was published by Nintendo for the Famicom on July 27, 1989.\n\nIn 1990, EarthBound Beginnings was fully translated by Nintendo of America and slated for a 1991 release outside of Japan as \"EARTH BOUND\".\n\nHowever, due to marketing issues, financial issues, and the approaching release of the SNES, the game was not released in other territories. It took many more years for the game to be released overseas.\n\nOn June 14, 2015, 25 years after being released in Japan, EarthBound Beginnings was released in North America and Europe for the first time on the Wii U Virtual Console. It was later announced via Nintendo Direct on February 9, 2022, that EarthBound Beginnings would be released on the Nintendo Entertainment System app produced by Nintendo Switch Online."
        },
        {
          "title": "Excitebike",
          "longTitle": "Excitebike",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Excitebike%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Excitebike%20(Japan%2C%20USA).png",
          "description": "Whether the player chooses to race solo or against computer-assisted riders, he/she races against a certain time limit. The goal is to qualify for the Excitebike (the championship) race by coming in at third place or above in the challenge race (preliminary race). The times to beat are located on the stadium walls (for first place) and in the lower left corner (for third place). In any race, the best time is 8 seconds ahead of third place. When the player places first, then they get a message: \"It's a new record!\" Additional points are earned by beating the previously-set record time.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Excitebike%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1650729308507
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Family%20Computer%20Disk%20System%20(FDS)/Famicom%20Grand%20Prix%20II%20-%203D%20Hot%20Rally%20%28Japan%29%20%28DV%205%29%20%28Famicom%203D%20System%29.zip"
          },
          "type": "retro-fceumm",
          "title": "Famicom Grand Prix II: 3D Hot Rally",
          "added": 1730559745281,
          "longTitle": "Famicom Grand Prix II: 3D Hot Rally",
          "background": "https://lh3.googleusercontent.com/proxy/gRogVpFFlbdmNLQWlNo2eYdZwAWID5msWE1Eia8gNmduX2bxM_92-UOdlw3QB8QXj6TXW60sETqfaHhqHX_9gTM780UvEw",
          "backgroundPixelated": true,
          "thumbnail": "https://cdn.mobygames.com/screenshots/16399841-famicom-grand-prix-ii-3d-hot-rally-nes-title-screen-featuring-de.png",
          "description": "Famicom Grand Prix II: 3D Hot Rally is a racing video game released in Japan for the Family Computer Disk System. It is the sequel to Famicom Grand Prix: F1 Race, although the two games are very different. Like its predecessor, it too was subject of a tournament, which was held from April 14 to May 31, 1988. The top 100 players of each class of car received a trophy in the form of a gold car of their class encased in quartz crystal with their name and rank on the base. Thus, there are 300 such trophies. They, along with thousands of runners-up and raffle winners, received a \"Pretty Mini,\" which is a yellow stationery set in the form of Diskun, the FDS mascot. It is similar to a white stationery set that was sold in stores. They also received mock driver's licenses. The game supports the Famicom 3D System, allowing the player to see the screen in three-dimensions by wearing a specialized set of goggles. The game's name makes note of said capabilities."
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Family%20Computer%20Disk%20System%20(FDS)/Famicom%20Grand%20Prix%20-%20F1%20Race%20%28Japan%29.zip"
          },
          "type": "retro-fceumm",
          "title": "Famicom Grand Prix: F1 Race",
          "added": 1730559483678,
          "thumbnail": "https://i.kinja-img.com/image/upload/c_fit,q_60,w_645/5917bbf2c28bb78a6e96bb68219a2020.jpg",
          "background": "https://lh3.googleusercontent.com/proxy/LvSDrzevkkQsTlwKMMAXGyjk0ZRtCmZLN4gxx5sJG7cn5tlBhXDGctNRKlOGaeDvbYX5FY2zsrbxbVHHzHYTQRsIbqKYIh-Ya3qQDd3F68E-s8yKmos",
          "backgroundPixelated": true,
          "longTitle": "Famicom Grand Prix: F1 Race",
          "description": "Famicom Grand Prix: F1 Race is a Japanese Famicom Disk System video game released in 1987. The game is a racing title that was planned to be released in America, though was later canceled. The game features Mario on the cover though he doesn't play a role in the actual game. In the game players would race Formula 1 cars in hopes of coming in first place. The more the player progressed, the more challenging the game would become. This game was possibly an ancestor to the Mario Kart series, most likely due to the fact it features Mario and possesses similar 2D racing mechanics, which was later carried on to Super Mario Kart. A sequel was released, known as Famicom Grand Prix II: 3D Hot Rally, and it was very different from F-1 Race."
        },
        {
          "title": "Final Fantasy",
          "longTitle": "Final Fantasy",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Final%20Fantasy%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Final%20Fantasy%20(USA).png",
          "description": "An evil shroud covers the world in darkness. You must restore the powers of earth, wind, fire and water to the Four Orbs. Create your own band of 4 Light Warriors from fighters, thieves, martial artists, and magicians. You'll need all their skills to triumph in this massive role-playing adventure. Your treaterous journey takes you to all parts of a strange new world. Explore dangerous castles and dark caverns where dadly perils and great rewards, await at every turn. Hundreds of ferocious monsters block your path. With patience, skill, and cunning, you can defeat them.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Final%20Fantasy%20%28USA%29.zip"
          },
          "added": 1650729317561
        },
        {
          "title": "Gargoyle's Quest II",
          "longTitle": "Gargoyle's Quest II",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Gargoyle's%20Quest%20II%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Gargoyle's%20Quest%20II%20(USA).png",
          "description": "Firebrand is a young warrior in training in his hometown of Etruria. One day, while Firebrand is training in a small, alternate dimension, the Black light suddenly appears and destroys his home. When he returns successfully from his training, he is told to hurry to the King by another ghoul just before it dies. Upon defeating Nagus, Firebrand is able to meet with King Morock, who informs Firebrand he is on the brink of death. Before dying, he gives Firebrand the Spectre's Fingernail and Firebrand sets off on a journey to unravel the mystery of the Black light.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Gargoyle%27s%20Quest%20II%20%28USA%29.zip"
          },
          "added": 1650729324676
        },
        {
          "title": "Ice Climber",
          "longTitle": "Ice Climber",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Ice%20Climber%20(USA%2C%20Europe%2C%20Korea).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Ice%20Climber%20(USA%2C%20Europe%2C%20Korea).png",
          "description": "The first player controls Popo, a boy wearing a blue Eskimo parka, while the second player controls Nana, a girl wearing a pink Eskimo parka. The only tool they carry is a wooden mallet to carve openings in the ice above and to club enemies. Each mountain level consists of eight layers of colorful ice and a bonus stage. Standard, dull ice blocks pose no threat other than an easily disposed of barrier and platform. Square ice blocks with higher detail are indestructible forcing the player to take another path",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Ice%20Climber%20%28USA%2C%20Europe%2C%20Korea%29%20%28En%29.zip"
          },
          "added": 1650729328546
        },
        {
          "title": "Ikari Warriors",
          "longTitle": "Ikari Warriors",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Ikari%20Warriors%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Ikari%20Warriors%20(USA).png",
          "description": "The player takes the role of commando-like warriors named Ralf and Clark, who must try to reach the village of Ikari. Enemy units attempting to kill the player include tanks, enemy soldiers and helicopters. A number of power-ups along the way help the player to achieve victory.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Ikari%20Warriors%20%28USA%29.zip"
          },
          "added": 1650729336545
        },
        {
          "title": "Kid Icarus",
          "longTitle": "Kid Icarus",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Kid%20Icarus%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Kid%20Icarus%20(USA%2C%20Europe).png",
          "description": "Kid Icarus is a platforming video game in which the player controls Pit in sprite-rendered two-dimensional landscapes. Pit starts the game with a bow and arrows as his only weapon, and with only the ability to jump. The player explores more areas and collects power-ups that grant Pit special abilities and enhance his armor and weaponry. The gameplay incorporates elements of action and adventure games.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Kid%20Icarus%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650729342887
        },
        {
          "title": "Kirby's Adventure",
          "longTitle": "Kirby's Adventure",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Kirby's%20Adventure%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Kirby's%20Adventure%20(USA).png",
          "description": "Kirby's Adventure is a platformer. The game consists of seven worlds, each containing a set of regular levels, a boss fight, and a Warp Star door (which enables Kirby to travel from world to world). Most worlds also contain mini-games (which allow Kirby to gain extra lives), museums (which allow Kirby to gain certain powers), and/or Arenas (where Kirby must battle with a mini-boss to win health items and allow him to copy the boss' special ability afterwards). The game was the first in the series to include a save feature. It automatically saves the player's progress after each level.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Kirby%27s%20Adventure%20%28USA%29.zip"
          },
          "added": 1650729355765
        },
        {
          "title": "Kung Fu",
          "longTitle": "Kung Fu",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Kung%20Fu%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Kung%20Fu%20(Japan%2C%20USA).png",
          "description": "You'll need lightning fast reactions to knock out the Knife Thrower, stop the Stick Fighter, and trip up the evil Tom Tom Brothers in this action-packed martial arts contest! Are you sure you're tough enough? Because it'll take all your strength and skill to master the moves in KUNG FU, beat your opponents, and rescue the fair Sylvia who's held captive on the top floor! The action is non-stop, and just when you think you've got your enemies licked there's always a Giant, a Snake, or a fire-breathing Dragon to contend with in KUNG FU!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Kung%20Fu%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1650729357633
        },
        {
          "title": "Little Samson",
          "longTitle": "Little Samson",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Little%20Samson%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Little%20Samson%20(USA).png",
          "description": "The Imperial Forgy has been invaded by Ta-Keed the Prince of Darkness! Only the owners of the Magic Bells can stop his forces from destroying the realm. Led by the mountaineering youth, Samson, a force of unlikely heroes sets out to banish evil forever! Become a fire-breathing dragon, a living statue of solid stone or a nimble and crafty mouse. Soar the skies and belch fire balls as Kikira the Dragon Lord! Crush enemy troops with fists of granite as Gamm the Rock Lord! Scurry past dangerous monsters while setting time bombs as K.O. the mouse! These creatures join Little Samson to form a unique and powerful alliance as the last hope for the Imperial Forgy!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Little%20Samson%20%28USA%29.zip"
          },
          "added": 1650729373579
        },
        {
          "title": "Mach Rider",
          "longTitle": "Mach Rider",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Mach%20Rider%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Mach%20Rider%20(Japan%2C%20USA).png",
          "description": "Grip the handles of your futuristic motorcycle. Feel the freezing wind crack against your cheeks. Suddenly you're off! Riding at speeds up to 500 miles per hour in a desperate attempt to save the planet. You'll love every hair pin curve because you've created this daredevil course yourself. Along the way you'll be challenged by an endless array of ruthless villains who will do everything in their power to destroy you and your planet. You'll defend yourself with a specially mounted Power Blaster. But watch out! The action is fast. The danger is imminent. Design your own course or ride one of ours, in this lightning fast Nintendo Programmable game!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Mach%20Rider%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1650729378504
        },
        {
          "title": "Mega Man",
          "longTitle": "Mega Man",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Mega%20Man%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Mega%20Man%20(USA).png",
          "description": "Mega Man entails the events after the co-creation of the humanoid robot named Mega Man by the genius Dr. Wright (named Dr. Light in later titles) and his assistant Dr. Wily. The two scientists also create six other advanced robots: Cut Man, Elec Man, Ice Man, Fire Man, Bomb Man and Guts Man. Each of these robots is designed to perform industrial tasks involving construction, demolition, logging, electrical operations, or labor in extreme temperatures, all for the benefit of mankind in a location known as \"Monsteropolis\". However, Dr. Wily grows disloyal of his partner and reprograms these six robots to aid himself in taking control of the world. Dr. Wright sends Mega Man to defeat his fellow creations and put a stop to Dr. Wily. After succeeding, Mega Man returns home to his robot sister Roll and their creator Dr. Wright.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Mega%20Man%20%28USA%29.zip"
          },
          "added": 1712678446233
        },
        {
          "title": "Mega Man 2",
          "longTitle": "Mega Man 2",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Mega%20Man%202%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Mega%20Man%202%20(USA).png",
          "description": "Mega Man 2 takes place after the original Mega Man, which is set in an unspecified year during the 21st century (the year 200X). Dr. Wily, the series' main antagonist, builds a new fortress and army of robotic henchmen, led by eight new Robot Masters of his design. Mega Man is sent by his creator, Dr. Light, to defeat Dr. Wily and his Robot Masters. Mega Man crushes the eight new Robot Masters and then challenges Wily himself. In the final fight, Mega Man defeats Dr. Wily's holographic projection device. After the scientist begs for mercy, Mega Man spares Wily and returns home.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Mega%20Man%202%20%28USA%29.zip"
          },
          "added": 1650729384566
        },
        {
          "title": "Mega Man 3",
          "longTitle": "Mega Man 3",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Mega%20Man%203%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Mega%20Man%203%20(USA).png",
          "description": "In the year 200X Dr. Wily claims to have reformed and works with Dr. Light on a project to build a peace-keeping robot named \"Gamma.\" However, the Robot Masters set in charge of the \"mining worlds\" go berserk and make off with the eight power crystals. Mega Man is called into action, this time with a canine companion named Rush, to retrieve the crystals from the mining worlds. After the crystals are retrieved, Wily steals Gamma and retreats to his new fortress. In order to stop Wily's plan for world domination, Mega Man destroys Gamma. After their final confrontation, Wily's fortress begins to crumble. Proto Man appears in enough time to save Mega Man, but too late to save Wily, who is crushed under the rubble.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Mega%20Man%203%20%28USA%29.zip"
          },
          "added": 1712678446233
        },
        {
          "title": "Mega Man 4",
          "longTitle": "Mega Man 4",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Mega%20Man%204%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Mega%20Man%204%20(USA).png",
          "description": "Mega Man 4 takes place in the year 20XX (the 21st century). One year after the events of the Gamma Project and Dr. Wily's overtaking of it and his supposed demise, Dr. Light receives a letter from a mysterious Russian scientist named Dr. Cossack claiming that he is the superior robot engineer in all the world. Cossack states further that he will unleash his army of robots upon the world as a \"test\" for Light to see which of them is the best. Light calls upon Mega Man from his search for Wily to go after Cossack's Robot Masters.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Mega%20Man%204%20%28USA%29.zip"
          },
          "added": 1650729391629
        },
        {
          "title": "Mega Man 5",
          "longTitle": "Mega Man 5",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Mega%20Man%205%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Mega%20Man%205%20(USA).png",
          "description": "The fictional storyline of Mega Man 5 takes place during the 21st century (the year 20XX). Proto Man, once an ally to the world's greatest hero, leads an army of robots in a series of destructive attacks on the world. To cripple the world's defenders, he kidnaps his own creator, the genius scientist Dr. Light. Mega Man wonders why his brother is doing this, but with little choice left, he sets out to stop him. After prevailing over a new group of eight Robot Masters, Star Man, Gravity Man, Gyro Man, Stone Man, Crystal Man, Charge Man, Napalm Man and Wave Man. Mega Man makes his way to Proto Man's castle and confronts his fellow creation, who nearly kills the protagonist in the process. However, the real Proto Man arrives in the nick of time to reveal the fake as Dark Man, one of Dr. Wily's newest robots. Mega Man vanquishes the imposter, then pursues his archenemy to his newest hideout, defeats him, and saves Dr. Light. Wily manages yet another retreat.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Mega%20Man%205%20%28USA%29.zip"
          },
          "added": 1712678446233
        },
        {
          "title": "Mega Man 6",
          "longTitle": "Mega Man 6",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Mega%20Man%206%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Mega%20Man%206%20(USA).png",
          "description": "The premise of Mega Man 6 takes place after the events of Mega Man 5. The first annual \"Robot Masters Tournament\" is held in order to test the designing capabilities of the world's greatest robotics engineers. The tournament is hosted by a man known only as \"Mr. X\". Dr. Light, a pacifist, decides not to enter the tournament, but sends Mega Man to supervise the event. Many strong Robot Masters participate. Near the end of the tournament, Mr. X announces that he has reprogrammed the eight finalist robots to do his bidding in taking over the world. Dr. Light immediately orders Mega Man to put an end to the madness. Mega Man defeats the Robot Masters, Blizzard Man, Wind Man, Flame Man, Plant Man, Tomahawk Man, Yamato Man, Knight Man and Centaur Man, makes his way to Mr. X's fortress. Mr. X is defeated and quickly removes his disguise, revealing himself as none other than Dr. Wily. The evil scientist flees to a new fortress stronghold where Mega Man pursues and defeats him again. After years of fighting the robotic hero, Dr. Wily is finally brought to justice and sent to prison.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Mega%20Man%206%20%28USA%29.zip"
          },
          "added": 1650729395624
        },
        {
          "title": "Metal Gear",
          "longTitle": "Metal Gear",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Metal%20Gear%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Metal%20Gear%20(USA).png",
          "description": "The player must navigate the main character, a military operative codenamed Solid Snake, through various locations, while avoiding visual contact and direct confrontation with patrolling guards. If the player is seen, the game enters the \"Alert Mode.\" In this situation, Snake must escape from enemy's sight in order to resume infiltration.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Metal%20Gear%20%28USA%29.zip"
          },
          "added": 1650729398582
        },
        {
          "title": "Metroid",
          "longTitle": "Metroid",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Metroid%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Metroid%20(USA).png",
          "description": "You're inside the fortress planet Zebes.  The planet of endless secret passageways where the Metroid are multiplying.  Left alone the Metroid are harmless.  But in the wrong hands they could destroy the galaxy.  It's up to you to prevent the Mother Brain that controls Zebes from using the Metroid for evil purposes.  But that won't be easy.  You'll have to use your spacesuit to absorb valuable energy for your search to gain the use of power items like the Ice Beam, Wave Beam, High Jump Boots and Varia.  If you survive, it will be you and your acquired powers against the Mother Brain.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Metroid%20%28USA%29.zip"
          },
          "added": 1650729403749
        },
        {
          "title": "Mike Tyson's Punch-Out!!",
          "longTitle": "Mike Tyson's Punch-Out!!",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Mike%20Tyson's%20Punch-Out!!%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Mike%20Tyson's%20Punch-Out!!%20(Japan%2C%20USA).png",
          "description": "It's a right jab, a left hook, an uppercut - it's Mike Tyson's Punch-Out!! where you'll get the chance to compete against boxers from around the globe. Punch your way through 13 bouts in the minor, major and world circuits against tough contestants like Piston Honda, Glass Joe, Super Macho Man and many, many more! Defeat all your opponents and meet the ultimate challenge against the World Heavyweight Champion Mike Tyson in the greatest fight of all - The Dream Bout! Knockout Tyson and you can become WVBA (World Video Boxing Association) Champ!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Mike%20Tyson%27s%20Punch-Out%21%21%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1650729413626
        },
        {
          "title": "NES Open Tournament Golf",
          "longTitle": "NES Open Tournament Golf",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/NES%20Open%20Tournament%20Golf%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/NES%20Open%20Tournament%20Golf%20(USA).png",
          "description": "In NES Open Tournament Golf, you can play a round of golf on one of three different courses. One or two players can play in the U.S., Japan, or the U.K. and choose a stroke or match play game. Gameplay is from two point of views, starting with an overhead view allowing you to set up the shot and choose a club, then switching to a 3-D point of view. Hitting the ball uses the common power meter where tapping the button starts the meter, tap the button a second time to select the amount of power in the shot, then tap the button a third time to select the amount of slice or hook. If you are unable to finish a round in one play, NES Open Tournament Golf features a battery back-up allowing you to save the game and continue later.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/NES%20Open%20Tournament%20Golf%20%28USA%29.zip"
          },
          "added": 1650729421656
        },
        {
          "title": "Ninja Gaiden",
          "longTitle": "Ninja Gaiden",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Ninja%20Gaiden%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Ninja%20Gaiden%20(USA).png",
          "description": "Ryu Hayabusa of the Dragon Ninja Clan receives a letter from his father, saying that he was leaving for a duel with an unknown warrior. Should he not return, Ryu was to go to America and seek a man named Walter Smith. Ryu honors his father's last request, and travels to America. While there, he is kidnapped by a CIA agent and given a statue of a hideous beast.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Ninja%20Gaiden%20%28USA%29.zip"
          },
          "added": 1712678446233
        },
        {
          "title": "Ninja Gaiden II - The Dark Sword of Chaos",
          "longTitle": "Ninja Gaiden II - The Dark Sword of Chaos",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Ninja%20Gaiden%20II%20-%20The%20Dark%20Sword%20of%20Chaos%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Ninja%20Gaiden%20II%20-%20The%20Dark%20Sword%20of%20Chaos%20(USA).png",
          "description": "Dynamic action scenes! Split your body into three, destroy all enemies with the Invincible Fire Wheel and other new Ninja fighting techniques! Ninja Gaiden II gives you the feel of real Ninjutsu! Exciting cinema display format! Ninja Gaiden II uses the same Cinema Display Format as the original. The fiendish plot unfolds in a movie-like sequence. Action, drama, revenge. Just wait till you get to the end!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Ninja%20Gaiden%20II%20-%20The%20Dark%20Sword%20of%20Chaos%20%28USA%29.zip"
          },
          "added": 1650729426612
        },
        {
          "title": "Ninja Gaiden III - The Ancient Ship of Doom",
          "longTitle": "Ninja Gaiden III - The Ancient Ship of Doom",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Ninja%20Gaiden%20III%20-%20The%20Ancient%20Ship%20of%20Doom%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Ninja%20Gaiden%20III%20-%20The%20Ancient%20Ship%20of%20Doom%20(USA).png",
          "description": "Thrilling new cinema screen! Follow the story of Ryu's epic adventure through Tecmo's movie-like Cinema Screen Animation. As you complete each level, a new part of the story unfolds. Exciting new powers and weapons! Over the years Ninja Ryu's fighting skills have improved to include fantastic new powers and weapons. Action-packed Ninja adventure! Can you get Ryu through his most challenging adventure as he battles the hideous ancient forces of darkness to save mankind? The Ultimate Ninja Challenge!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Ninja%20Gaiden%20III%20-%20The%20Ancient%20Ship%20of%20Doom%20%28USA%29.zip"
          },
          "added": 1650729429731
        },
        {
          "title": "Nintendo World Championships 1990",
          "longTitle": "Nintendo World Championships 1990",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Nintendo%20World%20Championships%201990%20(USA)%20(Competition%20Cart).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Nintendo%20World%20Championships%201990%20(USA)%20(Competition%20Cart).png",
          "description": "The Nintendo World Championships 1990 competition was based on a custom NES cartridge by the same name. However, it is unknown how many grey cartridges were made, and the highest numbered cart as of September 2020 is #353. Ninety copies of the gray cartridge were given to finalists after the championships concluded. Another twenty-six copies exist in gold, like The Legend of Zelda cartridge, and were given as prizes in a separate contest held by Nintendo Power magazine. Both versions have an exposed bank of DIP switches which could be flipped to set the amount of time the player had to complete the three games, shorter and longer than the 6 minutes 21 seconds used in the actual competition.\n\nThe Nintendo World Championships 1990 game cartridge is considered to be the most valuable NES cartridge ever released and one of the rarest, with collectors having been paid more than US$15,000 per copy.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Nintendo%20World%20Championships%201990%20%28USA%29%20%28Competition%20Cart%29.zip"
          },
          "added": 1650729437572
        },
        {
          "title": "Paperboy",
          "longTitle": "Paperboy",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Paperboy%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Paperboy%20(USA).png",
          "description": "Hop on your bike for a free-wheeling ride up the avenues of not-so-typical suburbia. There are papers to be delivered, robbers to be foiled, and fame and fortune to be won as you brave the mean streets. Avoid motorcycles, tricycles, traffic, tires, gratings, curbs, dogs, skateboarders, breakdancers, bad guys, and other hazards as you deliver to your customers. Earn bonus points by hitting targets along the obstacle course at the end of your route. With superb animation and sound effects, Paperboy brings home all the thrills, spills, challenge, and excitement you loved in the arcades.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Paperboy%20%28USA%29.zip"
          },
          "added": 1650729443403
        },
        {
          "title": "R.C. Pro-Am",
          "longTitle": "R.C. Pro-Am",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/R.C.%20Pro-Am%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/R.C.%20Pro-Am%20(USA).png",
          "description": "Nintendo puts you in control.\n  Grab your controller and pull up to the starting line. It's you against three other all-star racers. You'll face hair-pin turns, outragerous curves, oil slicks and rainclouds as you make your way through 32 trecherous courses.\n  Along the way you'll pick up performance boosters like Turbo Accelerations, Sticky Tires and Top Speed that will help you get to the finish line first. But if the going gets rough, use your bombs and missles to knock out the competition to make sure you're the winner.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/R.C.%20Pro-Am%20%28USA%29.zip"
          },
          "added": 1650729449770
        },
        {
          "title": "Rad Racer",
          "longTitle": "Rad Racer",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Rad%20Racer%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Rad%20Racer%20(USA).png",
          "description": "The idea of Rad Racer is to race around a course, and make it to check points before the timer runs out. If a player hits another vehicle, road sign or tree at a high speed, the car crashes. Crashes take time and make it more difficult for the player to reach the check point. There are eight different levels of requiring increasing skill. Even if time runs out, the vehicle can continue to coast for awhile; if the vehicle reaches a checkpoint before running out of momentum, the game continues.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Rad%20Racer%20%28USA%29.zip"
          },
          "added": 1650729456043
        },
        {
          "title": "River City Ransom",
          "longTitle": "River City Ransom",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/River%20City%20Ransom%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/River%20City%20Ransom%20(USA).png",
          "description": "The plot follows high school students Alex and Ryan (Kunio and Riki in the Japanese version) as they cross River City in an attempt to rescue River City High and Ryan's girlfriend Cyndi from the clutches of a villain called \"Slick\". Along the way, they battle with gangs of students (with names such as \"The Generic Dudes\" or \"The Frat Guys\") and several bosses and sub-bosses. Enemies will warrant a yell and drop money signifying their defeat, including the well known phrase \"BARF!\"",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/River%20City%20Ransom%20%28USA%29.zip"
          },
          "added": 1650729460606
        },
        {
          "title": "Skate or Die",
          "longTitle": "Skate or Die",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Skate%20or%20Die%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Skate%20or%20Die%20(USA).png",
          "description": "Hop on your souped-up board and cruise into the wildest multi-event contest ever dreamed of by man or beast. Three of these twisted trials are cut from the concrete courses of pro competitions. Each pits you head to head with a friend, shooting ramps or racing downhill, while going for rock n' rolls, hand plants, aerials, rail slides and methods! Then blast into \"Mad Max on Wheels\", dueling to the death with Bionic Lester, the dirtiest dude in the jam and joust. And finally \"Skate and Destroy\", a challenge that'll turn you into a Samurai skater, karate chopping your way through a tough alley filled with thugs, trash and unmentionable traffic hazards. So squirt a little oil onto your ball bearings, and prepare to Skate or Die!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Skate%20or%20Die%20%28USA%29.zip"
          },
          "added": 1650729480605
        },
        {
          "title": "StarTropics",
          "longTitle": "StarTropics",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/StarTropics%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/StarTropics%20(USA).png",
          "description": "StarTropics was released in the United States for the Nintendo Entertainment System on December 1, 1990. Star Tropics is an anomaly in that the game was developed exclusively for American and European audiences, and has never seen the light of day in Japan. The game was developed by a team of Japanese game designers living in the U.S., the same team responsible for the Punch-Out!! games. The game has been re-released on the Wii virtual console for both North American and PAL regions as of January 2008.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/StarTropics%20%28USA%29.zip"
          },
          "added": 1650729486843
        },
        {
          "title": "Super C",
          "longTitle": "Super C",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Super%20C%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Super%20C%20(USA).png",
          "description": "After losing a confrontation against Super Commandos Mad Dog and Scorpion, the juices of destruction drip from the spiked tongue of the vile alien warmonger - Red Falcon. Now, he's coming back stronger than ever, with a sinister plan that includes having his intergalactic warriors seep into the brains of the U.S. Army. To support his disguised forces of doom, he's recruited Jagger Froid, a demented alien from the Black Hole Galaxy. He's also shuttled in The Babula Destructoid Mechanism with its Beam of Death. With torrential terror about to rain down upon civilization, Earth's only hope rests with you, Scorpion, and your pal, the Dogster. And if your spread guns, lasers, flame throwers and mega shells fail to destroy Red Falcon's eight levels of terror, including radioactive lava fields, it's all over but for the shouting, the screaming and the cries from a disintegrating world!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Super%20C%20%28USA%29.zip"
          },
          "added": 1650729492184
        },
        {
          "title": "Super Mario Bros.",
          "longTitle": "Super Mario Bros.",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Super%20Mario%20Bros.%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Super%20Mario%20Bros.%20(World).png",
          "description": "Do you have what it takes to save the Mushroom Princess?  You'll have to think fast and move even faster to complete this quest!  The Mushroom Princess is being held captive by the evil Koopa tribe of turtles.  It's up to you to rescue her from the clutches of the Koopa King before time runs out.  But it won't be easy.  To get to the Princess, you'll have to climb mountains, cross seas, avoid bottomless pits, fight off turtle soldiers and a host of black magic traps that only a Koopa King can devise.  It's another non-stop adventure from the Super Mario Bros.!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Super%20Mario%20Bros.%20%28World%29.zip"
          },
          "added": 1650729494851
        },
        {
          "title": "Super Mario Bros. 2",
          "longTitle": "Super Mario Bros. 2",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Super%20Mario%20Bros.%202%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Super%20Mario%20Bros.%202%20(USA).png",
          "description": "Mario's back!  Bigger and badder than before!  This time it's a fierce action-packed battle to free the land of Subcon from the curse of the evil Wart.  It's up to you, along with Mario, Luigi, Toad and the Princess, to fight your way through bizarre multi-level worlds and find him!  This time you've got a brand new kind of power - plucking power - and now anything you find can be a weapon.  But beware!  You've never seen creatures like these!  Shyguys and Tweeters!  Ninji and Beezos!  And you've never had an adventure like this!  Only cunning and speed can save you now",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Super%20Mario%20Bros.%202%20%28USA%29.zip"
          },
          "added": 1650729497541
        },
        {
          "title": "Super Mario Bros. 3",
          "longTitle": "Super Mario Bros. 3",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Super%20Mario%20Bros.%203%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Super%20Mario%20Bros.%203%20(USA).png",
          "description": "Fight monsters and mini-bosses, avoid ghosts and the burning sun.  Make your way through water and quicksand.  Dodge cannon balls and bullets and rescue the King's wand!\n\nIn Super Mario Bros. 3 there are more warps, more chances at extra lives, and new special suits!  The raccoon suit lets you fly and knock out blocks.  The frog suit helps you out-swim the deadly fish.  There are suits for every occasion!\n\nStore up flowers and mushrooms to use later on.  Play game-show type bonus rounds!  Go back to that last screen and get a mushroom!  Pause to take a break, then continue where you left off!\n\nSuper Mario Bros. 3 is fun to play alone, or team up with a buddy to prolong the adventure!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Super%20Mario%20Bros.%203%20%28USA%29.zip"
          },
          "added": 1650729500490
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Family%20Computer%20Disk%20System%20(FDS)/Super%20Mario%20Bros.%202%20%28Japan%29%20%28En%29.zip"
          },
          "type": "retro-fceumm",
          "title": "Super Mario Bros.: The Lost Levels",
          "added": 1730559698990,
          "longTitle": "Super Mario Bros.: The Lost Levels",
          "description": "Super Mario Bros.: The Lost Levels is a 1986 platform game developed and published by Nintendo. A sequel to Super Mario Bros. (1985), it was originally released in Japan for the Family Computer Disk System as Super Mario Bros. 2 on June 3, 1986. Nintendo of America deemed it too difficult for its North American audience and instead released an alternative sequel, also titled Super Mario Bros. 2, in 1988. It was remade and renamed The Lost Levels for the 1993 Super Nintendo Entertainment System compilation Super Mario All-Stars, serving as its first international release. It has been rereleased for Game Boy Color, Game Boy Advance, Wii, Wii U, Nintendo 3DS and Nintendo Switch.\n\nThe Lost Levels is similar to Super Mario Bros, with players controlling Mario or Luigi to rescue Princess Peach from Bowser. It adds a greater level of difficulty and Luigi controls slightly differently from Mario, with reduced ground friction and increased jump height. The Lost Levels also introduces obstacles such as poison mushroom power-ups, counterproductive level warps, and mid-air wind gusts. It has 32 levels across eight worlds and 20 bonus levels.",
          "background": "https://upload.wikimedia.org/wikipedia/en/6/61/Super_Mario_Bros._2_%28Lost_Levels%29.png",
          "backgroundPixelated": true,
          "thumbnail": "https://tcrf.net/images/9/95/Super_Mario_Brothers_2_The_Lost_Levels_title.png"
        },
        {
          "title": "Tecmo Bowl",
          "longTitle": "Tecmo Bowl",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Tecmo%20Bowl%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Tecmo%20Bowl%20(USA).png",
          "description": "TECMO BOWL! You've trained for it in the arcade. Now, strap on your helmet and go for it! Choose your team and select plays for your own game plan. From the snap, total control of every pass, block, run, and tackle is in your hands. Tecmo Bowl! The game of guts and glory!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Tecmo%20Bowl%20%28USA%29.zip"
          },
          "added": 1650729505918
        },
        {
          "title": "The Legend of Zelda",
          "longTitle": "The Legend of Zelda",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Legend%20of%20Zelda%2C%20The%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Legend%20of%20Zelda%2C%20The%20(USA).png",
          "description": "Welcome to the Legend of Zelda.  Where the only sound you'll hear is your own heart pounding as you race through forests, lakes, mountains and dungeonous mazes in an attempt to restore peace to the land of Hyrule.  Along the way you'll be challenged by Tektites, Wizzrobes and an endless array of ruthless creatures who'll stop at nothing to prevent you from finding the lost fragments of the Triforce of Wisdom.  But don't despair.  With a little luck and a lot of courage, you'll conquer your adversaries, unite the Triforce fragments and unravel the mystery of the Legend of Zelda!\n\n* Explore the vast Overworld terrain of the land of Hyrule and discover hidden treasures.\n* Explore the mystical labyrinths of the Underworld and ward-off ruthless enemies.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Legend%20of%20Zelda%2C%20The%20%28USA%29.zip"
          },
          "added": 1650729367578
        },
        {
          "title": "Tiny Toon Adventures",
          "longTitle": "Tiny Toon Adventures",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Tiny%20Toon%20Adventures%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Tiny%20Toon%20Adventures%20(USA).png",
          "description": "These Tiny Toons have big problems. That's right. The arch enemy of Acme Acres, Montana Max, has kidnapped the ever-so-popular Babs Bunny. Now the furry female's fate rests in the paws of Buster Bunny and his crime fighting pals - Dizzy Devil, Furrball and Plucky Duck. Four kooky buddies with their own special talent. Buster can bounce over bad guys with the best of them. Furrball uses his feline claws to climb walls. Dizzy Devil prefers to spin through them. And Plucky can glide through the air and swim like a fish. Choose which partner you want at the beginning of each level before you face-off against time and goofballs gone bad in 6 zany wonderlands. So you better get jumping or it will be curtains for our playful pals!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Tiny%20Toon%20Adventures%20%28USA%29.zip"
          },
          "added": 1650729514378
        },
        {
          "title": "Top Gun",
          "longTitle": "Top Gun",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Top%20Gun%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Top%20Gun%20(USA).png",
          "description": "The sun shimmers on the horizon as your armed-to-the-teeth Navy fighter screams from the carrier deck, accelerating into the danger zone. High above hostile waters your mission is to defend the task force from enemy attack. Suddenly, bogeys flash onto your radar. They're everywhere, diving toward you at Mach 2. Only a second to react, you go to guns and arm missiles. Your heart pounds and palms sweat as you blast into the dogfight with cannons blazing. Tracers zip past your engines. Shells shatter your senses. Now it's just you against them. And to survive you'll need more than speed and firepower. You'll need guts and instinct. You'll need to be a \"TOP GUN\" pilot!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Top%20Gun%20%28USA%29.zip"
          },
          "added": 1650729518648
        },
        {
          "title": "Urban Champion",
          "longTitle": "Urban Champion",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Urban%20Champion%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Urban%20Champion%20(World).png",
          "description": "Duke it out with the computer or take on a friend in a battle of brute strength and wits in Urban Champion. You and your opponent each start with 200 stamina points. Flower pots falling from the building above will cause you to lose five stamina points, and you'll lose even more for being punched or kicked. When you've managed to get your opponent's stamina points down to zero, you've won the round. A round can also be won by pushing your opponent off of the screen. Also, if time runs out the losing fighter will be taken away by a cop car, or a player can lose by falling into an open manhole. A match has been won after you've defeated your opponent three times. After winning, you will be declared the Urban Champion.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Urban%20Champion%20%28World%29.zip"
          },
          "added": 1650729523099
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Family%20Computer%20Disk%20System%20(FDS)/Vs.%20Excitebike%20%28Japan%29%20%28En%29.zip"
          },
          "type": "retro-fceumm",
          "title": "Vs. Excitebike",
          "added": 1730559781213,
          "thumbnail": "https://i.ytimg.com/vi/XuBd6ts8ZCU/hq720.jpg?sqp=-oaymwEhCK4FEIIDSFryq4qpAxMIARUAAAAAGAElAADIQj0AgKJD&rs=AOn4CLCbP1sOFz_M-Jh8Rvus2gMEEv80YA",
          "background": "https://www.retrogames.cz/games/981/NES_01.gif",
          "backgroundPixelated": true,
          "longTitle": "Vs. Excitebike",
          "description": "Vs. Excitebike (VS エキサイトバイク) is a motorcross racing simulation game developed by Nintendo. It was released in the arcade shortly after the original Excitebike was released for the Famicom, partially in an attempt to create a demand for the home version in the United States. Though similar to the home console version, it features several key differences. The Design mode is removed in favor of a sixth and seventh additional track beyond the five found in the home addition. Rather than choosing between racing alone or with competition, players alternate between both play styles for each track. A bonus stage is presented after the third track, in which the player must attempt to launch their bike over a series of trucks.\n\nAmong all of Nintendo's Vs. arcade titles, Excitebike was one of the most common, appearing more frequently than even Vs. Super Mario Bros. This is largely due to the fact that when arcade owners were given the choice between an easy to understand motorcross racing game or a strange adventure about a plumber who eats mushrooms to grow in size, they went with the concept that made the most sense to them.\n\nThe Vs. version of Excitebike was later released on the Famicom Disk System with some improved features, including a simultaneous two player mode that the original game lacked, and an improved track save system (the tracks were saved to the writable portion of the disk). The music is completely different; none of the songs from the original game are present in this version, and a background theme is played during gameplay. Despite being the better of the two versions available for the Famicom, the disk version was never re-released in any format, while the original version has been released on several platforms, and as a Virtual Console title."
        },
        {
          "title": "Wizards & Warriors",
          "longTitle": "Wizards & Warriors",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Wizards%20%26%20Warriors%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Wizards%20%26%20Warriors%20(USA).png",
          "description": "You are Kuros, a powerful knight who enter the woods of Elrond. Legend says that a powerful wizard named Malkil has has gone completely mad during his years and turned his powerful magic to the dark side. Malkil has his base on the castle IronSpire where he has imprisoned a young and beautiful princess. It is up to Kuros to save the princess once and for all.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Wizards%20%26%20Warriors%20%28USA%29.zip"
          },
          "added": 1650729530584
        },
        {
          "title": "World Class Track Meet",
          "longTitle": "World Class Track Meet",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/World%20Class%20Track%20Meet%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/World%20Class%20Track%20Meet%20(USA).png",
          "description": "Re-release of Stadium Events, which turns your home into an exciting stadium, dares you to increase your physical ability and better your athletic record. You'll compete against a runner in the Tournament Mode, and in 4 events for a total score in the Olympic Mode. The top 6 winners' names and their scores will appear on the electronic billboard. The top 3 winners will stand on the winners platform!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/World%20Class%20Track%20Meet%20%28USA%29.zip"
          },
          "added": 1650729536090
        },
        {
          "title": "Wrecking Crew",
          "longTitle": "Wrecking Crew",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Wrecking%20Crew%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Wrecking%20Crew%20(World).png",
          "description": "The player controls Mario and attempts to destroy all of a certain set of objects with a large hammer on each of 100 levels. Mario cannot jump because of the hammer's weight. Each level takes place on a playfield divided into an invisible grid, each space of which can contain one object. Objects include destructible walls, pillars, and ladders, indestructible barrels and ladders, bombs that destroy all connected destructible objects, and various enemies that Mario must avoid. Doors may also exist, which can be opened to cause enemies to move harmlessly into the background.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Wrecking%20Crew%20%28World%29.zip"
          },
          "added": 1650729543307
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Family%20Computer%20Disk%20System%20(FDS)/Yume%20Koujou%20-%20Doki%20Doki%20Panic%20%28Japan%29%20%28DV%201%29.zip"
          },
          "type": "retro-fceumm",
          "title": "Yume Kōjō: Doki Doki Panic",
          "added": 1730559791502,
          "longTitle": "Yume Kōjō: Doki Doki Panic",
          "description": "Yume Kōjō: Doki Doki Panic (translated as Dream Factory: Heart-Pounding Panic and usually referred to as Doki Doki Panic) is a Japan-only video game developed by Nintendo in cooperation with Fuji Television (who also made All Night Nippon Super Mario Bros.) for the Family Computer Disk System to promote its event called Yume Kōjō '87 (translates to Dream Factory '87).\n\nIt was later released outside of Japan in an altered format under the name Super Mario Bros. 2, since the original Japanese Super Mario Bros. sequel, Super Mario Bros.: The Lost Levels, was deemed too similar to the original and too difficult for overseas players. Eventually, the altered Mario version of Doki Doki Panic was released in Japan as well, under the title Super Mario USA.",
          "thumbnail": "https://www.romhacking.net/translations/fds/images/titles/3titlescreen.png",
          "background": "https://cdn.mobygames.com/screenshots/16277936-yume-kojo-dokidoki-panic-nes-intro.png",
          "backgroundPixelated": true
        },
        {
          "title": "Zelda II - The Adventure of Link",
          "longTitle": "Zelda II - The Adventure of Link",
          "type": "nes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Snaps/output/Zelda%20II%20-%20The%20Adventure%20of%20Link%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-nes-images/master/Named_Titles/resized/Zelda%20II%20-%20The%20Adventure%20of%20Link%20(USA).png",
          "description": "The land of Hyrule is in chaos.  As Link, you'll be sent on a treacherous journey to return six precious Crystals to their origins in six stone statues.  Only by defeating the guardians of the six palaces will you gain passage to the seventh palace, take on the ultimate challenge that awaits you, and wake the Princess Zelda from her sleeping spell.  On your way, helpful villagers you encounter will offer clues and secret messages invaluable in your quest.  As you guide Link through the levels of Hyrule, close-ups and overviews will enhance your video vision.  Are you up to the challenge?",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%20Entertainment%20System%20(Headered)/Zelda%20II%20-%20The%20Adventure%20of%20Link%20%28USA%29.zip"
          },
          "added": 1650729551344
        }
      ],
      "longTitle": "Nintendo Entertainment System",
      "description": "The Nintendo Entertainment System (NES) is an 8-bit third-generation home video game console produced by Nintendo. It was first released as the Family Computer (FC), commonly known as the Famicom, in 1983 in Japan. The NES, a redesigned version, was released in American test markets in October 1985, before becoming widely available in the rest of North America and other countries.",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/nes-thumb.png?raw=true",
      "background": "https://upload.wikimedia.org/wikipedia/commons/b/b2/NES-Console-Set.png",
      "backgroundPixelated": false
    },
    {
      "title": "SNES",
      "items": [
        {
          "title": "Chrono Trigger",
          "longTitle": "Chrono Trigger",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Chrono%20Trigger%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Chrono%20Trigger%20(USA).png",
          "description": "Chrono Trigger follows the story of Crono, who was just an ordinary teenager living in 1000 A.D. until he has to follow his new friend Marle through a time portal to the past! With the help of his genius friend Lucca, and many other memorable characters met along the way, travel through the past, present, and future to unravel a story that has you fighting for the planet's survival across time itself!\n\nWith it's rich gameplay and epic creators, certain aspects of Chrono Trigger have been lauded as revolutionary, including its multiple endings, plot-related sidequests focusing on character development, unique battle system, and detailed graphics. Today, Chrono Trigger is considered by many to be the pinnacle of Role-playing game-play on the Super Nintendo Entertainment System.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Chrono%20Trigger%20%28USA%29.zip"
          },
          "added": 1650729948775
        },
        {
          "title": "Contra III - The Alien Wars",
          "longTitle": "Contra III - The Alien Wars",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Contra%20III%20-%20The%20Alien%20Wars%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Contra%20III%20-%20The%20Alien%20Wars%20(USA).png",
          "description": "The hideous Red Falcon, thought to have been destroyed long ago by the Earth's greatest commandos, Mad Dog and Scorpian, has risen again, this time pissed off and thirsty for revenge. His armies are marching through the cities, across the lands, and with the intention of exterminating the human race like a bad case of fleas. Two new commandos, Jimbo and Sully, have come forth now to kick Red Falcon's ass and save what remains of the world from his hideous plans!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Contra%20III%20-%20The%20Alien%20Wars%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Donkey Kong Country",
          "longTitle": "Donkey Kong Country",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Donkey%20Kong%20Country%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Donkey%20Kong%20Country%20(USA).png",
          "description": "Donkey Kong Country is a Jump & Run released in 1994 for the SNES. Challenged by the crazed tribe of reptilian Kremlings & King K. Rool, Donkey & Diddy Kong face their cunning adversaries armed with lightning-quick moves, chest-pounding muscle, and awesome aerial acrobatics. The duo also gets help from a host of friends and family - from Funky Kong, Cranky Kong and Candy Kong, to Rambi the rhino, Expresso the ostrich, Enguarde the swordfish, Squawks the parrot and Winky the frog. Explore over 30 levels plus dozens of hidden caves or secret rooms and discover every corner of the maps to help the Kongs recovering their stolen banana hoard!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Donkey%20Kong%20Country%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Donkey Kong Country 2 - Diddy's Kong Quest",
          "longTitle": "Donkey Kong Country 2 - Diddy's Kong Quest",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Donkey%20Kong%20Country%202%20-%20Diddy's%20Kong%20Quest%20(USA)%20(En%2CFr).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Donkey%20Kong%20Country%202%20-%20Diddy's%20Kong%20Quest%20(USA)%20(En%2CFr).png",
          "description": "Donkey Kong Country 2 is the sequel to Donkey Kong Country and was released in 1995 by Nintendo for the Super Nintendo Entertainment System. As Donkey Kong gets kidnapped by Kaptain King K. Rool, only Diddy & Dixie Kong were left behind to help him out. On their rescue mission they get help from well-known animal buddies, collect bananas & prescious coins and fight against more than 30 enemies, including 6 bosses. Throughout their adventure they explore distinct areas on Crocodile Isle like pirate ships, muddy swamps, haunted woods, lava bays, abandoned mines and even icy caverns!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Donkey%20Kong%20Country%202%20-%20Diddy%27s%20Kong%20Quest%20%28USA%29%20%28En%2CFr%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Donkey Kong Country 3 - Dixie Kong's Double Trouble!",
          "longTitle": "Donkey Kong Country 3 - Dixie Kong's Double Trouble!",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Donkey%20Kong%20Country%203%20-%20Dixie%20Kong's%20Double%20Trouble!%20(USA)%20(En%2CFr).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Donkey%20Kong%20Country%203%20-%20Dixie%20Kong's%20Double%20Trouble!%20(USA)%20(En%2CFr).png",
          "description": "Donkey Kong Country 3 was released for the SNES in 1996 as the 3rd installment in the Donkey Kong Country Series. \nDixie Kong and her cousin Kiddy Kong have to find Donkey Kong & Diddy Kong, who went missing on a fishing trip. Meanwhile, the Kremling Krew returns under the leadership of the mysterious robot KAOS, which is secretly controlled by the notorious villian King K. Rool aka K. Roolenstein. Once more various loyal animal friends and Kong family members stand by your side to find the missing Kongs - check out dusty mills, deciduous forests and snowy mountains, explore high cliffs, waterfalls & beautiful riverside areas!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Donkey%20Kong%20Country%203%20-%20Dixie%20Kong%27s%20Double%20Trouble%21%20%28USA%29%20%28En%2CFr%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Double Dragon V - The Shadow Falls",
          "longTitle": "Double Dragon V - The Shadow Falls",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Double%20Dragon%20V%20-%20The%20Shadow%20Falls%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Double%20Dragon%20V%20-%20The%20Shadow%20Falls%20(USA).png",
          "description": "Double Dragon returns, this time as a VS. fighter, in the same mold as Street Fighter. Based on the Double Dragon animated series, which is loosely based on the original arcade game, Jimmy and Billy and a host of other characters fight it out in a tournament fighter.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Double%20Dragon%20V%20-%20The%20Shadow%20Falls%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "EarthBound",
          "longTitle": "EarthBound",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/EarthBound%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/EarthBound%20(USA).png",
          "description": "Intergalactic terror stikes the small town of Onett as a blazing extraterrestrial object crashes in the night! The earth now faces imminent destruction by the universal evil threat known as Giygas! Armed with a cracked baseball bat, a cookie and an ATM card, a courageous boy named Ness vows to save the planet from hideous destruction. He must first find his heroic companions, Paula, Jeff and Poo. Will Ness succeed in his attempts to ambush countless frightening monsters as he travels? The ultimate test lies in the impending encounter with the all powerful Giygas!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/EarthBound%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Earthworm Jim",
          "longTitle": "Earthworm Jim",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Earthworm%20Jim%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Earthworm%20Jim%20(USA).png",
          "description": "A crow is chasing a worm named Jim while in outer space Psy-Crow is chasing a renegade ship. The ship's captain has stolen an ultra-high-tech-indestructible-super-space-cyber-suit and Queen Slug-for-a-Butt has ordered Psy-Crow to get it, since it can make her more beautiful than Princess-What's-Her-Name. Psy-Crow blasts the captain and the suit falls to Planet Earth.\n\nBack on earth Jim wonders if he is finally safe when an ultra-high-tech-indestructible-super-space-cyber-suit lands on him. Luckily Jim rests in the neck ring of the suit. Then the space particles begin interacting with Jim, causing a light-speed evolution. Jim soon realizes he is in control of the suit.\n\nJim overhears the Queen's plans for the suit and decides to meet this Princess...",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Earthworm%20Jim%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "F-Zero",
          "longTitle": "F-Zero",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/F-Zero%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/F-Zero%20(USA).png",
          "description": "F-Zero is a futuristic racing game, set in the year 2560. The player chooses one of the four available hovercars and then can race with other hovercars in one of the gameplay modes - \"Practice\" or \"Grand Prix\".",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/F-Zero%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Final Fantasy - Mystic Quest",
          "longTitle": "Final Fantasy - Mystic Quest",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Final%20Fantasy%20-%20Mystic%20Quest%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Final%20Fantasy%20-%20Mystic%20Quest%20(USA).png",
          "description": "Focus Tower is the center of the world and balances the forces of the world. However 4 monsters have taken the 4 elemental crystals (Earth, Water, Fire, Wind) for their own use, and also taken the 4 keys that for doors inside of Focus Tower. With the balance disrupted, disasters befall the world. A young boy by the name of Benjamin finds his home village destroyed. Meeting a mysterious old man while trying to escape from earthquakes, he soon learns that he is the prophesized hero and the only one who can save the world. Benjamin must recover the 4 crystals, unlock Focus Tower and defeat the ultimate monster before the 5th crystal, the Crystal of Life is corrupted.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Final%20Fantasy%20-%20Mystic%20Quest%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Final Fantasy II",
          "longTitle": "Final Fantasy II",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Final%20Fantasy%20II%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Final%20Fantasy%20II%20(USA).png",
          "description": "The fourth entry in the Final Fantasy series was released as Final Fantasy II in the West, because the second and the third game were not released there at the time. The game is a Japanese-style RPG with top-down world map navigation, automatic leveling up, and random enemy encounters. The player can freely roam an overworld containing several towns and dungeons. A menu-based system allows the player to outfit each character with equipment and up to twooften disposableitems for battle. Magic spells are assigned to the character from the item menu, and certain spells, such as \"Cure\", can be used outside of battle.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Final%20Fantasy%20II%20%28USA%29.zip"
          },
          "added": 1712678700078
        },
        {
          "title": "Final Fantasy III",
          "longTitle": "Final Fantasy III",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Final%20Fantasy%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Final%20Fantasy%20III%20(USA).png",
          "description": "The sixth entry in the Final Fantasy series was dubbed Final Fantasy III in the West because three out of the five previous installments of the series had not been released there at the time. Similarly to its predecessors, this is a role-playing game where the player controls a party of characters, travelling between various locales in the world, fighting randomly appearing regular enemies and bosses, and making the characters stronger by improving their skills and getting better equipment for them. The game maintains the ATB (active time battle) system of the two previous installments in the series, spicing traditional turn-based combat engine with a real-time element.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Final%20Fantasy%20III%20%28USA%29.zip"
          },
          "added": 1650731615904
        },
        {
          "title": "Final Fight",
          "longTitle": "Final Fight",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Final%20Fight%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Final%20Fight%20(USA).png",
          "description": "Final Fight is set in the fictional American metropolis of Metro City, where a former professional wrestler named Mike Haggar is elected Mayor, promising to handle the city's criminal problem in his campaign. The Mad Gear gang, the dominant criminal organization of the city, plots to bring Haggar under their control by kidnapping his daughter Jessica and using her as leverage against him. Enlisting the help of Cody, Jessica's boyfriend and a Martial Arts master himself, as well as Cody's sparring partner, a Ninjutsu master named Guy, Haggar opts to fight the gang instead in order to save his daughter.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Final%20Fight%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Gradius III",
          "longTitle": "Gradius III",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Gradius%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Gradius%20III%20(USA).png",
          "description": "A horizontal shooter where you control Vic Viper, a spaceship that increases its power by collecting capsules left by destroyed enemies. The player chooses the desired power-up by collecting capsules until the required cell is lit on the menu. The game is divided into stages, each containing a boss that must be destroyed.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Gradius%20III%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Harvest Moon",
          "longTitle": "Harvest Moon",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Harvest%20Moon%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Harvest%20Moon%20(USA).png",
          "description": "Ever wanted to live life on a farm, with nothing but the sun, the fresh scent of your crops, the muddy fields underneath, and cows and chickens to keep you company? Well, you're in luck, because you have just inherited your grandfather's ranch, but it's in a terrible state of disrepair! What ever can you do?",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Harvest%20Moon%20%28USA%29.zip"
          },
          "added": 1650730966179
        },
        {
          "title": "Illusion of Gaia",
          "longTitle": "Illusion of Gaia",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Illusion%20of%20Gaia%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Illusion%20of%20Gaia%20(USA).png",
          "description": "Radiating an ominous light in its path, the Chaos Comet threatens the existence of the planet. Battles erupt and a tentative peace is returned to the lands. Danger lurks as the Chaos Comet orbits and dreadful beasts lie awaiting. In the Age of Exploration a boy named Will is born. Tragedy strikes during an expedition to the Tower of Babel separating Will from his father. Telekinetic forces awaken as Will returns to South Cape. Armed with his transformation abilities of two great warriors, Will must save the planet. Gaia, Will's guiding spirit bestows magical powers and advice along his journey. With the help of his friends Will must battle relentless enemies and solve the puzzles of the ancient ruins. Patience and knowledge are essential to reunite this father and son.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Illusion%20of%20Gaia%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Killer Instinct",
          "longTitle": "Killer Instinct",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Killer%20Instinct%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Killer%20Instinct%20(USA).png",
          "description": "Don't wait in endless arcade lines to play--Killer Instinct comes to Super NES with action, graphics and sound that annihilates all other combat games!\nFulgore, Jago, B.Orchid, Spinal and all your favorite warriors contend in the Ultratech KI Tournament. Each combatant engages in the KI Combo Theory of connected moves and finishing tactics to destroy their opponents. With incredible displays of eyelasers, ice lancers, wind kicks, and laser blades these fearless fighters prove their battle prowess. But remember, if you lose, it's hero to zero!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Killer%20Instinct%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Kirby Super Star",
          "longTitle": "Kirby Super Star",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Kirby%20Super%20Star%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Kirby%20Super%20Star%20(USA).png",
          "description": "Dream Land is under siege again! Our hero, Kirby, returns to instigate a rescue. King Dedede is snatching up Dream Land's food supply, but he's not the only one! Dyna Blade, Meta Knight and a slew of other evil baddies are on the loose and wreaking havoc throughout the land.\n\nUse any of Kirby's amazing powers to create a \"helper\" to assist you in battle. Or have a friend join you for some two-player action by taking control of Kirby's helper. Help Kirby work through EIGHT challenging games filled with action and adventure. Enter the fray in Spring Breeze, enter a foot race against King Dedede in Gourmet Race and tackle a winged warrior in Dyna Blade. Hone your reaction skills in Megaton Punch and Samurai Kirby, then battle your way through the Great Cave Offensive, Revenge of Meta Knight and Milky Way Wishes. Each game is different AND some extra-special surprises are in store for you!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Kirby%20Super%20Star%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Kirby's Dream Course",
          "longTitle": "Kirby's Dream Course",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Kirby's%20Dream%20Course%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Kirby's%20Dream%20Course%20(USA).png",
          "description": "Kirby's Dream Course is a mini-golf game featuring the pink blob Kirby. After his adventures in Dream Land Kirby himself becomes the ball, and you must guide him around each hole using the sort of bar system that you see in most golf games. Where this game differs, however, is in the fact that you need to eliminate all on-screen enemies before you can guide Kirby into the hole and complete it. As per usual in golf games, the more strokes it takes you to complete the whole, the lower your score - so make sure you aim Kirby just right!\n\nYou'll find eight courses and a total of sixty-four holes in the game, not including the final showdown with King Dedede, as well as an action-packed two-player mode.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Kirby%27s%20Dream%20Course%20%28USA%29.zip"
          },
          "added": 1650731654244
        },
        {
          "title": "Kirby's Dream Land 3",
          "longTitle": "Kirby's Dream Land 3",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Kirby's%20Dream%20Land%203%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Kirby's%20Dream%20Land%203%20(USA).png",
          "description": "That mean old King Dedede is at it again! He's causing his mischief and Dreamland's in trouble! Kirby, the resident hero of Dreamland, sets out to teach Dedede a lesson, this time with the help of many of his good friends!\n\nBut wait! Something's wrong! Dedede doesn't seem to be himself...\n\nLooks like Kirby has to stop Dedede and find out what is wrong with him! It almost seems like something's controlling him...",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Kirby%27s%20Dream%20Land%203%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Mega Man 7",
          "longTitle": "Mega Man 7",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Mega%20Man%207%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Mega%20Man%207%20(USA).png",
          "description": "Taking place in the 21st century (the ambiguous year 20XX), Mega Man 7 begins directly after the events of Mega Man 6. Thanks to the efforts of Mega Man and his friends, Dr. Wily was finally brought to justice. However, Wily had always known that he might be imprisoned one day and so he had constructed four backup Robot Masters in a hidden laboratory, Burst Man, Cloud Man, Junk Man and Freeze Man. If they did not receive a communication within six months, they would begin searching for their master. After six months, the robots activate and go on a rampage throughout the city in which Dr. Wily is being held. Mega Man is called into action. Upon driving into the city with Roll and Auto, he sees that the it is in ruins and that he is too late to stop Wily's Robot Masters from liberating the evil scientist. Mega Man gives chase, but is stopped by Bass, a robot with capabilities much like Mega Man's own and his robotic wolf Treble. After a brief skirmish, Mega Man is informed that the two of them are battling Wily as well. Bass and Treble then take off, leaving Mega Man confused, but convinced that he has new allies and determined to again stop Dr. Wily's plans.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Mega%20Man%207%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Mega Man X",
          "longTitle": "Mega Man X",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Mega%20Man%20X%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Mega%20Man%20X%20(USA).png",
          "description": "The instruction manual for Mega Man X contains \"The Journal of Dr. Cain\", in which the story leading up to the events depicted in the game is narrated through excerpts of Dr. Cain's personal journal. According to the journal, Dr. Cain, an archaeologist searching in the year 21XX for fossil records relating to Mesozoic plant life, accidentally discovered the ruins of a robotics research facility that had once been operated by the legendary robot designer Dr. Thomas Light. Among the ruins, Dr. Cain found a large capsule which contained a highly advanced robot the likes of which the world had never seen before. This robot, Mega Man X, had human-level intelligence and emotion. Fascinated by the genius of Dr. Light's design, Dr. Cain studied X and Dr. Light's few remaining notes. With X's help, some months later, the first \"replicate android\" or Reploid, a robot who can think, feel, learn, and grow exactly like a human, was made. Within the year, the design had been standardized and Reploids were being mass-produced.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Mega%20Man%20X%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Mega Man X2",
          "longTitle": "Mega Man X2",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Mega%20Man%20X2%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Mega%20Man%20X2%20(USA).png",
          "description": "Mega Man X2, known as Rockman X2) in Japan, is a video game developed by Capcom for the Super Nintendo Entertainment System (SNES). The game was released in Japan on December 16, 1994, and in North America and PAL regions in 1995. It is the direct sequel to Mega Man X, released one year prior. Mega Man X2 takes place in the near future in which humans try to peacefully coexist with intelligent robots called \"Reploids\", with some of the Reploids going \"Maverick\" and threatening daily life. The plot follows the android protagonist X, a \"Maverick Hunter\" who has saved humanity from the evil Sigma six months earlier. A trio of Mavericks calling themselves the \"X-Hunters\" has arisen, intent on destroying X by luring him with bodyparts of his comrade Zero, who died in the conflict with Sigma's right hand robot named Vile.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Mega%20Man%20X2%20%28USA%29.zip"
          },
          "added": 1712678700078
        },
        {
          "title": "Mega Man X3",
          "longTitle": "Mega Man X3",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Mega%20Man%20X3%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Mega%20Man%20X3%20(USA).png",
          "description": "The story of Mega Man X3 revolves around a Reploid scientist named Dr. Doppler. In the year 21XX, the threat of the Mavericks had been neutralized thanks to Doppler's technology, which prevented the Mavericks from going berserk. The reformed Reploids had formed a utopia near their new mentor called Doppler Town. It seemed that all was well, until the former Maverick Reploids suddenly reverted and once again began causing trouble. Dr. Doppler was held accountable, and X and Zero were sent out to contain the new threat. Once Zero and X defeat Dr. Doppler and his forces, Dr. Doppler snaps out of it and realizes all the damage that he has done. He reiterates that Sigma's true form is now a computer virus, and he realizes that he was corrupted to create a new body for him. X seeks out Sigma after thanking the doctor. After an intense battle, the Sigma Virus in its pure form chases X in an attempt to possess him. After X finds himself at a deadend, one of two things may happen. In the main ending, Zero takes Dr. Doppler's true antivirus and uploads it onto his sabre offscreen. He rushes in to save X just in time and causes Sigma to explode, taking out the lab as they evacuate. However, if Zero was injured during the game, the worse scenario occurs - Dr. Doppler instead uses his own body as the antivirus and sacrifices himself for the greater good.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Mega%20Man%20X3%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Paladin's Quest",
          "longTitle": "Paladin's Quest",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Paladin's%20Quest%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Paladin's%20Quest%20(USA).png",
          "description": "Step into the mysterious world of Lennus.\n\nAs Ghezni stands before the great Tower, incertainty wraps its icy hands around his heart. What mysteries lie behind the great door looming before him?\n\nWhat started out as a simple dare has turned to terror as Ghezni finds himself about to begin an adventure that will change his life, and just may change yours.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Paladin%27s%20Quest%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Pilotwings",
          "longTitle": "Pilotwings",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Pilotwings%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Pilotwings%20(USA).png",
          "description": "Pilotwings is a flight simulator game that has the player attempt to earn pilot licenses through lessons in light plane flight, use of a rocketbelt, hang gliding, and skydiving. Added to these are levels involving an attack helicopter and bonus stages. Each event offers unique controls and gameplay mechanics. To increase the realism of its flight simulation, the game extensively utilizes the SNES's Mode 7 capability, which mimics 3D graphics by rotation and scaling of flat objects.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Pilotwings%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Pocky & Rocky",
          "longTitle": "Pocky & Rocky",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Pocky%20%26%20Rocky%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Pocky%20%26%20Rocky%20(USA).png",
          "description": "This is a single player or two player simultaneous game.  It has wonderful \"Super Deformed\" type graphics set in ancient Japan and an above average difficulty.\n\nYou play as the Princess Pocky and her Racoon Rocky.  Run through each level beating the enemies and you'll face a goofy boss at the end.  Beat him and you're on to the next level.\n\nYou fight and shoot your way through numerous levels based on temples and shrines.  Pocky shoot playing cards and Rocky shoot leaves for long range attacks.  For short range Pocky uses a rod and Rocky his tail.\n\nPocky also has a spin attack and Rocky can freeze into a invulnerable statue. (Think Tanuki Mario)",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Pocky%20%26%20Rocky%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Secret of Mana",
          "longTitle": "Secret of Mana",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Secret%20of%20Mana%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Secret%20of%20Mana%20(USA).png",
          "description": "Secret of Mana is an Action RPG developed and released by Square Soft in 1993. It tells a legendary story about a young hero and his two companions, a girl and a sprite, restoring the mystical power of Mana, an ethereal omnipresent energy source.\n\nWhen the boy finds a rusty sword embedded in a stone, he unleashes monsters in the surrounding countryside of his village by pulling out the artifact. After the boy gets banished by the villagers due to this bad omen an elderly knight named Jema recognizes the blade as the legendary Mana Sword and encourages the group to re-energize the sword by visiting the eight Mana Temples. Alltogether, the three adventurers embark on an epic journey to defeat the evil forces and restore peace again!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Secret%20of%20Mana%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "SimCity",
          "longTitle": "SimCity",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/SimCity%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/SimCity%20(USA).png",
          "description": "SimCity sets you as the mayor of a new municipality, with the responsibility of building and maintaining a place where citizens can move to and work and be happy. The first task is to place essentials such as housing, transport links, schools, factories and shops. There are 50 types of these, allowing for homes of all standards and different types of businesses. Make sure to consider which sites are effective for which tasks. Some power sources pollute, others don't but are more expensive. Taxes must be raised to ensure an income, and then portions allocated to public services such as policing and roads. Earthquakes, floods and fires are all emergency situations that must be dealt to contain any damage.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/SimCity%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Star Fox",
          "longTitle": "Star Fox",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Star%20Fox%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Star%20Fox%20(USA).png",
          "description": "In the distant Lylat star system, imagine yourself at the controls of a futuristic, heavily armed, space fighter - Arwing.\n\nLead the counter-attack on an invasion force of hundreds of alien tanks, fighter ships, laser gun emplacements and super battleships.  Maneuver at warp speed through fog-enshrouded canyons, dense asteroid belts and waves of the enemy's best defense.  You must use skill and cunning to fight to the enemy's home planet Venom and smash the Core Brain for victory!\n\n* The Super FX micro chip is on-board for fluid game control and special effects previously unavailable in home video games!  The action explodes from all directions in realistic, real-time, three dimensions.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Star%20Fox%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Star Fox 2",
          "longTitle": "Star Fox 2",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Star%20Fox%202%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Star%20Fox%202%20(USA%2C%20Europe).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Star%20Fox%202%20%28USA%2C%20Europe%29%20%28Classic%20Mini%2C%20Switch%20Online%29.zip"
          },
          "added": 1650731569399,
          "description": "Star Fox 2 is a multidirectional shooter video game developed by Nintendo and Argonaut Software for the Super Nintendo Entertainment System (SNES). It was completed in 1995, but did not see an official release until 2017 on the Super NES Classic Edition.\n\nLike the original Star Fox (1993), Star Fox 2 pushed the graphical capabilities of the SNES with Argonaut's Super FX chip. Dylan Cuthbert was lead programmer, with Shigeru Miyamoto returning as producer and Katsuya Eguchi as director. Star Fox 2 introduces semi-real-time gameplay, new ship types, new playable characters, and a more advanced 3D game engine. The story continues the battle against Emperor Andross, who seeks to destroy the Lylat system."
        },
        {
          "title": "Stunt Race FX",
          "longTitle": "Stunt Race FX",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Stunt%20Race%20FX%20(USA)%20(Rev%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Stunt%20Race%20FX%20(USA)%20(Rev%201).png",
          "description": "The game features four modes of play: Speed Trax is basically an arcade mode where the player has to qualify for each upcoming race by reaching checkpoints while collecting items to restore his damage- and boost-bar. It is divided into a Novice-, Expert-, and Master class, with each class featuring four unique tracks. In Stunt Trax the player has to complete courses filled with obstacles within a certain time limit while trying to collect as many stars as possible. Battle Trax is a two player mode taking place on special tracks without any CPU-controlled opponents. Finally, Test Run let's the player practice all tracks that have been unlocked.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Stunt%20Race%20FX%20%28USA%29%20%28Rev%201%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Super Adventure Island",
          "longTitle": "Super Adventure Island",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Adventure%20Island%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Adventure%20Island%20(USA).png",
          "description": "Master Higgins is back in his wildest and greatest adventure of all! His girlfriend, Jeannie Jungle, has been turned to stone by the evil Dark Cloak. Now he must leap into action to defeat the scores of guardian animals and monsters that protect the wicked wizard.\nJoin Master Higgins as he reaches new heights of adventure on his high flying skateboard. Speed through underground caves in a crazy mine car ride! Go from tropical shores to the belly of a whale - all in search of his final battle with the mad magician, Dark Cloak!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Adventure%20Island%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Super Bomberman",
          "longTitle": "Super Bomberman",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Bomberman%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Bomberman%20(USA).png",
          "description": "Super Bomberman is the first video game in the Bomberman series to appear on the Super Nintendo Entertainment System. It is also the first four-player game to be released on the Super NES.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Bomberman%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Super Bonk",
          "longTitle": "Super Bonk",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Bonk%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Bonk%20(USA).png",
          "description": "The fourth game in the regular \"Bonk\" caveman series, Bonk is back on his first Super Nintendo outing.\n\nIn this side-scrolling platformer adventure, the gameplay is similar to Bonk 3. Super Bonk allows Bonk to travel through time from his prehistoric levels, the insides of a dinosaur, a version of modern Chinatown, and even the moon! Along the way, Bonk can find power-ups that can change his form to creatures such as a shooting Bonk crab, a dinosaur form called \"Big Kronk\", find candies that change his size from tiny to huge, travel through transportation tubes, and find multiple bonus levels.\n\nBonk still uses his head to smash his enemies, propeller seeds that allow Bonk to fly, and for the first time, can carry spring flowers on his head in his continuing battle against his arch nemesis, King Drool!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Bonk%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Castlevania IV",
          "longTitle": "Super Castlevania IV",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Castlevania%20IV%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Castlevania%20IV%20(USA).png",
          "description": "A century of Transylvanian tranquility is about to come to a shocking end. Once again the mortifying screams of helpless villagers shake the ground as they huddle against new nightmarish horrors unleashed by the Duke of Darkness, Count Dracula. And this time he has a tombstone with your name on it, Simon Belmont.\nYou must descend into Castle of the Undead and its gruesome ground, accompanied by the most chilling sound effects to ever tingle your spine. Inside, a freshly dug 11 levels maze features the treacherous Terrace of Terror, the dangerous Rotating Dungeon, the Sunken Ruins of Lost Spirits, torture chambers and creature filled caves. Use your whip like a grappling hook and swing past hundreds of traps and a host of ghost freaks, living corpses and hidden goblins. All while dodging or destroying the unpredictable spitting lizards, carnivorous coffins, and more.\nFind the concealed weapons needed to defeat everything from eerie phantoms to haunted furniture. Then prepare to find yourself face-to-thing with hideous torments like the Tongue Lasher, the Darkest Knight, the Bone-Afide Horseman and the Granite Crusher. When your nerves get shot, use your password and take a breather. But forge on, Simon Belmont, because if you though Dracula was down for the count, he's only just begun to fright!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Castlevania%20IV%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Double Dragon",
          "longTitle": "Super Double Dragon",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Double%20Dragon%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Double%20Dragon%20(USA).png",
          "description": "The two greatest martial arts heroes of all time are back -- in SUPER DOUBLE DRAGON, an all-new adventure with awesome new moves, impossible new missions, and a hair-raising new cast of enemies!\nMarian, a beautiful policewoman, is a student of Kung Fu and part-time assistant instructor at the martial arts training school run by Billy and Jimmy Lee. A narcotics investigator, she has disappeared while attempting to infiltrate the rughtless criminal mob known as the Black Shadow Warriors.\nIt will take all your incomparable fighting skill and knowledge to find and rescure Marian. Alone, or with the help of your brother, you must face the fearsome onslaught of the Shadow Warriors with the fabled power and ferocity of the DOUBLE DRAGON!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Double%20Dragon%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Ghouls 'N Ghosts",
          "longTitle": "Super Ghouls 'N Ghosts",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Ghouls%20'N%20Ghosts%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Ghouls%20'N%20Ghosts%20(USA).png",
          "description": "As dauntless knight Arthur you are caught up in the most dangerous of quests! A spell has been cast upon the kingdom. Your fair maiden, Princess Prin Prin has been snatched up by the evil emperor. Only as Arthur can you get her back from the creatures of the undead that haunt the land. Test your courage and skill to the limit. You must keep up the quest. On your journey, your mightiest weapon of all awaits you... MAGIC!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Ghouls%20%27N%20Ghosts%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Mario Kart",
          "longTitle": "Super Mario Kart",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Mario%20Kart%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Mario%20Kart%20(USA).png",
          "description": "The Super Mario GoKart Park is open for tons of racing fun!  Hit the track with Mario, Luigi, Yoshi and the Princess.  Get tough and lock fenders with Donkey Kong, Jr. and Bowser.  Even Toad and Koopa Troopa will mix it up in an all-out quest for the Gold Cup!  Race head-to-head with a friend or challenge the computer in great, split-screen, Mode 7 graphics.\n\nFeel like a bit less speed and a lot more strategy?  Take a crack at the Battle Mode!  In four different maze-like courses you'll use Koopa Shells, Banana Peels, Super Stars and other wacky weapons to burst your opponents' target balloons and triumph!\n\n* 2 games in 1 - Mario Grand Prix and Battle Mode\n* 8  Familiar Characters\n* 20 Different Tracks\n* 3 Different Skill Levels\n* Battery-backed memory saves your best times!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Mario%20Kart%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Mario RPG - Legend of the Seven Stars",
          "longTitle": "Super Mario RPG - Legend of the Seven Stars",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Mario%20RPG%20-%20Legend%20of%20the%20Seven%20Stars%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Mario%20RPG%20-%20Legend%20of%20the%20Seven%20Stars%20(USA).png",
          "description": "Mario returns in this incredible new role-playing adventure! His latest rival is Smithy, a menacing creature who causes fear and treachery in the Mushroom Kingdom. Mario must recover seven stars and repair the Star Road before he can make his way to Bowser's castle for a final confrontation with Smithy. Powerful weapons, sinister spells and other useful items help Mario to complete his harrowing journey. New friends and old allies support him along the way. Even Bowser lends a hand!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Mario%20RPG%20-%20Legend%20of%20the%20Seven%20Stars%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Mario World",
          "longTitle": "Super Mario World",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Mario%20World%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Mario%20World%20(USA).png",
          "description": "Mario's off on his biggest adventure ever, and this time he's brought along a friend.  Yoshi the dinosaur teams up with Mario to battle Bowser, who has kidnapped Princess Toadstool once again.  Guide Mario and Yoshi through nine peril-filled worlds to the final showdown in Bowser's castle.\n\nUse Mario's new powers and Yoshi's voracious monster-gobbling appetite as you explore 96 levels filled with dangerous new monsters and traps.  Climb mountains and cross rivers, and descend into subterranean depths.  Destroy the seven Koopa castles and find keys to gain entrance to hidden levels.  Discover more warps and thrilling bonus worlds than ever before!\n\nMario's back, and this time he's better than ever!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Mario%20World%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Mario World 2 - Yoshi's Island",
          "longTitle": "Super Mario World 2 - Yoshi's Island",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Mario%20World%202%20-%20Yoshi's%20Island%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Mario%20World%202%20-%20Yoshi's%20Island%20(USA).png",
          "description": "The Evil Magikoopa, Kamek, is out to kidnap Baby Mario!  In this sequel to Super Mario World, you play as Yoshi.  Your goal is to successfully carry Baby Mario back to his parents in the Mushroom Kingdom while avoiding all of Kamek's clever traps and evil minions.  Enjoy the various backgrounds of the rich and vibrant locales of Yoshi's Island as you race to complete your quest.\n\nIs Yoshi up to the momentous task at hand?  Help him toss his eggs, manipulate unique objects and solve puzzling situations!  When in doubt, don't be afraid to try EVERYTHING!!\n\n* 16 megs of memory provide 6 worlds - each with 8 stages!\n* Morphmation delivers powerful special effects - scaling, rotating, and 360 degree scrolling.\n* Huge characters and even bigger bosses require quick thinking!\n* Battery back-up to save your progress.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Mario%20World%202%20-%20Yoshi%27s%20Island%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Metroid",
          "longTitle": "Super Metroid",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Metroid%20(Japan%2C%20USA)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Metroid%20(Japan%2C%20USA)%20(En%2CJa).png",
          "description": "Take on a legion of Space Pirates and a new Metroid force as you forge into the covert underworld of Planet Zebes!  It's up to you and Samus to recapture the long-surviving Metroid hatchling before evil hands unleash its energy.\n\nAn army of ominous creatures are poised for battle at every turn of Zebes' twisted, threatening passageways including the menacing Ridley and the great lizard Kraid.  Knock down enemies with a killer somersault and swing on an electric beam through narrow passageways!  They're no match for you and Samus but wait!  It seems the Mother Brain has returned\n\n* 24 Megs of action in the largest Super NES game ever!\n* It's the toughest Metroid clash yet!\n* Six huge areas to explore!\n* Samus has an arsenal of new beams, missiles and super high-tech devices.\n* Battery-backed memory saves your progress!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Metroid%20%28Japan%2C%20USA%29%20%28En%2CJa%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super Punch-Out!!",
          "longTitle": "Super Punch-Out!!",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Punch-Out!!%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Punch-Out!!%20(USA).png",
          "description": "Slug your way through the grueling and sweat-pounding matches of the Minor, Major and World Circuits. Dodge bone-bruising punches and dance to the top of the supreme Special Circuit. Face off against old favorites including Bear Hugger, Piston Hurricane, Bald Bull, Mr. Sandman and Super Macho Man plus a cast of new and weird challengers. With a right hook! Body blow! And precise quick jabs! The referee announces \"Knock Out!\" Your opponent lies face down as you win the title of Nintendo Video Boxing Association Champion!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Punch-Out%21%21%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Super R-Type",
          "longTitle": "Super R-Type",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20R-Type%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20R-Type%20(USA).png",
          "description": "In this SNES sequel to the arcade R-Type shooters, you are the R-9, Earth's most advanced form of defense against the evil BYDO Empire. There are seven stages you must go through, picking up power-up items to defeat the stage bosses which have returned from the arcade versions of R-Type and R-Type II. Your R-9 ship can also be united with FORCE, which are invincible units that surround your ship to protect you and can also power up and attack.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20R-Type%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Tetris & Dr. Mario",
          "longTitle": "Tetris & Dr. Mario",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Tetris%20%26%20Dr.%20Mario%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Tetris%20%26%20Dr.%20Mario%20(USA).png",
          "description": "Two of the most popular puzzle games return, but now together in an exclusive compilation for SNES. The games have a slight graphical update when compared with the original Game Boy and NES games, but the gameplay remains totally faithful to the games released for both platforms.\n\nIn Tetris, the main objective is to pile blocks that will fall down continuously, in order to create a row or \"line\" without spaces. For this collection, the game comes with two bonus options: 2 PLAYER GAME (absent in the NES version) and VS. COM (absent in both versions), with 3 CPU opponents available, each one representing a difficulty level (EASY, MEDIUM, and HARD, respectively).\n\nIn Dr. Mario, the objective is to eliminate all the viruses contained in a big bottle. Dr. Mario (situated in the upper-right side of the screen) will throw capsules with 6 different color combinations (Red-Red, Red-Blue, Yellow-Yellow, Red-Yellow, Blue-Blue and Blue-Yellow) in order to line up at least four viruses or capsules of the same color horizontally or vertically and to make them disappear. In this compilation, the game comes with a bonus option: VS. COM, where you'll face the CPU players: Blue Virus (EASY), Yellow Virus (MEDIUM), and Red Virus (HARD).",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Tetris%20%26%20Dr.%20Mario%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "The Legend of Zelda - A Link to the Past",
          "longTitle": "The Legend of Zelda - A Link to the Past",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Legend%20of%20Zelda%2C%20The%20-%20A%20Link%20to%20the%20Past%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Legend%20of%20Zelda%2C%20The%20-%20A%20Link%20to%20the%20Past%20(USA).png",
          "description": "Venture back to Hyrule and an age of magic and heroes.  The predecessors of Link and Zelda face monsters on the march when a menacing magician takes over the kingdom.  Only you can prevent his evil plot from shattering the land of Hyrule.\n\nIn your quest, you'll venture into twisting mazes, dungeons, palaces and shadowy forests.  Test your mettle with mighty swords and magical weapons.  Or heft a boulder and hurl it at your enemies.  If the going gets tough, dive into a river--you can swing to escape!  Learn powerful spells, locate magical artifacts and solve the mysteries of the evil magician and the hidden realm of Hyrule.\n\nThis exciting Super NES sequel to the Legend of Zelda and The Adventure of Link uses 16-bit power to create a quest so colorful and detailed you don't just play it, you live it!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Legend%20of%20Zelda%2C%20The%20-%20A%20Link%20to%20the%20Past%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "The Magical Quest Starring Mickey Mouse",
          "longTitle": "The Magical Quest Starring Mickey Mouse",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Magical%20Quest%20Starring%20Mickey%20Mouse%2C%20The%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Magical%20Quest%20Starring%20Mickey%20Mouse%2C%20The%20(USA).png",
          "description": "This was the first Mickey Mouse game for Super NES, featuring a traditional platform gameplay and colorful Disney-like graphics.\n\nMickey's mission is to save his dog Pluto, who's been kidnapped and kept inside emperor Pete's castle, in a magical land, guarded by mysterious creatures.\n\nThe originality of the game lies on the possibility of wearing different costumes to incorporate different characters, all taken from old Disney cartoons. Each one has a special ability. As a wizard, Mickey has magical powers; as a fireman, the mouse can deal with fire; and, as a climber, he can reach the top of high platforms.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Magical%20Quest%20Starring%20Mickey%20Mouse%2C%20The%20%28USA%29.zip"
          },
          "added": 1650730966180
        },
        {
          "title": "Tiny Toon Adventures - Buster Busts Loose!",
          "longTitle": "Tiny Toon Adventures - Buster Busts Loose!",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Tiny%20Toon%20Adventures%20-%20Buster%20Busts%20Loose!%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Tiny%20Toon%20Adventures%20-%20Buster%20Busts%20Loose!%20(USA).png",
          "description": "You play Buster Bunny, in a series of levels, featuring characters from the Tiny Toon Adventures cartoon.\n\nMost of the six levels are platform levels, where Buster has a number of attacks to defeat the enemies he faces.  These include kicks and jumps, and a dash ability that lets you slide into enemies to defeat them, and also climb walls.\n\nThe fourth level is an exception, and consists of a game of (American) football, played with a simplified version of the rules.  The idea is simply to get a touchdown, while as usual progressing at least ten yards in four downs.  There are two plays: a running play, where you simply run as far as possible while avoiding the opposing team; and a passing play that starts with a pass that can gain you extra yards, but must be caught.\n\nBetween levels there are bonus games.  You spin a wheel to determine what game you play out of five available.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Tiny%20Toon%20Adventures%20-%20Buster%20Busts%20Loose%21%20%28USA%29.zip"
          },
          "added": 1650730966181
        },
        {
          "title": "Trials of Mana",
          "longTitle": "Trials of Mana",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Trials%20of%20Mana%20(World)%20(Rev%201)%20(Collection%20of%20Mana).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Trials%20of%20Mana%20(World)%20(Rev%201)%20(Collection%20of%20Mana).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Trials%20of%20Mana%20%28World%29%20%28Collection%20of%20Mana%29.zip"
          },
          "added": 1650731782852,
          "description": "Trials of Mana, also known by its Japanese title Seiken Densetsu 3, is a 1995 action role-playing game developed and published by Square (now Square Enix) for the Super Famicom. It is the sequel to the 1993 game Secret of Mana, and is the third installment in the Mana series. Set in a high fantasy world, the game follows three heroes as they attempt to claim the legendary Mana Sword and prevent the Benevodons from being unleashed and destroying the world. It features three lengthy main plotlines and six different possible main characters, each with their own storylines, and allows two players to play simultaneously. Trials of Mana builds on the gameplay of its predecessor with multiple enhancements, including the use of a time progression system with transitions from day to night and weekday to weekday in game time, and a wide range of character classes to choose from, which provides each character with an exclusive set of skills and status progression."
        },
        {
          "title": "Super Mario All-Stars",
          "longTitle": "Super Mario All-Stars",
          "type": "snes",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Snaps/output/Super%20Mario%20All-Stars%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-snes-images/master/Named_Titles/resized/Super%20Mario%20All-Stars%20(USA).png",
          "description": "Revisit the magic and fun of the classic Super Mario Bros. series on your Super NES!  All the great Super Mario Bros. games for the NES have been powered up with 16-bit graphics and sound and collected on one super game pak.  As an added bonus, the previously unreleased \"Lost Levels\" are included.  These super challenging courses have never been available in this country until now!\n\n* Four great games in one game pak!\n* Battery backed memory saves up to 4 players' progress through every game!\n* Play alone or 2 players can alternate play!\n* New 16-bit graphics, sound, and other surprises!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Super%20Nintendo%20Entertainment%20System/Super%20Mario%20All-Stars%20%28USA%29.zip"
          },
          "added": 1730576266006
        }
      ],
      "longTitle": "Super Nintendo Entertainment System",
      "description": "The Super Nintendo Entertainment System (SNES), commonly shortened to Super NES or Super Nintendo, is a 16-bit home video game console developed by Nintendo that was released in 1990 in Japan and South Korea, 1991 in North America, 1992 in Europe and Oceania, and 1993 in South America. In Japan, it is called the Super Famicom (SFC). In South Korea, it is called the Super Comboy and was distributed by Hyundai Electronics. The system was released in Brazil on August 30, 1993, by Playtronic. Although each version is essentially the same, several forms of regional lockout prevent cartridges for one version from being used in other versions.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/3/36/SNES-Mod1-Console-Set.png",
      "backgroundPixelated": false,
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/snes-thumb.png?raw=true"
    },
    {
      "title": "N64",
      "longTitle": "Nintendo 64",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/n64-thumb.png?raw=true",
      "background": "https://upload.wikimedia.org/wikipedia/commons/0/02/N64-Console-Set.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "1080 Snowboarding",
          "longTitle": "1080 Snowboarding",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/1080%20Snowboarding%20(Japan%2C%20USA)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/1080%20Snowboarding%20(Japan%2C%20USA)%20(En%2CJa).png",
          "description": "You're taking a Tahoe 155 snowboard down a steep, bumpy incline at night and you're about to top off an Indy Nosebone with a 360 Air, and you haven't even left your living room!  You're Playing 1080 (Ten Eighty) Snowboarding, a game so intense you'll be brushing the snow off your goggles.  With five different boarders, eight different Lamar snowboards, more than 25 tricks, a Half-Pipe and six different courses, this is as close as you'll get to the real thing without hopping on the next ski life.\n\n* Six game modes and courses!\n* 2-Player simultaneous play!\n* Over 25 different tricks!\n* Compatible with Rumble Pak accessory.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/1080%20Snowboarding%20%28Japan%2C%20USA%29%20%28En%2CJa%29.zip"
          },
          "added": 1658398199855
        },
        {
          "title": "Banjo-Kazooie",
          "longTitle": "Banjo-Kazooie",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Banjo-Kazooie%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Banjo-Kazooie%20(USA).png",
          "description": "In Banjo-Kazooie a bear named Banjo and a bird named Kazooie live on Spiral Mountain. One day Gruntilda the witch kidnaps Banjo's sister Tooty, to steal her beauty via a transformation device. Banjo and Kazooie set out on a dangerous adventure to rescue Tooty.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Banjo-Kazooie%20%28USA%29.zip"
          },
          "added": 1658396818970
        },
        {
          "title": "Banjo-Tooie",
          "longTitle": "Banjo-Tooie",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Banjo-Tooie%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Banjo-Tooie%20(USA).png",
          "description": "Two years after Banjo & Kazooie rescued Banjo's sister Tooty, the antagonist Gruntilda Winkybunion and her sisters, Mingella and Blobbelda, are planning to restore Gruntilda's body to its original form. Banjo and Kazooie must stop them before it is too late.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Banjo-Tooie%20%28USA%29.zip"
          },
          "added": 1658396832904
        },
        {
          "title": "Beetle Adventure Racing!",
          "longTitle": "Beetle Adventure Racing!",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Beetle%20Adventure%20Racing!%20(USA)%20(En%2CFr%2CDe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Beetle%20Adventure%20Racing!%20(USA)%20(En%2CFr%2CDe).png",
          "description": "Take control of a collection of the latest Volkswagen Beetle \"2.0\" models, from street type to off-road designs, and race across varying road types that will test your speed and endurance!\nFind shortcuts or use nitro boosts to finish first in order to move on to the next track. If the computer AI is to easy for you, battle against a friend in two player race mode or challenge up to 4 people in a special Battle Mode, with added abilities including weapons, from mines and rockets to magical elements, while collecting the flag and finding the exit!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Beetle%20Adventure%20Racing%21%20%28USA%29%20%28En%2CFr%2CDe%29.zip"
          },
          "added": 1658396847732
        },
        {
          "title": "Blast Corps",
          "longTitle": "Blast Corps",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Blast%20Corps%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Blast%20Corps%20(USA).png",
          "description": "Blast Corps is a 1997 video game for the Nintendo 64 developed by Rare and published by Nintendo. Destroy a series of buildings or objects using a variety of unique demolition vehicles, in order to mainly clear a path for trucks carrying defective nuclear missiles.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Blast%20Corps%20%28USA%29.zip"
          },
          "added": 1658396906381
        },
        {
          "title": "Bomberman 64",
          "longTitle": "Bomberman 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Bomberman%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Bomberman%2064%20(USA).png",
          "description": "In the game's opening sequence, a peaceful-looking planet with gardens, rivers, and residential buildings abound is shown. Seconds later, the space pirate, Artemis, drops from the sky with a band of soldiers and orders them to raid the planet. Meanwhile, Altair (the leader of the space pirates), watches from the Black Fortress, using his coveted weapon, the Omni Cube, to completely drain the planet's energy, condemning it to a zombie-like state.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Bomberman%2064%20%28USA%29.zip"
          },
          "added": 1658396919792
        },
        {
          "title": "Castlevania - Legacy of Darkness",
          "longTitle": "Castlevania - Legacy of Darkness",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Castlevania%20-%20Legacy%20of%20Darkness%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Castlevania%20-%20Legacy%20of%20Darkness%20(USA).png",
          "description": "Set in the year 1844, the game stars the man-beast Cornell in his quest to prevent his adoptive sister, Ada, from being used as a sacrifice to resurrect Dracula. The game opens as Cornell arrives at his village, which has been burned to the ground by Dracula's minions. He finds Ada's pendant in a doorway and follows her scent to Dracula's castle.\n\nDuring the course of the game, Cornell comes upon a grand estate owned by the Oldrey family: J.A. Oldrey, the master of the Villa, Mary, his wife, and Henry, their son. Gilles de Rais and Actrise have turned Oldrey Senior into a vampire. At Mary's request, Cornell guides Henry to safety. Later in life, Henry returns to Castlevania to save kidnapped children.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Castlevania%20-%20Legacy%20of%20Darkness%20%28USA%29.zip"
          },
          "added": 1658396938946
        },
        {
          "title": "Conker's Bad Fur Day",
          "longTitle": "Conker's Bad Fur Day",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Conker's%20Bad%20Fur%20Day%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Conker's%20Bad%20Fur%20Day%20(USA).png",
          "description": "The day after his 21st birthday bash, Conker's sporting the worst hangover ever, and he just can't seem to find his way home. Prepare to stagger through randy, raunchy, raucous scenarios crammed full of bad manners, twisted humor, and graphic bodily functions. Unless you're a fan of violence, foul language, and racy innuendo, you'd best steer clear of this one.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Conker%27s%20Bad%20Fur%20Day%20%28USA%29.zip"
          },
          "added": 1658396997314
        },
        {
          "title": "Cruis'n Exotica",
          "longTitle": "Cruis'n Exotica",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Cruis'n%20Exotica%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Cruis'n%20Exotica%20(USA).png",
          "description": "Cruis'n Exotica plays similarly to the previous games in the series, but it adds a PIN system to track progress like San Francisco Rush 2049. The levels take place in exotic locations in the universe, such as Las Vegas, Hong Kong, Atlantis, India, Alaska, The Amazon jungle with dinosaurs, Sahara, Tibet, Korea, Ireland, Holland and the surface of Mars. The game also allows a player to choose a driver visible onscreen during races, including a Martian, a baby, a clown, and a cowboy.\n\nThe objective in this game is to outrun nine different cars in twelve different courses while listening to various kinds of music, and doing different kinds of stunts to gain time.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Cruis%27n%20Exotica%20%28USA%29.zip"
          },
          "added": 1658397015781
        },
        {
          "title": "Deadly Arts",
          "longTitle": "Deadly Arts",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Deadly%20Arts%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Deadly%20Arts%20(USA).png",
          "description": "Walk into the arena, take a bow, and prepare for the most intense combat simulation ever! Over nine controllable fighters are yours to command, complete with an arsenal of face-busting, body-smashing moves. Feel every kick, punch and throw with the RUMBLE PAK feature as you take part in a low down and dirty street fighting tournament!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Deadly%20Arts%20%28USA%29.zip"
          },
          "added": 1658398211138
        },
        {
          "title": "Diddy Kong Racing",
          "longTitle": "Diddy Kong Racing",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Diddy%20Kong%20Racing%20(USA)%20(En%2CFr).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Diddy%20Kong%20Racing%20(USA)%20(En%2CFr).png",
          "description": "Timber the Tiger's parents go on vacation and leave their son in charge of the island they live on, leaving him and his friends to race for fun. Their enjoyment is derailed when an evil, intergalactic, pig wizard named Wizpig arrives at peaceful Timber's Island and attempts to take over after he conquered his own planet's racetracks. He turns the four island's guardians: Tricky the Triceratops, Bubbler the Octopus, Bluey the Walrus and Smokey the Dragon into his henchmen. The only solution available to the island's inhabitants is to defeat Wizpig in an elaborate series of races that involves cars, hovercrafts, and airplanes. Drumstick, the best racer on the island, failed this challenge and was transformed into a frog by Wizpig's black magic. Timber recruits a team of 7 racers: Diddy Kong, the first recruit; Conker (Dixie Kong on DS), recruited by Diddy; Banjo (Tiny Kong on DS), also recruited by Diddy; Krunch, Diddy's enemy who follows after him; Tiptup, an inhabitant of Timber's island; Pipsy, another inhabitant of Timber's island; and Bumper, another inhabitant of Timber's island. They eventually complete all of Wizpig's challenges and confront Wizpig himself to a race and defeat him. Shortly afterwards, Wizpig leaves for his home planet, Future Fun Land. Fearing that Wizpig would again attempt to invade Timber's Island, the islanders travel to Future Fun Land for a second challenge. When Wizpig loses the second race, the rocket he rides on malfunctions and blasts him to a distant planet and peace returns to Timber Island for good.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Diddy%20Kong%20Racing%20%28USA%29%20%28En%2CFr%29.zip"
          },
          "added": 1658397156685
        },
        {
          "title": "Donkey Kong 64",
          "longTitle": "Donkey Kong 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Donkey%20Kong%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Donkey%20Kong%2064%20(USA).png",
          "description": "Donkey Kong 64 was released by Rare & Nintendo for the N64 in 1999 and was the first installment of the Donkey Kong Series in a 3D environment. King K. Rool planned to destroy DK Isles with a large laser called the Blast-O-Matic, but it malfunctions after a crash that puts his floating, mechanical hind face-to-face with DK Isles. To buy some time, he captures Donkey Kong's friends and locks them up, and then steals Donkey Kong's precious hoard of Golden Bananas. As Donkey Kong frees his fellow apes, they set off to recover the bananas and defeat King K. Rool and his army of Kremlings and other evil creatures!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Donkey%20Kong%2064%20%28USA%29.zip"
          },
          "added": 1658397168850
        },
        {
          "title": "Doom 64",
          "longTitle": "Doom 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Doom%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Doom%2064%20(USA).png",
          "description": "Doom 64 is a First Person Shooter developed and released by Midway for the N64 in 1997. After the demonic invasion on Deimos & Phobos was averted, a single, mysterious entity, possessing the ability to resurrect any dead demon it came across, survived the bombardment by the United Aerospace Corporation and recreated the entire demonic horde - stronger and more vicious than ever before, they invade Earth to spread chaos and death! As the solely surviving marine of your troop you only got one mission left - exterminate all the demons and send them back to hell!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Doom%2064%20%28USA%29.zip"
          },
          "added": 1658397175583
        },
        {
          "title": "Dr. Mario 64",
          "longTitle": "Dr. Mario 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Dr.%20Mario%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Dr.%20Mario%2064%20(USA).png",
          "description": "The flu season has come about, and it's Dr. Mario's duty to use his Megavitamins to heal the people of the land. However, Wario, wanting to have the fame that Dr. Mario has, attempts to steal the Megavitamins, but to no avail. Afterwards, Mad Scienstein and Rudy the Clown (from Wario Land 3) steal the Megavitamins, and both Dr. Mario and Wario give chase.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Dr.%20Mario%2064%20%28USA%29.zip"
          },
          "added": 1658397239302
        },
        {
          "title": "Duke Nukem 64",
          "longTitle": "Duke Nukem 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Duke%20Nukem%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Duke%20Nukem%2064%20(USA).png",
          "description": "Duke Nukem's coming to get some! Prepare yourself to become the biggest, baddest, alien basher in the known universe - Duke Nukem; as you blast your way through the streets of LA out to an orbiting station, and onto the moon itself. Bag some aliens with over a dozen hi-tech weapons. 32 levels of non-stop carnage. Run, jump, crawl, swim, and jetpack your way through danger. Big weapons and bigger bosses for a fun-filled fragfest! Four-player, split-screen Dukematch action.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Duke%20Nukem%2064%20%28USA%29.zip"
          },
          "added": 1658397278149
        },
        {
          "title": "Earthworm Jim 3D",
          "longTitle": "Earthworm Jim 3D",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Earthworm%20Jim%203D%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Earthworm%20Jim%203D%20(USA).png",
          "description": "Earthworm Jim is hit by a flying cow that sends him into a coma. Jim awakens within his own mind and discovers he has gone insane. His past villains have entered his mind and if something doesn't happen soon, Jim will be in the coma forever. His super ego has been unleashed within his mind to stop the madness. To restore his sanity he must find the Golden Udders of lucidity. When Jim enters his mind, he finds out that his four mind chambers have been taken over by his worst fears. He must collect Golden Udders to unlock the other three chambers and Green Marbles to unlock the levels within the chamber. Jim defeats four villains who took over his mind chambers, and finally faces the personification of his trauma: Earthworm Kim.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Earthworm%20Jim%203D%20%28USA%29.zip"
          },
          "added": 1658397303003
        },
        {
          "title": "Excitebike 64",
          "longTitle": "Excitebike 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Excitebike%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Excitebike%2064%20(USA).png",
          "description": "The main game features a 20-track season mode. Completing races unlocks more tracks and features. There is a tutorial that teaches players how to play through the 17 different tracks. There are a variety of exhibitions and time trial modes that lets players do more activities other than the main game. A major feature is the track editor, where players can create their own fully functional track and save it into the game. The announcer, Limua, shouts out the tricks and crashes throughout the race. Also featured is the original Exitebike.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Excitebike%2064%20%28USA%29.zip"
          },
          "added": 1658397312834
        },
        {
          "title": "Extreme-G XG2",
          "longTitle": "Extreme-G XG2",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Extreme-G%20XG2%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Extreme-G%20XG2%20(USA).png",
          "description": "This iteration, as with all Extreme-G games, is about futuristic racing: pilots race plasma-powered Tron-like bikes in an intergalactic Grand Prix at speeds that are over 999 mph. It is possible to break the sound barrier in this game, creating a sonic boom. While travelling at supersonic speeds, all game sounds are muted except the sound of the vehicle travelling. If the bike slows down to below supersonic speeds, another sonic boom can be heard and all game sounds will resume. The emphasis is on speed and creative racetrack design, with tracks looping through all three dimensions like roller coasters.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Extreme-G%20XG2%20%28USA%29.zip"
          },
          "added": 1658398295264
        },
        {
          "title": "F-Zero X",
          "longTitle": "F-Zero X",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/F-Zero%20X%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/F-Zero%20X%20(USA).png",
          "description": "Famed SNES racer F-Zero got this N64 update. Gameplay remains essentially unchanged, race in a futuristic racing tournament on tracks levitated miles up in the air, against a selection of devious opponents.\n\nWhere the original had 4 cars to choose from and race against, F-Zero X has no fewer than 30 vehicles all with their own unique strengths and weaknesses, a choice of colours, and customisable power/acceleration ratios for each track. At the beginning you are limited to choosing from 6 cars and 3 tournaments (each featuring 6 tracks each), but in true Nintendo fashion, more cars and tracks are unlocked as you progress through the game.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/F-Zero%20X%20%28USA%29.zip"
          },
          "added": 1658397320570
        },
        {
          "title": "GoldenEye 007",
          "longTitle": "GoldenEye 007",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/GoldenEye%20007%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/GoldenEye%20007%20(USA).png",
          "description": "The name is Bond. James Bond. The famous hero of Ian Fleming's novels returns in this first-person shooter, which is based on the movie of the same name. Agent 007 and his friend Alec Trevalyan (a.k.a. Agent 006) were sent to Soviet Union on a secret mission. But everything goes wrong, James Bond barely escapes, and his friend is presumed dead.\n\nTen years later, a mysterious organization named \"Janus\" appeared. Commanding a new satellite called \"GoldenEye\", the organizations attempts to steal money electronically from banks, deleting all evidence of transfer. It's up to our Agent 007 to venture to Soviet Union once again, and to put an end to Janus' ambitions.\n\nIn this 3D action game, you control James Bond from a first-person perspective, using a variety of weapons (from knuckles to grenade launcher) to eliminate your foes. However, many parts require you to be careful, to stay unnoticed or to snipe guards from distance, since they will react to your presence and alarm their comrades. The game is divided into missions, and in some of them you'll have to perform other tasks besides killing your enemies: disarm bombs, take pictures of important evidence, or avoid killing scientists. The game features a multiplayer mode with a variety of options, and three difficulty levels.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/GoldenEye%20007%20%28USA%29.zip"
          },
          "added": 1658397355604
        },
        {
          "title": "Harvest Moon 64",
          "longTitle": "Harvest Moon 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Harvest%20Moon%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Harvest%20Moon%2064%20(USA).png",
          "description": "The objective of Harvest Moon 64 is to restore and maintain an abandoned farm. The player is initially given a set of tools to use in order to achieve this goal. Along with restoring the farm, there are a number of other side quests that the player may choose to partake in, including training and racing a horse, selling crops, participating in a variety of town festivals as well as random events, falling in love and getting married, collecting recipes, and collecting photographs from various achievements and events.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Harvest%20Moon%2064%20%28USA%29.zip"
          },
          "added": 1658397376613
        },
        {
          "title": "Killer Instinct Gold",
          "longTitle": "Killer Instinct Gold",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Killer%20Instinct%20Gold%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Killer%20Instinct%20Gold%20(USA).png",
          "description": "Killer Instinct Gold rocks the gaming world with its earth-shattering moves and unbelievable graphics. Your battles unfold with lightning-fast action and fluid character animation at 60 frames per second. We faithfully duplicated all the features that made Killer Instinct 2 an arcade hit. We've even thrown in a complete training mode to school you on all the moves! The eye-popping graphics, the explosive hits and jaw-dropping combos make Killer Instinct Gold the only fighting game you'll ever want in your house!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Killer%20Instinct%20Gold%20%28USA%29.zip"
          },
          "added": 1658397393746
        },
        {
          "title": "Kirby 64 - The Crystal Shards",
          "longTitle": "Kirby 64 - The Crystal Shards",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Kirby%2064%20-%20The%20Crystal%20Shards%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Kirby%2064%20-%20The%20Crystal%20Shards%20(USA).png",
          "description": "Kirby's first 3-D adventure is also his Nintendo 64 debut, and it finds the always-versatile hero battling a new enemy called Dark Matter. Dark Matter is after a distant land's powerful crystal, but a young fairy named Ribbon attempts to save it by escaping with the gem to Dream Land. Now the crystal has been broken, and it's scattered around the world. Take control of Kirby and help him journey across six worlds, battling a wide variety of enemies and challenging bosses, as he tries to collect all 100 pieces of the shattered crystal.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Kirby%2064%20-%20The%20Crystal%20Shards%20%28USA%29.zip"
          },
          "added": 1658397402177
        },
        {
          "title": "Mario Golf",
          "longTitle": "Mario Golf",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Mario%20Golf%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Mario%20Golf%20(USA).png",
          "description": "Players can play as a variety of characters including Mario, Luigi, Princess Peach, Yoshi, and Wario. The game also introduces Plum, Sonny, Harry, Maple, and Charlie, new characters created by Camelot specifically for the game. Players can then select from a number of courses which have features adapted to the Nintendo world. Mario Golf is also very easy to play (also known as a \"pick up and play\" game) as it makes golf very simple.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Mario%20Golf%20%28USA%29.zip"
          },
          "added": 1658397520054
        },
        {
          "title": "Mario Kart 64",
          "longTitle": "Mario Kart 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Mario%20Kart%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Mario%20Kart%2064%20(USA).png",
          "description": "Three Two One GO!  The signal light changes and you drop the pedal to the metal.  Take on up to three friends in the split-screen VS games, or race solo in the Mario GP.  Tell your friends to bring it on in the highly competitive Battle mode.  Advanced features allow you to race with your \"Ghost\".  The driving data from your best run appears as a transparent character on the screen.  No longer must you simply race against the clock -- you can actually race against yourself!\n\n* Save your hottest Ghost data to a portable N64 Controller Pak!\n* Collect multiple power-up items!\n* Twenty different courses -- 4 Cups with 4 courses each and 4 special Battle mode courses!\n* Everyone's favorite characters are back and gorgeously rendered, including two new additions, Donkey Kong and Wario!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Mario%20Kart%2064%20%28USA%29.zip"
          },
          "added": 1658397526656
        },
        {
          "title": "Mario Party",
          "longTitle": "Mario Party (USA)",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Mario%20Party%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Mario%20Party%20(USA).png",
          "description": "Every game in the main series has a standard Party Mode in which up to four players play through a board, trying to collect as many stars as possible. In every turn, each player rolls a die and progresses on the board, which usually has branching paths. Coins are primarily earned by performing well in a minigame played at the end of each turn. On most boards, players earn stars by reaching a star space and purchasing a star for a certain amount of coins. The star space appears randomly on one of several pre-determined locations and moves every time a star is purchased, usually occupying a blue space.\nEvery Mario Party contains at least 50 to almost 110 minigames with a few different types. Four-player games are a free-for-all in which players compete individually. In 2-on-2 and 1-on-3 minigames, players compete as two groups, cooperating to win, even though they are still competing individually in the main game. Some minigames in Mario Party are 4-player co-op, even though it doesn't say it. In most situations, winners earn ten coins each.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Mario%20Party%20%28USA%29.zip"
          },
          "added": 1712693688279
        },
        {
          "title": "Mario Party 2",
          "longTitle": "Mario Party 2",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Mario%20Party%202%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Mario%20Party%202%20(USA).png",
          "description": "Mario and the gang are back for another round of Bowser-bashin' party action! Watch as your favorite Nintendo characters don different duds for each of the five all-new Adventure Boards! A slew of new tricks and devices bring new levels of challenge and excitement to board game play. New board maps, new Mini-Games, new action and new surprises means a whole new batch of fun! Get ready to unleash your best Hip Drops, hammer swings and high-flying high junks for another round of frenzied multi-player action!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Mario%20Party%202%20%28USA%29.zip"
          },
          "added": 1712693695693
        },
        {
          "title": "Mario Party 3",
          "longTitle": "Mario Party 3",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Mario%20Party%203%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Mario%20Party%203%20(USA).png",
          "description": "Mario Party 3 is the third and final Mario Party title for the Nintendo 64. A total of eight characters are available to choose from: Mario, Luigi, Princess Peach, Yoshi, Wario, Donkey Kong, and newcomers Waluigi and Princess Daisy. Mario Party 3 features duel maps, in which two players try to lower each other's stamina to zero using non-playable characters such as Chain Chomps. It is the first Mario Party game to feature Luigi's main voice and also it is last Mario game where Princess Daisy appears in a yellow and white dress, and with long hair, as well as the last Mario game (until New Super Mario Bros. Wii) in which Yoshi's \"record-scratching\" voice is used. It is also the first Mario Party game to have multiple save slots.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Mario%20Party%203%20%28USA%29.zip"
          },
          "added": 1658397538810
        },
        {
          "title": "Mario Tennis",
          "longTitle": "Mario Tennis",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Mario%20Tennis%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Mario%20Tennis%20(USA).png",
          "description": "Shots are performed by pressing one, or both, of the two main buttons (A or B), which make the ball spin in different ways. Pressing a button twice strikes the tennis shot with more power and spin. Additionally, pressing the two buttons in a different order can result in a different type of shot altogether, such as a lob or drop shot. all 4 buttons can be pressed at the same time to hit a very powerful smash shot. The longer a button is pressed before contact is made with the ball, the stronger the shot will be. The control system allows players of all levels to become familiar with the mechanics of the game within a very short time, whilst also encouraging advanced players to take advantage of the variety of shots on offer to come up with different strategies for winning points. A total of seven types of shot are possible using only the one main button of the controller.\n\nThese gameplay mechanics were later brought to the other games of the Mario Tennis series in Mario Tennis GBC, Mario Tennis: Power Tour and Mario Power Tennis.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Mario%20Tennis%20%28USA%29.zip"
          },
          "added": 1658397549072
        },
        {
          "title": "Mega Man 64",
          "longTitle": "Mega Man 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Mega%20Man%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Mega%20Man%2064%20(USA).png",
          "description": "Mega Man Volnutt is the game's playable character. Mega Man Volnutt is a \"Digger\", a person in charge of investigating ruins from a flooded Earth. During his journey with his friends, their ship crashes in Kattelox Island, where Mega Man decides to confront pirates who are attacking it to obtain the its hidden treasure. As an action roleplaying game, Mega Man Legends's gameplay is very different from the ones of the original series despite sharing a few elements.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Mega%20Man%2064%20%28USA%29.zip"
          },
          "added": 1658397560243
        },
        {
          "title": "NBA Jam 2000",
          "longTitle": "NBA Jam 2000",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/NBA%20Jam%202000%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/NBA%20Jam%202000%20(USA).png",
          "description": "All-new 2-on-2 JAM mode featuring 50 dunks and awesome special effects! Custom 2-on-2 JAM mode courts, including street court. Authentic 5-on-5 simulation mode with actual team play styles like the Jazz Pick-and-Roll. Jaw-dropping ultra high-rez graphics! Unique signature moves like the crossover dribble. Create your own JAM player. All 29 teams and over 300 NBA superstars! Over 800 all-new motion captured moves by the \"X-Man\" Xavier McDaniel!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/NBA%20Jam%202000%20%28USA%29.zip"
          },
          "added": 1658397620740
        },
        {
          "title": "Paper Mario",
          "longTitle": "Paper Mario",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Paper%20Mario%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Paper%20Mario%20(USA).png",
          "description": "Mario pals around in an all-new action adventure! Mario's back in his first adventure since Super Mario 64, and this time, Bowser's bent on preventing a storybook ending. When Princess Peach is kidnapped, Mario plots to rescue the seven Star Spirits and rid the Mushroom Kingdom of Koopa's cruel cohorts. As he travels from the tropical jungles of Lavalava Island to the frosty heights of Shiver Mountain, he'll meet up with seven all-new companions... and he'll need help from each one or there'll be no happily ever after.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Paper%20Mario%20%28USA%29.zip"
          },
          "added": 1658397652200
        },
        {
          "title": "Perfect Dark",
          "longTitle": "Perfect Dark",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Perfect%20Dark%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Perfect%20Dark%20(USA).png",
          "description": "Step into the Dark... As Carrington Institute's most promising new Agent, Joanna Dark must uncover the truth behind the dataDyne Corporation's recent technological breakthroughs - breakthroughs which could have serious consequences for mankind.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Perfect%20Dark%20%28USA%29.zip"
          },
          "added": 1658397702338
        },
        {
          "title": "Pilotwings 64",
          "longTitle": "Pilotwings 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Pilotwings%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Pilotwings%2064%20(USA).png",
          "description": "Forget about those other flying games.  This is the ultimate flight experience!  Pilotwings 64 carries you off into a vast three-dimensional environment.  Pilot several different vehicles and take in breathtaking sights.  Successfully complete flight tests to earn your flight badge.  Get a high enough score, and you'll get a chance at bonus games such as Cannonball and Sky Diving!  Soar into a wild blue yonder with Pilotwings 64!\n\n* Tons of aerial challenges for you to master!\n* Hop into the seat of a Gyrocopter and fire off some missiles!\n* Strap on a Rocket Belt and check out places like Mt. Rushmore, the Space Needle and the Statue of Liberty!\n* Dangle in silent solitude from a Hang GLider as you soar above tropical jungles and frozen ice floes.\n* Save your progress in memory.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Pilotwings%2064%20%28USA%29.zip"
          },
          "added": 1658397708191
        },
        {
          "title": "Pokemon Snap",
          "longTitle": "Pokemon Snap",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Pokemon%20Snap%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Pokemon%20Snap%20(USA).png",
          "description": "Professor Oak needs your help!\n\nThe Professor has asked you to capture the Wild Pokmon of Pokmon Island on film!  Tour the island in your ZERO-ONE vehicle and snap pictures of Pokmon in their natural habitat.  Wild Pokmon are often camera-shy, so you'll have to use special items to bring them out in the open.  Only the best shots will do for the Professor's Pokmon Report, so sharpen your photography skills and get ready to SNAP!\n\n* The first-ever N64 game to feature the world-famous Pokmon--fully rendered in 3-D!\n* Explore the many environments of Pokmon Island, like the sunny beach, the mysterious caves, and even a red-hot volcano!\n* Many different types of Pokmon inhabit the island.  See how many you can catch on film!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Pokemon%20Snap%20%28USA%29.zip"
          },
          "added": 1658397714972
        },
        {
          "title": "Pokemon Stadium",
          "longTitle": "Pokemon Stadium",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Pokemon%20Stadium%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Pokemon%20Stadium%20(USA).png",
          "description": "Pokmon Stadium does not have a storyline. Progress in the game can only be made by winning \"Cups\" in the Stadium and completing the Gym Leader Castle. When all Cups have been won and the Gym Leader Castle completed, Mewtwo will appear in the sky over the Stadium. Defeating Mewtwo will unlock the much harder Round 2, in which the player must re-challenge the Stadium, Gym Leader Castle, and Mewtwo, in order to complete the game.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Pokemon%20Stadium%20%28USA%29.zip"
          },
          "added": 1658397735906
        },
        {
          "title": "Pokemon Stadium 2",
          "longTitle": "Pokemon Stadium 2",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Pokemon%20Stadium%202%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Pokemon%20Stadium%202%20(USA).png",
          "description": "While Pokmon Stadium 2 does have a storyline, progress in the game can be made by winning Cups in the Stadium and completing the Gym Leader Castle. When all Cups have been won and the Gym Leader Castle completed, the player's Rival will appear. Defeating the Rival will unlock Round 2, in which the player must re-challenge the Stadium, Gym Leader Castle, and the Rival in order to complete the game. But, they have different Pokmon and the difficulty is much higher.\n\nStadium:\nThe player begins by choosing 6 different Pokmon. There are 250 different Pokmon to choose from; including some legendary Pokmon. Pokmon tournaments take place in the Stadium. There are four Cups to participate in. Each round consists of eight battles, and every Cup except the Little and Prime Cup consists of four rounds, named after Pok Balls, that must be cleared to win that Cup.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Pokemon%20Stadium%202%20%28USA%29.zip"
          },
          "added": 1658397753650
        },
        {
          "title": "Rayman 2 - The Great Escape",
          "longTitle": "Rayman 2 - The Great Escape",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Rayman%202%20-%20The%20Great%20Escape%20(USA)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Rayman%202%20-%20The%20Great%20Escape%20(USA)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "description": "Rayman 2 takes place in a world called The Glade of Dreams. An army of Robot Pirates, led by Admiral Razorbeard, invades this world and destroys the Heart of the World, the world core. This greatly weakens the resistance's power and disables Rayman's powers, leading to his capture.\n\nGlobox, a friend of Rayman, is later also captured and put in the same cell as Rayman aboard the Pirates' prison ship. Globox restores one of his powers through a silver lum given to him by Ly, a fairy. Rayman escapes the prison ship, and is separated from Globox again. He learns that in order to stand a chance against the Pirates, he needs to find 4 ancient, magic masks to awaken Polokus, the spirit of the world.[10] He travels through the Glade of Dreams via the Hall of Doors, a magical place linked to various locations in the world, controlled by the ancient Teensies.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Rayman%202%20-%20The%20Great%20Escape%20%28USA%29%20%28En%2CFr%2CDe%2CEs%2CIt%29.zip"
          },
          "added": 1658397791374
        },
        {
          "title": "RR64 - Ridge Racer 64",
          "longTitle": "RR64 - Ridge Racer 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/RR64%20-%20Ridge%20Racer%2064%20(Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/RR64%20-%20Ridge%20Racer%2064%20(Europe).png",
          "description": "Ridge Racer makes its first appearance on a Nintendo console, including all of the fast, pick up and play action previously seen in the series on Playstation and in arcades.\n\nRR64 includes three tracks, each with three variations, making a total of nine tracks to get through. 25 cars are on offer, each with different power and speed abilities.\n\nSingle player and multiplayer modes are included. Beat the clock and get to the finish line first to win.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/RR64%20-%20Ridge%20Racer%2064%20%28USA%29.zip"
          },
          "added": 1658397780572
        },
        {
          "title": "Star Fox 64",
          "longTitle": "Star Fox 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Star%20Fox%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Star%20Fox%2064%20(USA).png",
          "description": "The Lylat system has been invaded!  Join Fox McCloud and his Star Fox team as they fight to save the galaxy from the clutches of the evil Andross.  Travel to many different 3-D worlds.  Battle the enemy in the air and on the ground and listen in as Fox McCloud interacts with a cast of characters.\n\nSee how it feels to feel what you see!  The N64 Rumble Pak controller accessory instantly transmits all the bumps and blasts during the action.  It's a new jolt to your game play experience!\n\n* Four Players compete simultaneously in Vs. mode!\n* Game Pak memory saves the top 10 scores!\n* Outstanding cinema scenes tell the Star Fox saga!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Star%20Fox%2064%20%28USA%29.zip"
          },
          "added": 1658397822040
        },
        {
          "title": "Star Wars - Rogue Squadron",
          "longTitle": "Star Wars - Rogue Squadron",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Star%20Wars%20-%20Rogue%20Squadron%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Star%20Wars%20-%20Rogue%20Squadron%20(USA).png",
          "description": "Set in the fictional Star Wars galaxy and inspired by the Star Wars: X-wing Rogue Squadron comics, the game takes place primarily between events in the films Star Wars and The Empire Strikes Back. The player controls Luke Skywalker, commander of the elite X-wing pilots known as Rogue Squadron. As the game progresses, Skywalker and Rogue Squadron fight the Galactic Empire in sixteen missions across various planets.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Star%20Wars%20-%20Rogue%20Squadron%20%28USA%29.zip"
          },
          "added": 1658397831885
        },
        {
          "title": "Stunt Racer 64",
          "longTitle": "Stunt Racer 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Stunt%20Racer%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Stunt%20Racer%2064%20(USA).png",
          "description": "Set in some unspecified time in the future, the gameplay includes more than simple racing. Older vehicles (primarily those regarded even today as classics) are retrofitted with futuristic engine and turbo technology, in addition to jets mounted to allow the car to perform midair stunts. These stunts, including flips, barrel rolls, etc., allow the player to accumulate cash rewards during races on levitating tracks. Money accumulated is used to purchase new cars, as well as upgraded parts for cars (This increases the value of the vehicle. Oddly enough, this feature is relatively useless because vehicles can't be sold.)",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Stunt%20Racer%2064%20%28USA%29.zip"
          },
          "added": 1658397840541
        },
        {
          "title": "Super Mario 64",
          "longTitle": "Super Mario 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Super%20Mario%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Super%20Mario%2064%20(USA).png",
          "description": "Super Mario 64 is a Jump & Run which was developed and published by Nintendo in 1996 as one of the realease titles for the N64. Set in Princess Peach's Castle, Mario discovers that Bowser has invaded the castle and imprisoned the princess as well as her servants within it, using the power of the castle's 120 Power Stars. Mario searches the castle and discovers paintings which are portals to other worlds where Bowser & his minions guard the stars - encouraged to save Princess Peach, Mario embarks on a journey to recover all the Power Stars & defeat Bowser in his lair!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Super%20Mario%2064%20%28USA%29.zip"
          },
          "added": 1658397846705
        },
        {
          "title": "Super Smash Bros.",
          "longTitle": "Super Smash Bros.",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Super%20Smash%20Bros.%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Super%20Smash%20Bros.%20(USA).png",
          "description": "Smash Bros players seek to knock opposing characters off the stage. In Super Smash Bros., characters have a damage total, represented by a percentage value, which rises as they take damage and can exceed 100%, but maxes out at 999%. As a character's percentage rises, the character can be knocked progressively farther by an opponent's attacks. To KO an opponent, the player must send that character flying off the edge of the stage, which is not an enclosed arena but rather an area with open boundaries, usually a set of suspended platforms.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Super%20Smash%20Bros.%20%28USA%29.zip"
          },
          "added": 1658397859465
        },
        {
          "title": "The Legend of Zelda - Majora's Mask",
          "longTitle": "The Legend of Zelda - Majora's Mask",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Legend%20of%20Zelda%2C%20The%20-%20Majora's%20Mask%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Legend%20of%20Zelda%2C%20The%20-%20Majora's%20Mask%20(USA).png",
          "description": "Link's all-new epic adventure lands him in the mystical world of Termina, where ever-present clocks count down the hours until a menacing moon falls from the sky above.  When his horse and Ocarina are stolen by a strange, masked figure, Link embarks on an urgent quest to solve the mystery of the moon, save the world from destruction, and find his way back to the peaceful land of Hyrule!\n\n* Link transforms before your eyes--Over 20 magical masks give Link powers and abilities he's never had before!  Watch him transform into a hapless Deku child, a mighty Goron hero and a legendary Zora guitarist.\n* Race against time--Characters and events flow with the hours of the day.  Set your own schedule and even alter time itself in a race to stop the moon and save the world!\n* Panoramic environments!  Powered-up action battles!  Fully interactive characters and events!  Experience gorgeous rendered landscapes, swarms of attacking enemies and a deep, engrossing world of wonders with the power of the N64 Expansion Pak.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Legend%20of%20Zelda%2C%20The%20-%20Majora%27s%20Mask%20%28USA%29.zip"
          },
          "added": 1658397467823
        },
        {
          "title": "The Legend of Zelda - Ocarina of Time",
          "longTitle": "The Legend of Zelda - Ocarina of Time",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Legend%20of%20Zelda%2C%20The%20-%20Ocarina%20of%20Time%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Legend%20of%20Zelda%2C%20The%20-%20Ocarina%20of%20Time%20(USA).png",
          "description": "Ganondorf, the evil King of Thieves, is on the move, threatening the peaceful land of Hyrule.  He is determined to steal his way into the legendary Sacred Realm in hopes of harnessing the power of the mythical Triforce.  As the young hero Link, it is your destiny to thwart Ganondorf's evil schemes.  Navi, your guardian fairy, will guide you as you venture through the many regions of Hyrule, from the volcanic caves of Death Mountain to the treacherous waters of Zora's Domain.  Before you complete this epic quest, you'll delve into deadly dungeons, collect weapons of great power and learn the spells you need to conquer the most irresistible force of all-time.\n\n* The immersive storyline and environments draw players into an amazing 3D world.\n* Time travel allows you to play as Link in different stages of his life.\n* New gameplay features include a unique targeting system and 1st and 3rd person perspectives.\n* Up to three games can be saved simultaneously to memory!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Legend%20of%20Zelda%2C%20The%20-%20Ocarina%20of%20Time%20%28USA%29.zip"
          },
          "added": 1658397500426
        },
        {
          "title": "Tony Hawk's Pro Skater 2",
          "longTitle": "Tony Hawk's Pro Skater 2",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Tony%20Hawk's%20Pro%20Skater%202%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Tony%20Hawk's%20Pro%20Skater%202%20(USA).png",
          "description": "Tony Hawk's Pro Skater 2 redefined an already great game. Its addition of stellar new features (like Create-A-Park), and great game-play tweaks (the manual maneuver will be copied for years to come) made it the best installment in a killer series of games. Anyone who has ever skated the Philadelphia level will agree -- this game is a masterpiece of level design. Hell, it's a masterpiece all around. There isn't a bad park or dull moment, just pure gaming nirvana!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Tony%20Hawk%27s%20Pro%20Skater%202%20%28USA%29.zip"
          },
          "added": 1658397871702
        },
        {
          "title": "Tony Hawk's Pro Skater 3",
          "longTitle": "Tony Hawk's Pro Skater 3",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Tony%20Hawk's%20Pro%20Skater%203%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Tony%20Hawk's%20Pro%20Skater%203%20(USA).png",
          "description": "You may not be able to live like the legend, but now you can skate like him. Skate as the legendary Tony Hawk or choose from a dream team of 12 top pro skaters, including old favorites like Lasek, Thomas, Muska, and Steamer, as well as new talent like Gilfberg, Caballero, Koston, and Mullen. Or enjoy full customization abilities with the enhanced Create-a-Skater (now including female skaters) and the Skatepark Editor. Travel from L.A. to Tokyo, Suburbia to Skater's Island performing challenges and meeting goals. New moves include the Revert, which allows you to link vert tricks, and flatland tricks such as Caspers, the Primo, and Handstand Manual. If you're good, you can even unlock hidden pro footage.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Tony%20Hawk%27s%20Pro%20Skater%203%20%28USA%29.zip"
          },
          "added": 1712678888899
        },
        {
          "title": "Turok 2 - Seeds of Evil",
          "longTitle": "Turok 2 - Seeds of Evil",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Turok%202%20-%20Seeds%20of%20Evil%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Turok%202%20-%20Seeds%20of%20Evil%20(USA).png",
          "description": "Turok 2: Seeds of Evil is a first-person shooter video game originally released for the Nintendo 64 in late 1998. A port was released for Windows OS shortly afterwards, in 1999. It is the sequel to the successful Turok: Dinosaur Hunter and was followed by the 2000 entry in the series, Turok 3: Shadow of Oblivion. It is one of the first Nintendo 64 games to allow use with the RAM Expansion Pak and it was known as Violence Killer: Turok New Generation in Japan. A separate game, also titled Turok 2: Seeds of Evil, was released for the Game Boy Color in December 1998. Although set in the same fictional universe, it follows a different storyline.\n \nThe game was well received, garnering an 89% from the review collator Game Rankings for the Nintendo 64 version and labeled as a \"must-buy\" from GameSpot.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Turok%202%20-%20Seeds%20of%20Evil%20%28USA%29.zip"
          },
          "added": 1658397957369
        },
        {
          "title": "Wave Race 64 - Kawasaki Jet Ski",
          "longTitle": "Wave Race 64 - Kawasaki Jet Ski",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Wave%20Race%2064%20-%20Kawasaki%20Jet%20Ski%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Wave%20Race%2064%20-%20Kawasaki%20Jet%20Ski%20(USA).png",
          "description": "Brilliant water effects and excellent control highlight this gorgeous racing pak for the N64. You'll feel the pounding and crashing of the waves as you accelerate into straightaways, whip around pylons and fly off ramps. Don't race alone. Challenge a friend in two-player mode! \r\n\r\n Wave Race 64's nine challenging courses are packed with marker buoys, ramps, mines, hairpin turns, sand spits and more. As you proceed through Championship mode's three difficulty levels, the courses get tougher and your rivals become more aggressive. Things start out easy in the tranquil lagoon of Dolphin Park. Soon, you'll battle the slanting light of Sunset Bay, race through the fog banks of Drake Lake, skip from wavetop to wavetop in the choppy Marine Fortress course, make a late-night run through the neon-lit Twilight City, skid across the ice floes of Glacier Coast and even fight Southern Island's treacherous tide! \r\n\r\nIn Stunt mode, you'll master dazzling tricks while riding through red-and-white rings. You can do a handstand and roll, flip or helicopter your Jet Ski. If you're good enough, you'll even get to ride a dolphin! Test yourself in Time Trial mode.  Wave Race 64 gives you a choice of four riders, each graded according to four capabilities: grip, handling, acceleration, top speed and collision stability. You can customize each rider's Jet Ski and even select how rough the waters are. You can't do that in real life! \r\n\r\nYou can save your circuit progress, best times and custom settings on the Game Pak, then transfer the results to a Controller Pak and play at a friend's house.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Wave%20Race%2064%20-%20Kawasaki%20Jet%20Ski%20%28USA%29.zip"
          },
          "added": 1658397963383
        },
        {
          "title": "Wipeout 64",
          "longTitle": "Wipeout 64",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Wipeout%2064%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Wipeout%2064%20(USA).png",
          "description": "WipEout 64 was released by Psygnosis as a follow-up to the racing game WipEout XL, taking place one year later in 2098. Like in previous installments players control highspeed hovercrafts, pick up weapons to damage the opponents' vehicles and try to finish the race in the first position. In many aspects, the gameplay is pretty similar to its predecessor, such as selection of hovercrafts, visuals or the handling system. Beside new racing tracks the main differences include a Split-Screen Multiplayer Mode (up to four players), Weapon & Super Combo Challenges as well as various Special Weapons for each Team!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Wipeout%2064%20%28USA%29.zip"
          },
          "added": 1658397971326
        },
        {
          "title": "Worms Armageddon",
          "longTitle": "Worms Armageddon",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Worms%20Armageddon%20(USA)%20(En%2CFr%2CEs).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Worms%20Armageddon%20(USA)%20(En%2CFr%2CEs).png",
          "description": "Gameplay is turn-based, with each team moving in sequence (which is determined randomly) across two-dimensional terrain. During a single turn, a team can only move one of its worms (unless the Select Worm item is used). Worms can walk and jump, as well as (when the proper items are available) swing by rope, parachute, teleport, and bungee. The objective of a traditional match is to defeat all opposing teams by killing their worms, although in the campaign some missions have other objectives (such as collecting a specific crate).",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Worms%20Armageddon%20%28USA%29%20%28En%2CFr%2CEs%29.zip"
          },
          "added": 1658397980299
        },
        {
          "title": "Yoshi's Story",
          "longTitle": "Yoshi's Story",
          "type": "n64",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Snaps/output/Yoshi's%20Story%20(USA)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-n64-images/master/Named_Titles/resized/Yoshi's%20Story%20(USA)%20(En%2CJa).png",
          "description": "Baby Bowser has taken the Super Happy Tree and cast a spell on Yoshi's world, turning it into the pages of a picture book.  The only Yoshis not affected by the spell were six hatchlings that were still protected by their shells.  It's up to them to reclaim the Super Happy Tree and restore happiness to the world.  That is the only thing that can break Baby Bowser's Spell!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Nintendo%2064%20(BigEndian)/Yoshi%27s%20Story%20%28USA%29%20%28En%2CJa%29.zip"
          },
          "added": 1658398001996
        }
      ],
      "description": "The Nintendo 64 (N64) is a home video game console developed by Nintendo. The successor to the Super Nintendo Entertainment System, it was released on June 23, 1996, in Japan, on September 29, 1996, in North America, and March 1, 1997, in Europe and Australia. It was the last major home console to use cartridges as its primary storage format until the Nintendo Switch in 2017. As a fifth-generation console, it competed primarily with the Sony PlayStation and the Sega Saturn."
    },
    {
      "title": "GB",
      "items": [
        {
          "title": "Alleyway",
          "longTitle": "Alleyway",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Alleyway%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Alleyway%20(World).png",
          "description": " A basic breakout clone. As Mario, the player must control a \"podship\" and deflect the ball towards the mass of blocks. Hitting a block will either weaken or destroy it. Once all the blocks are destroyed, the level is complete.  Alleyway uses a small number of repeating tables along with twists such as horizontal rotation, periodical vertical drop of the entire mass of blocks, etc.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Alleyway%20%28World%29.zip",
            "colors": 2
          },
          "added": 1650723918995
        },
        {
          "title": "Balloon Kid",
          "longTitle": "Balloon Kid",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Balloon%20Kid%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Balloon%20Kid%20(USA%2C%20Europe).png",
          "description": " Balloon Kid is a unique side-scrolling platform game. You control a little girl who's brother has floated away on a big bunch of balloons. It's up to you to chase after him through 8 treacherous levels.  Instead of the usual jumping from platform to platform, you have a pair of balloons that allow you to float through the level. You must control your height carefully by tapping the 'A' button. Meanwhile, the screen is always scrolling to the left, and you have to keep up.  In addition to the single player adventure, there is a 2-player mode that allows you to compete against a friend via the Game Boy link cable.  In this mode you try to get your opponent to maneuver their balloon kid into the various level hazards.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Balloon%20Kid%20%28USA%2C%20Europe%29.zip",
            "colors": 2
          },
          "added": 1650723927515
        },
        {
          "title": "Castlevania - The Adventure",
          "longTitle": "Castlevania - The Adventure",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Castlevania%20-%20The%20Adventure%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Castlevania%20-%20The%20Adventure%20(USA).png",
          "description": " The Count has risen again desiring revenge even more than blood.  There are four levels of dungeons, chambers and crypts.  At the end of each there is a Primary Evil who is waiting.  Your sole weapon is the Mystic Whip which you can use on enemies or candles to unleash hearts, crystals and crosses of gold.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Castlevania%20-%20The%20Adventure%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1650723938283
        },
        {
          "title": "Castlevania II - Belmont's Revenge",
          "longTitle": "Castlevania II - Belmont's Revenge",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Castlevania%20II%20-%20Belmont's%20Revenge%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Castlevania%20II%20-%20Belmont's%20Revenge%20(USA%2C%20Europe).png",
          "description": " The curse of the Belmont family has struck again in the second Castlevania adventure for the Game Boy.  This game takes place 15 years after the first monochrome adventure.  Christopher's son has disappeared, and 4 mysterious castles have risen out of the fog.  He must travel to each castle and conquer the demons he finds there in order to rescue his son. Perhaps Dracula is not as dead as we thought.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Castlevania%20II%20-%20Belmont%27s%20Revenge%20%28USA%2C%20Europe%29.zip",
            "colors": 2
          },
          "added": 1650723943268
        },
        {
          "title": "Donkey Kong Land",
          "longTitle": "Donkey Kong Land",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Donkey%20Kong%20Land%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Donkey%20Kong%20Land%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "description": " In a modifiication of Donkey Kong Country, Donkey Kong teams up with his buddy Diddy for new adventures and gorilla antics. Facing high-flying pigs, killer bees, and reptilian Kremlings, the simian duo swings back into action on the Game Boy. The two Kongs each have similar abilities when compared to the SNES game. This game isn't exactly a remake of DKC; for instance, there are new levels and enemies, and Candy Kong does not save your game: instead you must collect all four Kong letters.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Donkey%20Kong%20Land%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650723953594
        },
        {
          "title": "Donkey Kong Land 2",
          "longTitle": "Donkey Kong Land 2",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Donkey%20Kong%20Land%202%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Donkey%20Kong%20Land%202%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "description": " Donkey Kong has been captured by the evil Kaptain K. Rool. Diddy and Dixie must make their way through more side-scrolling levels in this Game Boy adventure. Fortunately, they will have plenty of help along the way from their friends.  Like Donkey Kong Land, all the graphics in this game are pre-rendered three dimensional models.  Gameplay is similar also, and consists of much platform jumping and banana collecting.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Donkey%20Kong%20Land%202%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650723958990
        },
        {
          "title": "Donkey Kong Land III",
          "longTitle": "Donkey Kong Land III",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Donkey%20Kong%20Land%20III%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Donkey%20Kong%20Land%20III%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "description": " DK and Diddy Kong have left in search of The Lost World after hearing of a contest to find it on the radio.  This leaves Dixie stuck with minding her baby cousin Kiddy Kong.  Frustrated at this, she decides to take Kiddy with her and find The Lost World before everyone else!  As with Donkey Kong Country 3: Dixie Kong's Double Trouble!, Dixie Kong takes the lead in the third chapter of the Donkey Kong Land series. Dixie can glide using her hair, and carries barrels over her head.  Her partner is the heavy Kiddy, who carries barrels in front of him, and can jump a bit further by somersaulting over platform edges first.  There are also special animal friends that can help the two primates out.  Ellie the Elephant can shoot water at enemies, while Enguarde the Swordfish can glide through water with ease. Squawks the Parrot can fly and spit eggs, and Squitter the Spider can shoot webbing as well as use it to create new platforms.  Each level has Bonus Coins and DK Coins tucked well away in the levels.  While it's possible to gain an ending without these, to complete the game properly, players must seek them all out and unlock levels of the fabled 'Lost World'.  A new feature to the game series is a Time Attack mode - once players finish the game, they can attempt to beat the best time for certain levels.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Donkey%20Kong%20Land%20III%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650723963360
        },
        {
          "title": "Final Fantasy Adventure",
          "longTitle": "Final Fantasy Adventure",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Final%20Fantasy%20Adventure%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Final%20Fantasy%20Adventure%20(USA).png",
          "description": " Set after the event of Secret of Mana, you play a young man who escapes from his captors, only to find a huge world ahead of him. You must roam the land, solving puzzles and defeating enemies to find the young mans destiny in society.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Final%20Fantasy%20Adventure%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1650723974022
        },
        {
          "title": "Final Fantasy Legend II",
          "longTitle": "Final Fantasy Legend II",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Final%20Fantasy%20Legend%20II%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Final%20Fantasy%20Legend%20II%20(USA).png",
          "description": "The second in the Final Fantasy Legend series increases the amount of detail over the original in gameplay and graphics.  The major changes are in the character classes and party members. Similar to FFL, starting a game of Legends II allows you to choose your main character from Humans, Monsters, Mutants and a new class: Robots. From here, you build your party of 4 from the same character classes. During gameplay special side-characters will join you in battle to help defeat certain enemies.   The other improvement is in strategy. In FFL you gain experience points after each battle, increasing strength, etc. In FFLII, you gain different points and abilities depending on how you defeated the enemy. If you win by using a sword, your strength increases. If you use magic, your mana increases. This adds a more strategic approach to defeating enemies.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Final%20Fantasy%20Legend%20II%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1712679133590
        },
        {
          "title": "Final Fantasy Legend III",
          "longTitle": "Final Fantasy Legend III",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Final%20Fantasy%20Legend%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Final%20Fantasy%20Legend%20III%20(USA).png",
          "description": " The final (no joke) Final Fantasy Legend title to grace the Game Boy, FFLIII tells the story of a great flood which destroys cities in the past, present and future.  As you control a party of 4, with a choice of human and mutant classes, and travel back and forth through time collecting pieces of the great ship Talon so as to defeat the enemy that has flooded the lands.  The inclusion of a time travel storyline means that whatever you do in one time frame can have an affect on what happens in another time. Other major changes compared to the original 2 in the series are the ability to mutate your characters further and a change to the upgrade system. Items picked up after battle can be attached to your mutants or humans to turn them into monsters or robots, increasing your parties power and abilities. And although the original system of obtaning experience points after every battle has been removed, its replacement allows you to choose which magic stone each character can use, so they learn that specific magic type and never lose it.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Final%20Fantasy%20Legend%20III%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1650723978277
        },
        {
          "title": "Game & Watch Gallery",
          "longTitle": "Game & Watch Gallery",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Game%20%26%20Watch%20Gallery%20(USA)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Game%20%26%20Watch%20Gallery%20(USA)%20(SGB%20Enhanced).png",
          "description": " The Game and Watch Gallery is Nintendo's first portable compilation featuring their popular line of original 1980's handheld games, featuring the popular \"Mr. Game and Watch\" himself, as well as Mario and friends.  The compilation consists of four popular titles from the Game and Watch Series, each with a \"Classic\" and \"Modern\" version of each game:  1. Octopus: Collects as much treasure as your bag can hold, while avoiding the octopus tentacles that continually swing around you.  In the \"Modern\" version, Mario becomes the diver, and as he collects more treasure, his bag becomes heavier, making it harder to return to the surface.  Mario can also delay the octopus tentacles by throwing treasure at them.  Fire: Position your net to catch the falling people jumping from the burning building.  The \"Modern\" version has Mario and Luigi rescuing Toad, Yoshi and Donkey Kong Jr. from Princess Peach's Castle.  Each falling character has different weights and falling patterns.  Manhole: The player must cover the holes to keep the continually walking people from falling through the manholes and into the sewers.  In the \"Modern\" version, Yoshi must use his tongue to keep Mario, Toad and Donkey Kong Jr. from falling thought the hole, each character having different speeds and patterns.  Oil Panic: The player must collect the dripping blobs of oil before they slip past and ruin everything.  The \"Modern\" version has Bowser dropping oil blobs at Mario, who has to catch the oil and dump it over to Yoshi before the Koopa King gets the best of Mario.  Each mode (Classic and Modern) has two difficulties: Easy and Hard.  The higher score a player gets in each version, new unlockable bonuses will become available via the \"Gallery Corner\".  These bonuses include release dates, pictures and animations which tell in greater detail the history behind Gunpei Yokoi's portable creations.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Game%20%26%20Watch%20Gallery%20%28USA%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650723991873
        },
        {
          "title": "Gargoyle's Quest",
          "longTitle": "Gargoyle's Quest",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Gargoyle's%20Quest%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Gargoyle's%20Quest%20(USA%2C%20Europe).png",
          "description": " The friendly Ghoul Realm was invaded by aliens know as the Destroyers ages ago.  The Destroyers almost captured the Ghoul Realm except a powerful fire came from the sky and destroyed them.  The Realm is threatened again and the secret of the fire must be recovered.  You play Firebrand, a gargoyle who has powerful claws that allow him to cling to walls and other surfaces on a verticle plane.  Firebrand can also hover and fly for awhile with his wings.  Destroy the enemy characters with your firery breath.  The game also contains an adventure type story that is unfolded by interacting with characters from an over-head perspective.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Gargoyle%27s%20Quest%20%28USA%2C%20Europe%29.zip",
            "colors": 2
          },
          "added": 1650724000656
        },
        {
          "title": "Kid Icarus - Of Myths and Monsters",
          "longTitle": "Kid Icarus - Of Myths and Monsters",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Kid%20Icarus%20-%20Of%20Myths%20and%20Monsters%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Kid%20Icarus%20-%20Of%20Myths%20and%20Monsters%20(USA%2C%20Europe).png",
          "description": " An evil force is threatening to invade the Angel Land.  Palutena, the ruler-goddess, sends a warrior named Pit on a quest to prepare for the upcoming attack. Pit must find three ancient treasures and face down the evil force.  Kid Icarus: Of Mythis and Monsters is the Game Boy version of one of Nintendo's classic side scrolling platform/adventure games. Throughout the levels Pit will collect hearts, upgrade his strength, collect treasures, and learn to fly.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Kid%20Icarus%20-%20Of%20Myths%20and%20Monsters%20%28USA%2C%20Europe%29.zip",
            "colors": 2
          },
          "added": 1650724007752
        },
        {
          "title": "Kirby's Dream Land",
          "longTitle": "Kirby's Dream Land",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Kirby's%20Dream%20Land%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Kirby's%20Dream%20Land%20(USA%2C%20Europe).png",
          "description": " Kirby is a an interesting little super-hero.  Although he appears to be a weak little marshmallow, he is actually quite powerful.  He has the ability to suck up his enemies like a vacuum, and then shoot them out at other enemies.  Kirby can also swallow air, allowing him to fly through the air.  In this game, Kirby must save his land from the evil King Dedede.  There are 4 levels of side-scrolling platform action.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Kirby%27s%20Dream%20Land%20%28USA%2C%20Europe%29.zip",
            "colors": 2
          },
          "added": 1650724023333
        },
        {
          "title": "Kirby's Dream Land 2",
          "longTitle": "Kirby's Dream Land 2",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Kirby's%20Dream%20Land%202%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Kirby's%20Dream%20Land%202%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "description": " Blurb:  Nintendo's/Hal Laboratory's lovable Kirby returns for the gameboy! This time the bridges connecting the rainbow bridges have dissapeared and King DeDeDe is to blame as always...or is he? The evil Dark Matter has him under his control and plans to turn Kirby's Dream Land into a dark world, get the fabled rainbow sword and defeat him!  Gameplay consists of a platform game. Kirby is like no other platform character of it's time because he can fly with no power-ups, and he can swallow enemies and get their powers. In addition to that, Kirby can now team up with his friends: Rick the hamster, Kine the fish, and Coo the owl. Each team-up has it's advantages and disadvantages, but Kirby can still swallow enemies, making more different powers available depending on the power/friend combination.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Kirby%27s%20Dream%20Land%202%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650724026338
        },
        {
          "title": "Mega Man - Dr. Wily's Revenge",
          "longTitle": "Mega Man - Dr. Wily's Revenge",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Mega%20Man%20-%20Dr.%20Wily's%20Revenge%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Mega%20Man%20-%20Dr.%20Wily's%20Revenge%20(USA).png",
          "description": " Mega Man is the robot creation of Dr. Light, whose sworn archenemy Dr. Wily spends innumerable games trying to cause trouble with his own odd robots. As Mega Man, you run and jump through futuristic levels, shooting baddies with your blaster, and defeat each of Dr. Wily's Robot Masters. When you defeat them, you can take their ability as your own, which can provide an advantage against other types of evil robots.  In this Game Boy version, Mega Man must fight against Ice Man, Electric Man, Cut Man, and Fire Man. After he defeats those four he battles Quick Man, Heat Man, Bubble Man, and Flash Man. And after that, there's Dr. Wily's Space Node. That sounds like a lot, but passwords will save your progress, if you make it past certain milestones.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Mega%20Man%20-%20Dr.%20Wily%27s%20Revenge%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1650724037278
        },
        {
          "title": "Mega Man II",
          "longTitle": "Mega Man II",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Mega%20Man%20II%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Mega%20Man%20II%20(USA).png",
          "description": "Dr. Wily has broken into the Chronos Institute and stolen a machine called Time Skimmer. According to Dr. Light's calculations, he has used the machine to travel roughly 37,426 years into the future. This can mean nothing good and so Mega Man, along with his dog Rush, sets out to find out more about Dr. Wily's plans.  Mega Man II follows the same formula as its predecessors, meaning the player has to complete a number of side-scrolling, platforming levels that are guarded by different bosses. Mega Man can only shoot left or right, but defeating a boss rewards him with a new weapon. Sometimes he will also find upgrades for Rush, which enable him to use Rush as a trampoline, a submarine or a jet.  While Mega Man II is not a conversion, the first four stages look and play very similar to some levels of Mega Man 2 for the NES. Likewise, levels five to eight resemble some levels of Mega Man 3. The bosses of the first eight stages are also old familiars from Mega Man 2 and 3.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Mega%20Man%20II%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1712679133590
        },
        {
          "title": "Mega Man III",
          "longTitle": "Mega Man III",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Mega%20Man%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Mega%20Man%20III%20(USA).png",
          "description": "Dr. Wily is at it again!  This time, he's set up an oil rig in the middle of the ocean and is drilling deep down to the earth's magma core.  The reason?  He plans to use the incredible power generated to fuel his latest diabolical robot creation!  Of course, only Mega Man can stop him!  Mega Man III follows the tradition of the previous Game Boy games - you must run, jump and blast your way through four boss worlds.  After defeating the four bosses, you will encounter an intermission level.  Once this level is beaten, you face four more bosses, then move on to the final showdown with Dr. Wily.  This is the first Game Boy Mega Man title to introduce the Mega Buster from Mega Man 4 for the NES.  If you hold down the B Button, you'll be able to charge up your cannon for a more powerful shot.  Mega Man III combines Snake Man, Gemini Man, Shadow Man and Spark Man from Mega Man 3 as well as Dust Man, Skull Man, Dive Man and Drill Man from Mega Man 4.  In addition to this, there is a powerful Game Boy exclusive boss called Punk, who uses screw-like weapons to attack.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Mega%20Man%20III%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1712679133590
        },
        {
          "title": "Mega Man IV",
          "longTitle": "Mega Man IV",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Mega%20Man%20IV%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Mega%20Man%20IV%20(USA).png",
          "description": "In the year 20XX...  Dr. Wily has broken into the local Robot Museum and has stolen the bodies of his previously destroyed Robot Masters, and now has brought them back for revenge against Mega Man! What's worse, Wily plans on using a massive laser cannon from outer space to blast Earth to dust!  Mega Man must team up with his friends to stop Dr. Wily before Earth is destroyed!  Mega Man IV contains elements of Mega Man 4 and 5 (NES) and is a Game Boy exclusive.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Mega%20Man%20IV%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1712679133590
        },
        {
          "title": "Mega Man V",
          "longTitle": "Mega Man V",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Mega%20Man%20V%20(USA)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Mega%20Man%20V%20(USA)%20(SGB%20Enhanced).png",
          "description": " Mega Man's greatest adventure has come to the Gameboy!  One peaceful day, Mega Man and his sister Roll are enjoying a quiet stroll through a meadow when they are suddenly attacked by a robot named Terra, who says that he and his soldiers, the StarDroids, are going to conquer the Earth! Mega Man attempts to fight off this new foe, but is quickly beaten by the StarDroid's far superior firepower.  Later, Mega Man awakens to find Dr. Light standing over him, telling him that the StarDroids have almost taken over the world. But thankfully he was quickly able to examine both their firepower and their structures, and was able to modify Mega Man's weapon system into something much more powerful. Mega Man tries this new weapon, and finds that he can now fire his whole fist! Dr. Light dubs this new weapon the \"Mega Arm\"!  Now, armed with the Mega Arm, and a new companion, the robotic cat Tango, Mega Man must destroy the StarDroids and save the planet while he can! The ultimate battle for the Earth begins!\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Mega%20Man%20V%20%28USA%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650724040135
        },
        {
          "title": "Metroid II - Return of Samus",
          "longTitle": "Metroid II - Return of Samus",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Metroid%20II%20-%20Return%20of%20Samus%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Metroid%20II%20-%20Return%20of%20Samus%20(World).png",
          "description": " This is the sequel to the very popular Metroid for the NES.  In Metroid 2, you control Samus Aran in her quest to rid the planet SR388 of the Metroid parasites.  After killing the space pirate Mother Brain in the original Metroid, Samus must take on this adventure to prevent the Metroids from multiplying throughout the galaxy.  Samus soon finds out that the Metroids have mutated, making them much more difficult to defeat.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Metroid%20II%20-%20Return%20of%20Samus%20%28World%29.zip",
            "colors": 2
          },
          "added": 1650724047579
        },
        {
          "title": "Operation C",
          "longTitle": "Operation C",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Operation%20C%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Operation%20C%20(USA).png",
          "description": " Operation C is a Game Boy sequel to the popular NES titles Contra and Super C and is, essentially, a side-scrolling shooter. You play a Rambo-esque character that goes around shooting everything in sight, collecting weapon upgrades and bonuses.  The game introduces the character of Black Viper to the series' oft-jumbled continuity.  Black Viper would later return in the Nintendo DS title, Contra 4, as the primary villain.    The game features only five levels, two of which are played from an overhead perspective similar to Super C.  Operation C is also notable in featuring the upgradable Spread Gun (from three to five shots) and introducing the Hunter Gun.    There is also the occasional platform element such as jumping puzzles, moving platforms etc., and the mandatory end-level boss.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Operation%20C%20%28USA%29.zip",
            "colors": 2
          },
          "added": 1650724055559
        },
        {
          "title": "Pokémon - Blue Version",
          "longTitle": "Pokémon - Blue Version",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Pokemon%20-%20Blue%20Version%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Pokemon%20-%20Blue%20Version%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "description": "You've finally been granted your Pokémon trainer's license. Now, it's time to head out to become the world greatest Pokémon trainer. Starting with just one Pokémon, you need to train hard and vigorously to defeat all 8 gym leaders and the Elite Four.  You start out in a simple town with just one Pokémon. With that Pokémon, it's up to you to battle and catch 5 other Pokémon and train them to become strong enough to defeat your rivals. There are 150 Pokémon to catch, and along the way you can teach your Pokèmon new moves, so every Pokémon is different and unique. Because of this, no Pokémon is the best. You need to maintain a well-balanced team of six Pokémon to defeat any challenge that you face. But remember, there are always other trainers out there willing to prove that they can beat you, so be prepared to battle it out with other trainers as well as the Gym Leaders.  Not only that, but Pokémon Blue allows you to interact with other Pokémon owners. Find a friend with Pokémon Blue, Pokémon Red or Pokémon Yellow: Special Pikachu Edition battle it out with one another. You can trade your creatures with each other, because neither Blue nor Red has all 150 Pokémon. Interaction is essential to becoming a Pokémon master!  It's going to take all you've got to collect 150 Pokémon in this enormous world. Catch them, battle them, trade them. Can you develop the ultimate strategy to defeat the eight Gym Leaders and become the greatest Pokémon Master of all time?  Pokémon Blue differentiates itself from Pokémon Red in that there are different Pokèmon in each game. Common Pokémon in Blue are uncommon in Red, and those in Red may not even show up in Blue. It requires both games to collect all 150 Pokémon and become a Pokémon master.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Pokemon%20-%20Blue%20Version%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1712679133590
        },
        {
          "title": "Pokémon - Red Version",
          "longTitle": "Pokémon - Red Version",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Pokemon%20-%20Red%20Version%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Pokemon%20-%20Red%20Version%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "description": "You've finally been granted your Pokémon trainer's license. Now, it's time to head out to become the world greatest Pokémon trainer. Starting with just one Pokémon, you need to train hard and vigorously to defeat all 8 gym leaders and the Elite Four.  You start out in a simple town with just one Pokémon. With that Pokémon, it's up to you to battle and catch 5 other Pokémon and train them to become strong enough to defeat your rivals. There are 150 Pokémon to catch, and along the way you can teach your Pokèmon new moves, so every Pokémon is different and unique. Because of this, no Pokémon is the best. You need to maintain a well-balanced team of six Pokémon to defeat any challenge that you face. But remember, there are always other trainers out there willing to prove that they can beat you, so be prepared to battle it out with other trainers as well as the Gym Leaders.  Not only that, but Pokémon Red allows you to interact with other Pokémon owners. Find a friend with Pokémon Red, Pokémon Blue or Pokémon Yellow: Special Pikachu Edition battle it out with one another. You can trade your creatures with each other, because neither Red nor Blue has all 150 Pokémon. Interaction is essential to becoming a Pokémon master!  It's going to take all you've got to collect 150 Pokémon in this enormous world. Catch them, battle them, trade them. Can you develop the ultimate strategy to defeat the eight Gym Leaders and become the greatest Pokémon Master of all time?  Pokémon Red differentiates itself from Pokémon Blue in that there are different Pokèmon in each game. Common Pokémon in Red are uncommon in Blue, and those in Blue may not even show up in Red. It requires both games to collect all 150 Pokémon and become a Pokémon master.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Pokemon%20-%20Red%20Version%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650724066908
        },
        {
          "title": "Pokémon - Yellow Version - Special Pikachu Edition",
          "longTitle": "Pokémon - Yellow Version - Special Pikachu Edition",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Pokemon%20-%20Yellow%20Version%20-%20Special%20Pikachu%20Edition%20(USA%2C%20Europe)%20(CGB%2BSGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Pokemon%20-%20Yellow%20Version%20-%20Special%20Pikachu%20Edition%20(USA%2C%20Europe)%20(CGB%2BSGB%20Enhanced).png",
          "description": "Pokémon Yellow, along with Pokémon Blue and Pokémon Red forms the first generation of Pokémon games.  You control a number of fictional animals known as Pokémon and must travel the land using your current Pokémon to defeat and capture more.    There are 151 Pokémon that fall into various types such as fire, water and grass that have a complicated rock-paper-scissors relationship.  You come across a series of town, each of which contains a gym where you must do battle with other Pokémon trainers.  Each gym specializes in a different type of Pokémon.  After beating each gym, you are given a new ability that lets you travel to new areas.  The object of the game is to defeat all eight gym leaders, or ultimately, to catch all the varieties of Pokémon.  Some of them are not actually catchable in Yellow, so you must use the Game Boy link function to trade with friends using Red and Blue to complete your collection.  Pokémon Yellow differs from the other first-generation games because it is based on the Pokémon animé series.  The main character looks like Ash and he starts the game with Pikachu, rather than choosing a Pokémon as in all other games in the series.  Character graphics throughout the game are based on designs from the series and it includes Jesse, James and their Meowth, which the other games do not.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Pokemon%20-%20Yellow%20Version%20-%20Special%20Pikachu%20Edition%20%28USA%2C%20Europe%29%20%28CGB%2BSGB%20Enhanced%29.zip",
            "border": 2,
            "colors": 2
          },
          "added": 1650724072595
        },
        {
          "title": "Super Mario Land",
          "longTitle": "Super Mario Land",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Super%20Mario%20Land%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Super%20Mario%20Land%20(World).png",
          "description": " Super Mario Land is the first Game Boy platformer for Mario.  In Super Mario Land you, as Mario, must save Princess Daisy, rather than Princess Toadstool, from her kidnappers, all the while collecting bonuses (mushrooms and plants that will give you the ability to grow and launch fireballs), coins (a hundred of which will grant you an extra life) and move through bizarre lands, battling the evil minions.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Super%20Mario%20Land%20%28World%29.zip",
            "colors": 2
          },
          "added": 1650724077534
        },
        {
          "title": "Super Mario Land 2 - 6 Golden Coins",
          "longTitle": "Super Mario Land 2 - 6 Golden Coins",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Super%20Mario%20Land%202%20-%206%20Golden%20Coins%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Super%20Mario%20Land%202%20-%206%20Golden%20Coins%20(USA%2C%20Europe).png",
          "description": " Second in the Game Boy's line of Mario games, this one takes the evolutionary steps that Super Mario 3 for the NES took with it's predecessors. New graphics, power-ups, challenges, and a completely original storyline. A bad version of Mario, Wario, takes over Mario's castle and locks him out using 6 golden coins. Mario must search for said coins all over Mario Land to take back his castle and go one-on-one with Wario himself.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Super%20Mario%20Land%202%20-%206%20Golden%20Coins%20%28USA%2C%20Europe%29.zip",
            "colors": 2
          },
          "added": 1650724082637
        },
        {
          "title": "Super R.C. Pro-Am",
          "longTitle": "Super R.C. Pro-Am",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Super%20R.C.%20Pro-Am%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Super%20R.C.%20Pro-Am%20(USA%2C%20Europe).png",
          "description": " Super R.C. Pro-Am is the Game Boy update to Rare's classic radio controlled car game.  4 computer or human racers attempt to get around the track as fast as possible while avoiding hazards like oil slicks and traffic cones.  There are also weapons that you can use to disable the other cars temporarily.  The goal of the game is to collect the letter icons found on the tracks that spell \"NINTENDO.\"  Collecting the letters allows you to move up to faster cars and eventually win the championship.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Super%20R.C.%20Pro-Am%20%28USA%2C%20Europe%29.zip",
            "colors": 2
          },
          "added": 1650724092715
        },
        {
          "title": "Tetris",
          "longTitle": "Tetris",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Tetris%20(World)%20(Rev%201).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Tetris%20(World)%20(Rev%201).png",
          "description": " This version of Tetris is one of many conversions of the famous block-stacking game, and was included with the Game Boy upon its release in several territories. The goal is to place pieces made up of four tiles in a ten-by-twenty well, organizing them into complete rows, which then disappear. As rows are cleared, the pace of the game increases and the background changes, and the game ends if the stack reaches the top of the well.  The game is very similar to Nintendo's own NES version of the game, featuring the same \"Type A\" endless and \"Type B\" set-clear modes. The game also features a 2-player versus mode that can be played with two Game Boys, two copies of Tetris, and a Game Boy link cable. Clearing lines in this mode will cause the other player's stack to rise, with the goal being to make the other player lose.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Tetris%20%28World%29%20%28Rev%201%29.zip",
            "colors": 2
          },
          "added": 1650724128699
        },
        {
          "title": "Tetris Plus",
          "longTitle": "Tetris Plus",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Tetris%20Plus%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Tetris%20Plus%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "description": " This is yet another updated version of Tetris which was released for PlayStation, Saturn, and Game Boy.  This version features Classic mode, Puzzle mode, Versus mode, and Edit mode.  In Puzzle mode, you must save the professor who climbs his way to the top.  In order to do that, you must clear the blocks away and bring him to the bottom.  Versus mode brings you head to head with another player.  Edit mode allows you to create and save your own custom levels.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Tetris%20Plus%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650724134084
        },
        {
          "title": "Trip World",
          "longTitle": "Trip World",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Trip%20World%20(Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Trip%20World%20(Europe).png",
          "description": " Thanks to the Maita Flower, Trip World is at peace. It is being protected by an old Shabubu, a member of a race of bunny-like beings. The flower grows on the holy mountain known as Mount Dubious. However, one day the old Shabubu is attacked and the Maita Flower is stolen. Trip World becomes disarranged and its inhabitants don't stop quarreling with each other. But there is one hope in the form of the old Shabubu's grandson, Yacopu (also spelled Yakopoo).  The player controls Yacopu through five stages in this side-scrolling platformer. The young Shabubu's trademark ability is to shapeshift into different forms. In his normal form, he is able to walk and jump as well as to kick enemies, Yacopu's primary way of attacking. Unlike in many other platformers, many of the enemies don't harm you on contact and push your character around instead. However, certain foes might attack you after you damaged them, while others do so from the beginning.  At almost any time, the player can change to the flying or fish form. Flying Yacopu is able to reach places he wouldn't otherwise be able to, while the fishy hero is best suited for underwater areas. You also come across power-ups that temporarily give your character new powers, such as stunning enemies with seeds, bouncing around as a ball, or attacking with an extended tail. Beneath the mountain, settings in the game include a jungle, the ocean, and a castle. In each stages, you have to defeat a boss at the end. Eventually, you will encounter the one who stole the Maita Flower. The flower must be retrieved in order to save peace in Trip World.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Trip%20World%20%28Europe%29.zip",
            "colors": 2
          },
          "added": 1650724224214
        },
        {
          "title": "Wario Land - Super Mario Land 3",
          "longTitle": "Wario Land - Super Mario Land 3",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Wario%20Land%20-%20Super%20Mario%20Land%203%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Wario%20Land%20-%20Super%20Mario%20Land%203%20(World).png",
          "description": " Wario, Mario's greedy rival from Super Mario Land 2: 6 Golden Coins, is more determined than ever to get a castle after being booted out of Mario's.  He has heard that the pirates of Kitchen Island have a golden Statue of Princess Toadstool that's worth a king's ransom!  Wario figures that if he swipes the Princess' statue for himself, as well as all the other loot the pirates have hoarded, he'll have more than enough cash for a castle that's even bigger and better than Mario's!  Wario Land: Super Mario Land 3 is different from previous games in the series in that you control the brutish and greedy Wario.  Even when small, Wario can break most bricks with a punch, and some enemies are so weak to him that they'll just be pushed aside!  Wario has a body slam attack that he can use to destroy enemies, and he can also pick them up and throw them at his foes.  If that wasn't enough, there are three different power ups that Wario can find. The Bull Hat lets him plough through bricks in a single hit, ram his horns into the ceiling to hold onto it, and butt stomp to stun all enemies.  The Jet Hat allows him to fly horizontally for a short period of time, and increases his jump height and speed.  Finally, the Dragon Hat allows him to breathe a long stream of fire for a short period of time.  To suit Wario's greedy nature, the game revolves around money.  Throughout the stages, you can earn coins by grabbing them floating in the air, punching them out of bricks, or by body slamming into foes and then collecting the coins they drop.  You can also find hidden treasures buried deep within some levels by finding a key and then throwing it at the skull door to unlock it.  Once Wario reaches the end of a level, he usually needs to pay a toll to get the end-of-level door to open.  Pressing Up on the Control Pad and B pulls out a coin worth 10 coins, which you must throw at the door.  Once the door opens, you can exit and the level is complete.  Before you finish each level, you can choose to play a mini-game that doubles or halves the amount of coins you have, with a 50/50 chance.  You get three tries, and can choose to leave whenever you wish...so don't get too greedy!\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Wario%20Land%20-%20Super%20Mario%20Land%203%20%28World%29.zip",
            "colors": 2
          },
          "added": 1650724149680
        },
        {
          "title": "Wario Land II",
          "longTitle": "Wario Land II",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Wario%20Land%20II%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Wario%20Land%20II%20(USA%2C%20Europe)%20(SGB%20Enhanced).png",
          "description": " Seeking revenge on Wario after he stole their treasure in Wario Land: Super Mario Land 3, special agents from the Black Sugar Gang of Kitchen Island sneak into Wario's newly built castle, steal back the treasure, and leave the castle and the surrounding area a mess. As Wario, you must clean the place up and take back what you now call your own.  In a change from the original Wario Land, Wario is now immortal, to a certain point. Instead of dying when hit by an enemy, Wario loses the coins he collected along his travels in each level. And he can also turn into other Warios. For example, if he is hit by a bee, Wario puffs up into a giant ball of air, and floats up to the top of the level. Only when hit by a sharp object will he return to normal. There are other types, like Fire Wario and Zombie Wario, and each can have its advantages, like getting to other areas otherwise unreachable, or they can halt your progress.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Wario%20Land%20II%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29.zip",
            "colors": 2
          },
          "added": 1650724154713
        },
        {
          "title": "Wave Race",
          "longTitle": "Wave Race",
          "type": "gb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Snaps/output/Wave%20Race%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gb-images/master/Named_Titles/resized/Wave%20Race%20(USA%2C%20Europe).png",
          "description": " Wave Race for the Game Boy is an aquatic racing game. You control a personal water craft around courses that are marked out by buoys in the circuit mode. In the slalom mode, you must maneuver through several sets of gates floating on the water.  Gameplay is viewed from an overhead perspective. There are four racers in each race. They can be controlled either by human players or by very tough AI controlled players.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy/Wave%20Race%20%28USA%2C%20Europe%29.zip",
            "colors": 2
          },
          "added": 1650724157308
        }
      ],
      "longTitle": "Nintendo Game Boy",
      "description": "The Game Boy is an 8-bit handheld game console developed and manufactured by Nintendo. The first handheld in the Game Boy family, it was first released in Japan on April 21, 1989. The console was released in North America later the same year, then in Europe in late 1990. It was designed by the same team that developed the Game & Watch series of handheld electronic games and several Nintendo Entertainment System games: Satoru Okada, Gunpei Yokoi, and Nintendo Research & Development 1.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/7/7c/Game-Boy-FL.png",
      "backgroundPixelated": false,
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/gb-thumb.png?raw=true"
    },
    {
      "title": "GBC",
      "items": [
        {
          "title": "Bomberman Quest",
          "longTitle": "Bomberman Quest",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Bomberman%20Quest%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Bomberman%20Quest%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "Carrying with him all the monsters he captured on his last mission, Bomberman is headed for his home planet Bomber. However, all of a sudden someone steals all of his four rocket engines and he is forced to make an emergency landing. After having woken up from the crash he realises that not only are his engines gone, but all of the monsters have escaped!\n\nBomberman Quest is a top down action RPG in which Bomberman has to traverse four different lands and speak to the natives to aid him in his quest to reclaim the engines and monsters. In true action RPG fashion, you pick up upgrades along the way, such as bomb parts and skills acquired from defeating monsters.\n\nThere is also a battle mode where two players can duke it out via linked Game Boy Colors.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Bomberman%20Quest%20%28USA%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727046707
        },
        {
          "title": "Dragon Warrior III",
          "longTitle": "Dragon Warrior III",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Dragon%20Warrior%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Dragon%20Warrior%20III%20(USA).png",
          "description": "Dragon Warrior III is the concluding game of the first Dragon Quest/Dragon Warrior trilogy, and its story takes us back to the time period of the legendary Erdrick (also known as Loto), the ancestor of the first game's hero. You are the son of a powerful warrior Ortega, skillful in physical combat and spellcasting. Your father went out to fight the evil Baramos, who is responsible for the appearance of monsters in your region, and never returned. You are sent by the king on a quest to continue your father's brave deeds and to defeat Baramos.\n\nDragon Warrior III is a top-down role-playing game where you travel around the overworld, caves, castles, cities and other locations while battling random encounters, buying equipment, and talking to people. You and your party members receive experience when they beat up monsters and level up with enough experience, increasing their stats. The game features a day/night cycle - as you travel, day slowly changes to night and vice versa; shops are typically closed at night. \n\nYou begin with control of just the main character but can quickly recruit three more members to your party. During the game you can choose to drop your current characters and recruit others at any time. The recruitable characters are divided into six classes: soldier, fighter, merchant, goof-off, pilgrim and wizard.\n\nThe game has a unique job system, giving you the ability to switch your hired characters' classes after they have achieved at least level 20 in their base class. Characters can switch to the other beginning classes, as well as the sage class, which is not available at the beginning. When a character switches classes, they lose all earned experience points, and half of their stats, but retain all of the abilities of the previous class. In this way, you can create powerful combination characters that are able to cast spells and fight effectively.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Dragon%20Warrior%20III%20%28USA%29.zip"
          },
          "added": 1650727057522
        },
        {
          "title": "Dragon Warrior Monsters",
          "longTitle": "Dragon Warrior Monsters",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Dragon%20Warrior%20Monsters%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Dragon%20Warrior%20Monsters%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "In Dragon Warrior Monsters you enter Terry's Wonderland, a magical place of kings, monsters and magic spells. Make monsters your allies to fight your way through the dangers in the quest. You set out into the Wonderland to rescue your kidnapped sister.\n\nEach monster has individual abilities to be used in battle. You train then, and breed them to build up your monsters collection. With 1000's of possible monster combinations - can you breed the rarest and most powerful monsters?\n\nThe game takes place in its own little fantasy roleplay world, and is somewhat alike to Pokemon in style.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Dragon%20Warrior%20Monsters%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727063690
        },
        {
          "title": "Dragon Warrior Monsters 2 - Cobi's Journey",
          "longTitle": "Dragon Warrior Monsters 2 - Cobi's Journey",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Dragon%20Warrior%20Monsters%202%20-%20Cobi's%20Journey%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Dragon%20Warrior%20Monsters%202%20-%20Cobi's%20Journey%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "Like the original Dragon Warrior Monsters for the Game Boy Color, Dragon Warrior Monsters 2: Cobi's Journey combines themes and characters from Enix' long-running Dragon Warriors series with aspects of gameplay established in the amazingly popular Pok�mon handheld games. Player take the role of Cobi as he embarks on a new adventure of monster collecting, training, and combat. A concurrently released companion game, Dragon Warrior Monsters 2: Tara's Adventure, follows the similar adventures of Cobi's sister.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Dragon%20Warrior%20Monsters%202%20-%20Cobi%27s%20Journey%20%28USA%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1712679267371
        },
        {
          "title": "Dragon Warrior Monsters 2 - Tara's Adventure",
          "longTitle": "Dragon Warrior Monsters 2 - Tara's Adventure",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Dragon%20Warrior%20Monsters%202%20-%20Tara's%20Adventure%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Dragon%20Warrior%20Monsters%202%20-%20Tara's%20Adventure%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "Like the original Dragon Warrior Monsters for the Game Boy Color, Dragon Warrior Monsters 2: Tara's Adventure combines themes and characters from Enix' long-running Dragon Warrior series with aspects of gameplay established in the amazingly popular Pok�mon handheld games. Players take on the role of Tara as she embarks on a new adventure of monster collecting, training, and combat. A concurrently released companion game, Dragon Warrior Monsters 2: Cobi's Journey, follows the similar adventures of Tara's brother.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Dragon%20Warrior%20Monsters%202%20-%20Tara%27s%20Adventure%20%28USA%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1712679267371
        },
        {
          "title": "Game & Watch Gallery 2",
          "longTitle": "Game & Watch Gallery 2",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Game%20%26%20Watch%20Gallery%202%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Game%20%26%20Watch%20Gallery%202%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "Game & Watch Gallery 2 features 5 original Game & Watch games from the 1980's plus 5 re-mixed versions in full color featuring a cast of characters from the Mario World (incl. Mario, Peach, Yoshi, Luigi and more). The game included are:\n\nParachute: Catch the falling characters to gain points.\n\nHelmet: Run around the arena while trying to avoid falling objects.\n\nChef: Catch falling pieces of food and cook them to feed to customers.\n\nVermin: Move around the arena and whack the characters to climb out of the holes in the ground.\n\nDonkey Kong: The original Donkey Kong game, where as Mario you must stop Donkey Kong and save the Princess by collecting keys and dodging falling obstacles thrown by Donkey Kong.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Game%20%26%20Watch%20Gallery%202%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727071844
        },
        {
          "title": "Game & Watch Gallery 3",
          "longTitle": "Game & Watch Gallery 3",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Game%20%26%20Watch%20Gallery%203%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Game%20%26%20Watch%20Gallery%203%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "The third in a series of re-creations of classic Nintendo Game & Watch games. Both original and modern (featuring Mario and the Nintendo gang) versions of the following games are available to choose from:\n\nTurtle Bridge: Pass on items over a bridge while not falling over.\n\nEgg: Catch falling eggs and cook them just right while not dropping them or over cooking.\n\nGreen House: Protect your plants from hungry bugs.\n\nMario Brothers: Help Mario and Luigi pass items over conveyor belts while dodging Bowsers attacks.\n\nDonkey Junior: As Donkey Kong Jr. you must collect the keys while evading enemies to save Donkey Kong.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Game%20%26%20Watch%20Gallery%203%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727074619
        },
        {
          "title": "Harvest Moon 2 GBC",
          "longTitle": "Harvest Moon 2 GBC",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Harvest%20Moon%202%20GBC%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Harvest%20Moon%202%20GBC%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "After much acclaim for your past farming accomplishments (as part of the previous Harvest Moon titles on GBC), you are asked by a young girl to help her get her farm up and running. The farm, situated on an island, needs plenty of work, so you need all your skills to get things working correctly.\n\nYour many tasks range from tending to the farm animals, keeping an eye on the budget while purchasing goods (food, water, mechanical items, etc) at the local stores, and so forth. And although the main aim is to build and maintain the farm, there are plenty of opportunities to take care of yourself (go to the movies, buy pets, find a girlfriend/boyfriend).",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Harvest%20Moon%202%20GBC%20%28USA%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1712679267371
        },
        {
          "title": "Harvest Moon 3 GBC",
          "longTitle": "Harvest Moon 3 GBC",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Harvest%20Moon%203%20GBC%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Harvest%20Moon%203%20GBC%20(USA).png",
          "description": "After much acclaim for your past farming accomplishments (as part of the previous Harvest Moon titles on GBC), you are asked by a young girl to help her get her farm up and running. The farm, situated on an island, needs plenty of work, so you need all your skills to get things working correctly.\n\nYour many tasks range from tending to the farm animals, keeping an eye on the budget while purchasing goods (food, water, mechanical items, etc) at the local stores, and so forth. And although the main aim is to build and maintain the farm, there are plenty of opportunities to take care of yourself (go to the movies, buy pets, find a girlfriend/boyfriend).\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Harvest%20Moon%203%20GBC%20%28USA%29.zip"
          },
          "added": 1650727091619
        },
        {
          "title": "Harvest Moon GBC",
          "longTitle": "Harvest Moon GBC",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Harvest%20Moon%20GBC%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Harvest%20Moon%20GBC%20(USA)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Harvest%20Moon%20GBC%20%28USA%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727086750,
          "description": "Harvest Moon GB is the second game in the Story of Seasons series of video games, and was developed and published by Victor Interactive Software. Harvest Moon GB is the first portable Harvest Moon game, developed for the Game Boy. A Game Boy Color version was released later under the name Harvest Moon GBC.\n\nBefore beginning, the player is able to choose whether to play as a girl or a boy, and name themselves. At the beginning of the game, the player's deceased grandfather visits them as a spirit and asks them to take over his farm. He implores them to succeed him as a Ranch Master, stating he will check on the player at the end of each winter to determine his progress. The player must develop their farm by growing and selling crops, and raising livestock to reach this goal. If the farm meets his criteria for you to be a Ranch Master, the player may receive extra tools; if he thinks the farm does not, a game over is given."
        },
        {
          "title": "Mario Golf",
          "longTitle": "Mario Golf",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Mario%20Golf%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Mario%20Golf%20(USA).png",
          "description": "Mario Golf on Game Boy Color isn't a straight port of the N64 game - it's a totally different game in its own right. It is a combination of a golf game and an RPG. As in an RPG, you choose your character at the beginning, with various strengths and weaknesses, and throughout the course of the game, your character gains experience points through winning matches or playing mini-games. Experience points can be distributed to various skills, such as putting, which makes it easier for you to do well. There are quite a few skills, and no two characters you can create will play in exactly the same way.\n\nAlthough the story mode is the main part of the game, there's quite a few other modes to keep you busy, like Tournament, Match Game, Stroke, Training, and the two-player mode via link cable. It comes with a dictionary of all the golf terms you'll need, and an extensive range of statistics on your player.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Mario%20Golf%20%28USA%29.zip"
          },
          "added": 1650727132983
        },
        {
          "title": "Mario Tennis",
          "longTitle": "Mario Tennis",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Mario%20Tennis%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Mario%20Tennis%20(USA).png",
          "description": "Mario Tennis for the Game Boy Color is a much different experience than its N64 effort. In addition to the core gameplay found in the N64 version, the GBC version features an RPG-style world that allows you to work your way up through the ranks at the Royal Tennis Academy.\n\nThe main mode, Mario Tour, has you starting off as a Rookie with low stats. By completing training programs and defeating other students, you're able to gain experience points, which allow you to boost your tennis stats. When you're not playing tennis, you can spend time wandering the Academy grounds: talking to other students, or just taking in the sights and sounds.\n\nIn addition to the main game, there's also an exhibition mode (singles or doubles) for quick-play. And, if you get tired of playing the computer, the game supports the Game Link Cable for play against a friend.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Mario%20Tennis%20%28USA%29.zip"
          },
          "added": 1650727141692
        },
        {
          "title": "Pokémon - Crystal Version",
          "longTitle": "Pokémon - Crystal Version",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Pokemon%20-%20Crystal%20Version%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Pokemon%20-%20Crystal%20Version%20(USA).png",
          "description": "Pokémon Crystal is an upgrade of the parallel Pokémon Gold and Pokémon Silver. The game is to its parallels like Pokémon Yellow: Special Pikachu Edition  and Pokémon Emerald are to to theirs. This means that the storyline, characters, and gameplay are basically the same, only there have been made several updates and changes to make this game more exciting and fun.\n\n1. The player can now play as both a male and a female character.\n2. The Pokémon Suicune plays a much bigger role, both as a character and a Pokémon. The player will meet it earlier and be able to catch it easier at Tin Tower as well as encountering it three times before.\n3. New characters: Eusine, The Poké Seer and more.\n4. New interface, a sign will appear at the bottom of the screen when entering a new area showing where the player is (route, area).\n5. New animations: Pokémon move when entering combat screen.\n6. New Pokémon locations, exceptions, moves and additions.\n\nThese are among the most significant changes to the upgrade version. However, the player will find many new details in the gameplay and interface that makes the game more exciting.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Pokemon%20-%20Crystal%20Version%20%28USA%29.zip"
          },
          "added": 1650727148268
        },
        {
          "title": "Pokémon - Gold Version",
          "longTitle": "Pokémon - Gold Version",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Pokemon%20-%20Gold%20Version%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Pokemon%20-%20Gold%20Version%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "Pokémon Gold takes place several years after Red, Blue and Yellow, and puts the user into a brand new world, Johto. The gameplay is very similar to the previous games, but with several improvements. These include new functions for the player's PokéGear, a Pokédex that can now be sorted by evolution type, and, of course, new Pokémon. Once again, the objective of the game is to become the champion trainer, and try to complete the Pokédex. To become the champion, the player battles Gym Leaders to obtain various badges. Completing the Pokédex requires a different set of actions, and involves capturing wild Pokémon, battling various trainers to obtain money, and trading Pokémon with NPC's and other owners of Pokémon games.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Pokemon%20-%20Gold%20Version%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727153261
        },
        {
          "title": "Pokémon - Silver Version",
          "longTitle": "Pokémon - Silver Version",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Pokemon%20-%20Silver%20Version%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Pokemon%20-%20Silver%20Version%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "Pokémon Silver takes place 3 years after Red, Blue and Yellow, and puts the user into a brand new world, Johto. The gameplay is very similar to the previous games, but with several improvements. These include new functions for the player's PokéGear, a Pokédex that can now be sorted by evolution type, and, of course, new Pokémon. \n\nOnce again, the objective of the game is to become the champion trainer, and try to complete the Pokédex. To become the champion, the player battles Gym Leaders to obtain various badges. Completing the Pokédex requires a different set of actions, and involves capturing wild Pokémon, battling various trainers to obtain money, and trading Pokémon with NPC's and other owners of Pokémon games.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Pokemon%20-%20Silver%20Version%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1712679267371
        },
        {
          "title": "Pokémon Pinball",
          "longTitle": "Pokémon Pinball",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Pokemon%20Pinball%20(USA%2C%20Australia)%20(Rumble%20Version)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Pokemon%20Pinball%20(USA%2C%20Australia)%20(Rumble%20Version)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "Discover a whole new way to catch Pokémon -- by playing pinball! Hit the targets with your Poke Ball to catch and evolve Pokémon. The better you do, the more rare Pokémon you'll find. Every Pokémon you catch is automatically recorded in your Pokedex. See if you can catch all 150!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Pokemon%20Pinball%20%28USA%2C%20Australia%29%20%28Rumble%20Version%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727158296
        },
        {
          "title": "Pokémon Trading Card Game",
          "longTitle": "Pokémon Trading Card Game",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Pokemon%20Trading%20Card%20Game%20(USA%2C%20Australia)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Pokemon%20Trading%20Card%20Game%20(USA%2C%20Australia)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "A Gameboy version of the popular card game, in the Pokémon Trading Card Game, your character must collect cards, form decks, and battle gym leaders for better cards.  Secret cards can be unlocked by defeating certain characters.  Includes card types: grass, fire, water, electric, fighting, psychic, colorless, trainer cards, and of course, energy cards.  Special cards include surfing or flying pikachu, and others.\n\nThe game starts our with a mini-tutorial which lets the main character learn the game, and lets him or her choose the starter deck.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Pokemon%20Trading%20Card%20Game%20%28USA%2C%20Australia%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727162640
        },
        {
          "title": "Rayman",
          "longTitle": "Rayman",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Rayman%20(USA)%20(En%2CFr%2CDe%2CEs%2CIt%2CNl).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Rayman%20(USA)%20(En%2CFr%2CDe%2CEs%2CIt%2CNl).png",
          "description": "When a villain known only as Mr. Dark appears, trouble brews in Rayman's world.  Mr. Dark captures the Toons - source of light and Rayman's friends.  With no more light, evil creatures begin to roam, making the world unsafe for everyone.  Its up to you, as Rayman, to free your friends and put an end to Mr. Dark's dastardly schemes!\n\nRayman is side-scrolling platformer starring the titular Rayman, a big-nosed chap with no arms or legs.  Rayman can jump and use his hair to hover for a short period of time.  He can also attack by throwing his fists, or winding up his fists for a more powerful punch.  He can occasionally find special power ups that grant him unlimited flying power, giving him the ability to navigate through tricky mazes.\n\nThe Game Boy Color version of Rayman remains true to the spirit of the original game, but makes some notable changes, particularly when compared to the original's bright, vibrant graphics.  Some levels have also been modified or simplified from the original release.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Rayman%20%28USA%29%20%28En%2CFr%2CDe%2CEs%2CIt%2CNl%29.zip"
          },
          "added": 1650727172768
        },
        {
          "title": "Shantae",
          "longTitle": "Shantae",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Shantae%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Shantae%20(USA).png",
          "description": "The small fishing village of Scuttle Town is a quiet and peaceful place, thanks mainly to its protector, the self-appointed Shantae the genie.\n\nWhen lady-pirate Risky Boots receives information that a  treasure chest is found at the village, she quickly makes her way there for an invasion to take the cash. As Shantae, you must use the genies magical abilities, her hair whipping attacks and dance moves to stop the pirate and her gang from taking the treasure and leaving the town in ruins.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Shantae%20%28USA%29.zip"
          },
          "added": 1650727188961
        },
        {
          "title": "Tetris DX",
          "longTitle": "Tetris DX",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Tetris%20DX%20(World)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Tetris%20DX%20(World)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "Tetris DX requires you to place different shaped blocks which fall from the top of the screen, along the bottom of the screen to make up a line which then disappears from the screen. Watch out though, if you cant fill the gaps and the blocks fill up to the top of the screen the game is over.\n\nTetris DX features 4 one-player modes and two-player mode using the Universal Game Link Cable.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Tetris%20DX%20%28World%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727191978
        },
        {
          "title": "The Legend of Zelda - Link's Awakening DX",
          "longTitle": "The Legend of Zelda - Link's Awakening DX",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Legend%20of%20Zelda%2C%20The%20-%20Link's%20Awakening%20DX%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Legend%20of%20Zelda%2C%20The%20-%20Link's%20Awakening%20DX%20(USA%2C%20Europe)%20(SGB%20Enhanced)%20(GB%20Compatible).png",
          "description": "This game is a color-enhanced update to Link's Awakening. The game is also compatible with the original Game Boy.\n\nThis is virtually the same game as the original with a few exceptions. There are photo points around the game where Link can get his photo taken and then print it out on the Game Boy Printer.\n\nAlso when played on the Game Boy Color, there is a new secret color-themed dungeon.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Legend%20of%20Zelda%2C%20The%20-%20Link%27s%20Awakening%20DX%20%28USA%2C%20Europe%29%20%28SGB%20Enhanced%29%20%28GB%20Compatible%29.zip"
          },
          "added": 1650727107943
        },
        {
          "title": "The Legend of Zelda - Oracle of Ages",
          "longTitle": "The Legend of Zelda - Oracle of Ages",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Legend%20of%20Zelda%2C%20The%20-%20Oracle%20of%20Ages%20(USA%2C%20Australia).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Legend%20of%20Zelda%2C%20The%20-%20Oracle%20of%20Ages%20(USA%2C%20Australia).png",
          "description": "A pall of Darkness has fallen over the land of Labrynna. The Sorceress of Shadows has captured the Oracle of Ages and is using her power to do evil. Link has been summoned to help and must travel back and forth in time to stop the Sorceress of Shadows and return Labrynna to its former glory.\n\nLink the game with The Legend of Zelda: Oracle of Seasons. Friends and enemies will travel between the 2 games, and passwords can upgrade and transport items!\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Legend%20of%20Zelda%2C%20The%20-%20Oracle%20of%20Ages%20%28USA%2C%20Australia%29.zip"
          },
          "added": 1650727112117
        },
        {
          "title": "The Legend of Zelda - Oracle of Seasons",
          "longTitle": "The Legend of Zelda - Oracle of Seasons",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Legend%20of%20Zelda%2C%20The%20-%20Oracle%20of%20Seasons%20(USA%2C%20Australia).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Legend%20of%20Zelda%2C%20The%20-%20Oracle%20of%20Seasons%20(USA%2C%20Australia).png",
          "description": "The land of Holodrum is dying and Onox, the General of Darkness, has imprisoned the Oracle of Seasons and is destroying the land. So link must master the changing of the seasons to help him restore Holodrum to prosperity.\n\nLink the game with The Legend of Zelda: Oracle of Ages. Friends and enemies will travel between the 2 games; passwords can upgrade and transport items!\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Legend%20of%20Zelda%2C%20The%20-%20Oracle%20of%20Seasons%20%28USA%2C%20Australia%29.zip"
          },
          "added": 1650727119618
        },
        {
          "title": "Wario Land 3",
          "longTitle": "Wario Land 3",
          "type": "gbc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Snaps/output/Wario%20Land%203%20(World)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gbc-images/master/Named_Titles/resized/Wario%20Land%203%20(World)%20(En%2CJa).png",
          "description": "During a joyride in his biplane, the engine blows and Wario crashes into the woods. It's here where he finds a hidden cave with a magic Music box. Before he can say \"I hate Mario\", the box pulls him inside and into a room with a dark figure, who strikes a deal with him. Find all of the missing Music boxes and he can leave. And any treasure he finds he can keep. \n\nMuch like Wario Land 2, Wario can't die from any attacks by the enemy. However he can change form after certain attacks, which can both help and halt his progress in each level. New forms of Wario include Invisible Wario and Ball of Yarn Wario (an un-controllable ball of yarn, with Wario inside).\n\nAlso, basic attacks such as swimming and the butt stomp don't become available to Wario until after completing a certain amount of levels, meaning you have to go back to completed levels to access other areas full of loot.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Color/Wario%20Land%203%20%28World%29%20%28En%2CJa%29.zip"
          },
          "added": 1650727214638
        }
      ],
      "longTitle": "Nintendo Game Boy Color",
      "description": "The Game Boy Color (commonly abbreviated as GBC) is a handheld game console, manufactured by Nintendo, which was released in Japan on October 21, 1998 and to international markets that November. It is the successor to the Game Boy and is part of the Game Boy family.\n\nThe GBC features a color screen rather than monochrome, but it is not backlit. It is slightly thicker and taller and features a slightly smaller screen than the Game Boy Pocket, its immediate predecessor in the Game Boy line. As with the original Game Boy, it has a custom 8-bit processor made by Sharp that is considered a hybrid between the Intel 8080 and the Zilog Z80. The American English spelling of the system's name, Game Boy Color, remains consistent throughout the world.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/3/35/Nintendo-Game-Boy-Color-FL.png",
      "backgroundPixelated": false,
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/gbc-thumb.png?raw=true"
    },
    {
      "title": "GBA",
      "items": [
        {
          "title": "Castlevania - Aria of Sorrow",
          "longTitle": "Castlevania - Aria of Sorrow",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Castlevania%20-%20Aria%20of%20Sorrow%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Castlevania%20-%20Aria%20of%20Sorrow%20(USA).png",
          "description": "Normally a solar eclipse isn't a dangerous event, but for Soma Cruz being sucked through a portal and into Dracula's castle during one will turn his day into a total nightmare. As Soma you must venture through the castle and find a way out. As you do so, you will discover the true meaning behind the event, and why Dracula has risen yet again.\n\nAlthough set in the future, all of the weapons and hazards are the same or similar to those seen in past Castlevania titles. Soma can find or buy weapons of all types such as swords, spears, and axes. Through his mysterious power of Dominance Soma can take the souls of his enemies and use their powers as his own, providing passive stat boosts, powerful magic, or even summoning them forth to fight on his behalf. Dracula's castle is a single continuous building, and as Soma's power of Dominance grows and he acquires more monster souls to power abilities he can bypass obstacles that were previously insurmountable. Players can link up with a friend's copy of Castlevania: Aria of Sorrow to trade souls between them.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Castlevania%20-%20Aria%20of%20Sorrow%20%28USA%29.zip"
          },
          "added": 1650724281969
        },
        {
          "title": "Castlevania - Circle of the Moon",
          "longTitle": "Castlevania - Circle of the Moon",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Castlevania%20-%20Circle%20of%20the%20Moon%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Castlevania%20-%20Circle%20of%20the%20Moon%20(USA).png",
          "description": "Count Dracula has been resurrected and evil will reign supreme unless he is stopped.  As Nathan Graves, you'll hunt down the Count and use your whip and a variety of special items to destroy his minions.  Battle your way through Dracula's castle and rid the world of his evil once again.\n\nCastlevania: Circle of the Moon is the first of the series to be based on the action/RPG structure of Castlevania:Symphony of the Night rather than the level-based action style of all previous Castlevania games. Dracula's castle is a single continuous building, and as Nathan discovers artifacts within it he gains new abilities that allow him to explore more of it. While Nathan can only use his Killer Whip as a weapon, he can find and equip different kinds of armor and accessories that change his stats. Unique to this entry in the series is the Dual Set-up System, where a combination of two cards will give Nathan unique magical abilities. For example, equipping a fire type card with a whip card will give the Killer Whip a fire attribute, while equipping it with a summon card will let Nathan summon a fire demon to attack onscreen enemies.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Castlevania%20-%20Circle%20of%20the%20Moon%20%28USA%29.zip"
          },
          "added": 1650724316899
        },
        {
          "title": "Double Dragon Advance",
          "longTitle": "Double Dragon Advance",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Double%20Dragon%20Advance%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Double%20Dragon%20Advance%20(USA).png",
          "description": "After a global nuclear war leaves the world in ruins, gangs emerge as the new elite by seizing control of the city. Twin brothers Jimmy and Billy Lee survive the cataclysmic event with their martial arts abilities intact, but Billy's girlfriend is soon kidnapped by mysterious thugs. Now it's up to you to guide both brothers through different stages filled with enemies and boss characters. Whether you play solo or cooperatively with a friend, you must master new techniques and weapons to find the girl and defeat the bad guys.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Double%20Dragon%20Advance%20%28USA%29.zip"
          },
          "added": 1650724326825
        },
        {
          "title": "F-Zero - GP Legend",
          "longTitle": "F-Zero - GP Legend",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/F-Zero%20-%20GP%20Legend%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/F-Zero%20-%20GP%20Legend%20(USA).png",
          "description": "The F-Zero series expands another level. The high speed racer has a new set of tracks to master, through  Grand Prix, Time Trial and Challenge modes. You can take to the track as the famed Captain Falcon or many other heroes of the series, including a new character naming himself Rick Wheeler. Four players can also compete against each other using one game pak.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/F-Zero%20-%20GP%20Legend%20%28USA%29.zip"
          },
          "added": 1650726914177
        },
        {
          "title": "F-Zero - Maximum Velocity",
          "longTitle": "F-Zero - Maximum Velocity",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/F-Zero%20-%20Maximum%20Velocity%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/F-Zero%20-%20Maximum%20Velocity%20(USA%2C%20Europe).png",
          "description": "The third title in the F-Zero series is more like the SNES original then the N64 sequel in terms of presentation. Fly around 20 detailed futuristic tracks with many vehicles to choose from. 4 players can play a simple track with the same vehicle using one cart and 4 Game Boy Advances, or play a more detailed 4 player mode with 4 cartridges and GBA's.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/F-Zero%20-%20Maximum%20Velocity%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650726920012
        },
        {
          "title": "Final Fantasy IV Advance",
          "longTitle": "Final Fantasy IV Advance",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Final%20Fantasy%20IV%20Advance%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Final%20Fantasy%20IV%20Advance%20(USA).png",
          "description": "This classic adventure includes 18 towns and castles, dozens of magical spells, and hundreds of monsters, weapons, and items to help players on their quests. The gamefeatures the astounding music, challenging adventures, and interesting storyline that are the hallmarks of the Final Fantasy franchise. Additional gameelements also have been added to enhance the gameBoy Advance version.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Final%20Fantasy%20IV%20Advance%20%28USA%29.zip"
          },
          "added": 1650724388878
        },
        {
          "title": "Final Fantasy V Advance",
          "longTitle": "Final Fantasy V Advance",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Final%20Fantasy%20V%20Advance%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Final%20Fantasy%20V%20Advance%20(USA).png",
          "description": "Final Fantasy V is a fantasy role-playing video game developed and published by Square in 1992. It is the fifth main installment of the Final Fantasy series. The game first appeared only in Japan on Nintendo's Super Famicom (known internationally as the Super Nintendo Entertainment System). It has been ported with minor differences to Sony's PlayStation and Nintendo's Game Boy Advance. An original video animation produced in 1994 called Final Fantasy: Legend of the Crystals serves as a sequel to the events depicted in the game. It was released for the PlayStation Network on April 6, 2011, in Japan. An enhanced port of the game, with new high-resolution graphics and a touch-based interface, was released for iPhone and iPad on March 28, 2013, for Android on September 25 the same year and for Windows on September 24, 2015. A more enhanced re-release of the game as part of the Final Fantasy Pixel Remaster series, was released on November 10, 2021 for Android, iOS, and Windows, and for Nintendo Switch and PlayStation 4 on April 19, 2023.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Final%20Fantasy%20V%20Advance%20%28USA%29.zip"
          },
          "added": 1712679759882
        },
        {
          "title": "Final Fantasy VI Advance",
          "longTitle": "Final Fantasy VI Advance",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Final%20Fantasy%20VI%20Advance%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Final%20Fantasy%20VI%20Advance%20(USA).png",
          "description": "This title are more than a simple port of the SNES classic — every aspect of the games has been reviewed and enhanced. Additionally, a host of brand-new elements has been seamlessly merged with the original game, providing unexpected surprises for longtime fans. With new dungeons, new job classes, and other exciting features, both old-school players and newcomers can enjoy this genre-defining FINAL FANTASY title in a portable format.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Final%20Fantasy%20VI%20Advance%20%28USA%29.zip"
          },
          "added": 1650724438011
        },
        {
          "title": "Fire Emblem",
          "longTitle": "Fire Emblem",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Fire%20Emblem%20(USA%2C%20Australia).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Fire%20Emblem%20(USA%2C%20Australia).png",
          "description": "The rightful heir to the throne of Rikea is finally returning home after many years lost to her people. But before the celebrations can begin, you must first guard her through the evil lands that await before you, by taking charge of an elite group of soldiers possessing skills unlike any other.\n\nThe first Fire Emblem title to be released outside of Japan includes an all new quest featuring a selection of warriors, wizards and dragons (both good and bad). Battle through turn-based environments and choose your moves wisely, as those you lose during a fight will be lost for good.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Fire%20Emblem%20%28USA%2C%20Australia%29.zip"
          },
          "added": 1650724499252
        },
        {
          "title": "Fire Emblem - The Sacred Stones",
          "longTitle": "Fire Emblem - The Sacred Stones",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Fire%20Emblem%20-%20The%20Sacred%20Stones%20(USA%2C%20Australia).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Fire%20Emblem%20-%20The%20Sacred%20Stones%20(USA%2C%20Australia).png",
          "description": "Eight hundred years ago, the sacred stones were used to defeat the Demon King. Sealing his soul inside the stones, peace was brought to the continent of Magvel and five nations were built around the power of the sacred stones.\n\nHowever, after 800 years of peace, the Grado Empire suddenly attacks his longtime ally Renais and a larger war threatens to break out. The player takes on the role of Prince Ephraim and his sister Princess Erika, two of the few survivors of Grado's attack, following their different paths through the story. \n\nGameplay in Fire Emblem: The Sacred Stones is similar to its predecessors or the Advance Wars games. The player controls several different units in tactical turn-based battles. \n\nThere are many different classes ranging from knights, thieves and archers to paladins, wyvern riders, great knights and more. As in RPGs, units receive experience points for their actions and may choose to upgrade to a different class once they reach a high enough level.\n\nA key element in Fire Emblem's gameplay are the three different types of weapons and magic. One type of weapon or magic is always strong against one, and weak against another type.\n\nDuring battles, it is also possible to visit stores to buy equipment, or houses to gain hints.\n\nSometimes neutral units will also participate in battle. They can be convinced to join the player's army if the right person talks to them.\n\nUnlike most similar games, when a unit dies in battle it is impossible to revive it.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Fire%20Emblem%20-%20The%20Sacred%20Stones%20%28USA%2C%20Australia%29.zip"
          },
          "added": 1650724659184
        },
        {
          "title": "Game & Watch Gallery 4",
          "longTitle": "Game & Watch Gallery 4",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Game%20%26%20Watch%20Gallery%204%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Game%20%26%20Watch%20Gallery%204%20(USA).png",
          "description": "A collection of classic Nintendo Game & Watch titles, as well as GBA exclusive updates.\n\nGames include Donkey Kong 3, Boxing, Fire Attack, Mario Cement Factory & Rainshower, plus extra games that can only be opened if you beat the high score for each game.\n\nEach game has two modes, one which emulates the original Game & Watch LCD format and an updated version which features improved graphics, slight gameplay changes and a host of Mario characters.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Game%20%26%20Watch%20Gallery%204%20%28USA%29.zip"
          },
          "added": 1650724769920
        },
        {
          "title": "Golden Sun",
          "longTitle": "Golden Sun",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Golden%20Sun%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Golden%20Sun%20(USA%2C%20Europe).png",
          "description": "Golden Sun is the first original role-playing gamefor the gameBoy Advance to appear in the U.S. And despite perhaps a too-familiar story line, Golden Sun's jaw-dropping graphics, deep magic system, and unique multiplayer arena mode truly show that the gameBoy Advance is capable of a serious RPG.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Golden%20Sun%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650724802983
        },
        {
          "title": "Gradius Galaxies",
          "longTitle": "Gradius Galaxies",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Gradius%20Galaxies%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Gradius%20Galaxies%20(USA).png",
          "description": "The classic franchise Gradius comes to gameBoy® Advance! An evil force has taken over a distant star system and only you can stop them. Soar through a myriad of enemy attack units and blow them to bits using ultra powerful weapons including photon missiles and laser beams.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Gradius%20Galaxies%20%28USA%29.zip"
          },
          "added": 1650724889963
        },
        {
          "title": "Harvest Moon - Friends of Mineral Town",
          "longTitle": "Harvest Moon - Friends of Mineral Town",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Harvest%20Moon%20-%20Friends%20of%20Mineral%20Town%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Harvest%20Moon%20-%20Friends%20of%20Mineral%20Town%20(USA).png",
          "description": "As with previous entries in the series, Harvest Moon tells the story of a young farmer who must build and develop a farm, including the crops and animals. Along with this, you must make sure that the farm makes a profit in order to purchase new items and farm equipment to keep the farm afloat for as long as possible.\n\nOther tasks await you, such as teaching your faithful dog tricks, visiting the local village and making friends. As your farm builds, you also get the opportunity to recruit helpers to get more done around the farm, and fall in love.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Harvest%20Moon%20-%20Friends%20of%20Mineral%20Town%20%28USA%29.zip"
          },
          "added": 1650725168964
        },
        {
          "title": "Kirby - Nightmare in Dream Land",
          "longTitle": "Kirby - Nightmare in Dream Land",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Kirby%20-%20Nightmare%20in%20Dream%20Land%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Kirby%20-%20Nightmare%20in%20Dream%20Land%20(USA).png",
          "description": "When King Dedede steals the Star Rod, it's up to Kirby to recover the fragmented pieces from Triple D's underlings and restore power to the Fountain of Dreams. Kirby: Nightmare in Dream Land is an action-packed side-scrolling adventure chock full of awesome copy abilities and fast-moving gameplay. Kirby may not look tough, but he can float over dangerous obstacles, eat enemy projectiles, and copy his enemies' abilities. You can use these skills in the single-player story mode or multiplayer mode with up to three friends using the Game Boy Advance Link cable.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Kirby%20-%20Nightmare%20in%20Dream%20Land%20%28USA%29.zip"
          },
          "added": 1650725276082
        },
        {
          "title": "Kirby & The Amazing Mirror",
          "longTitle": "Kirby & The Amazing Mirror",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Kirby%20%26%20The%20Amazing%20Mirror%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Kirby%20%26%20The%20Amazing%20Mirror%20(USA).png",
          "description": "Kirby stars in his first four-player simultaneous adventure!  There's trouble in neighboring Mirror World, but when Kirby goes off to help, he's attacked by a shadowy Meta Knight and split into four colored versions of himself!  The four Kirbies set off for Mirror World on an exciting new adventure!\n\nKirby & The Amazing Mirror is set out in a Metroid-style manner.  The game features one sprawling overworld that players gradually uncover as they progress through the game.  It's also possible to discover hidden treasure chests that show the player the overworld layouts, life bar extensions, different colors for Kirby, and unlockable music and sound effects.\n\nAmazing Mirror uses the familiar 'suck-in and copy' mechanic of other Kirby games, but the addition of having four players able to co-operate simultaneously can make the game easier or more difficult - depending on the situation.  There are also three mini-games to play via the Game Boy Advance Single-Cart Multiplayer feature.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Kirby%20%26%20The%20Amazing%20Mirror%20%28USA%29.zip"
          },
          "added": 1650725217276
        },
        {
          "title": "Magical Quest Starring Mickey & Minnie",
          "longTitle": "Magical Quest Starring Mickey & Minnie",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Magical%20Quest%20Starring%20Mickey%20%26%20Minnie%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Magical%20Quest%20Starring%20Mickey%20%26%20Minnie%20(USA).png",
          "description": "Pluto has been dognapped by the evil Emperor Pete, and its up to Mickey to save him. Mickey must find his way through six levels, split into sub-levels and boss battles, to get Pluto back. \n\nAlong the way, he can throw blocks and items at enemies or jump on their heads, and later on he can also make use of costumes. The wizard robe allows Mickey to shoot magic bolts; the fireman costume allows Mickey to use the fire hose to push blocks into enemies and out of the way; and the commando uniform allows Mickey to climb around levels using a hook.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Magical%20Quest%20Starring%20Mickey%20%26%20Minnie%20%28USA%29.zip"
          },
          "added": 1650725460756
        },
        {
          "title": "Mario & Luigi - Superstar Saga",
          "longTitle": "Mario & Luigi - Superstar Saga",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mario%20%26%20Luigi%20-%20Superstar%20Saga%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mario%20%26%20Luigi%20-%20Superstar%20Saga%20(USA).png",
          "description": "Princess Toadstool's voice has been stolen by Cackletta and replaced with explosives!  Mario and Luigi with the help of Bowser follow her trail to the neighboring Beanbean Kingdom, where they interact with a new cast of characters in their quest to stop her.\n\nBattle gameplay further continues the Super Mario RPG and Paper Mario traditions.  Rather than merely making selections from a menu as in many RPGs, timing your button presses correctly can inflict or defend from extra damage.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Mario%20%26%20Luigi%20-%20Superstar%20Saga%20%28USA%29.zip"
          },
          "added": 1650725539216
        },
        {
          "title": "Mario Golf - Advance Tour",
          "longTitle": "Mario Golf - Advance Tour",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mario%20Golf%20-%20Advance%20Tour%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mario%20Golf%20-%20Advance%20Tour%20(USA).png",
          "description": "Similarly to Mario Golf for Game Boy Color, Mario Golf: Advance Tour allows players to create two of their own custom characters and experience golf by progressing through an RPG-like story.  The ultimate goal of the story is to make your player climb through the ranks of the various clubs, ultimately reaching the goal of the elite Mushroom Kingdom golfers, such as Princess Peach, Donkey Kong, and of course, Mario.\n\nIt's possible to earn experience for either character either by playing through rounds of golf, or by successfully completing various types of mini-games and contests that help you hone your putting, swing, and other golf skills.  Distributing experience is more difficult now, as you now have to make sure that both characters are sufficiently levelled up so that you can succeed in doubles matches as well as your solo play.\n\nAdvance Tour also links up to Mario Golf: Toadstool Tour for the Nintendo GameCube.  By doing this, you can earn even more experience points by transferring your characters over and playing the various modes in Toadstool Tour.  Of course, it's also possible to link up to another copy of Advance Tour for GBA multiplayer too.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Mario%20Golf%20-%20Advance%20Tour%20%28USA%29.zip"
          },
          "added": 1650725611596
        },
        {
          "title": "Mario Kart - Super Circuit",
          "longTitle": "Mario Kart - Super Circuit",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mario%20Kart%20-%20Super%20Circuit%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mario%20Kart%20-%20Super%20Circuit%20(USA).png",
          "description": "This GBA conversion brings together elements of both Super Mario Kart (the original SNES classic) and the N64 sequel, Mario Kart 64.\n\nMuch like the SNES title, you can collect coins lying on the tracks to boost the speed of your kart.\n\nAll of the characters from MK64 are included (Mario, Luigi, Toad, Donkey Kong, Bowser, Wario, Peach, and Yoshi)\n\nNo Kart game is complete without a multiplayer mode. In this case, four can play classic and battle modes using either one cartridge and four GBA's or four cartridges and four GBA's for the full list of characters to choose from.\n\nWeapons include the classic green and red shells and the purple spiked shell.\n\n20 new tracks, using elements from both past titles.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Mario%20Kart%20-%20Super%20Circuit%20%28USA%29.zip"
          },
          "added": 1650725639167
        },
        {
          "title": "Mario Party Advance",
          "longTitle": "Mario Party Advance",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mario%20Party%20Advance%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mario%20Party%20Advance%20(USA).png",
          "description": "It's a portable party on your gameBoy Advance! Mario Party Advance takes all the fun of the home console gameand puts it in your hands. All-new mini-games and a host of Professor E. Gadd's incredible Gaddgets -- unique trinkets, toys, detectors and tricks like the Lip Disguise-o-matic that let you play tricks on your friends, test your compatibility and much more. Discover the 60 mini-games as you play through the single-player gameboards. Earn coins as you play the mini-games, and use those coins to unlock Gaddgets you can use with your friends. Use your Gaddgets to take the gameinto the real world. Place your finger on the Finger X-Ray to see what's hidden inside, or use the Compatibility Meter to see how well you and your friends match up.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Mario%20Party%20Advance%20%28USA%29.zip"
          },
          "added": 1650725673940
        },
        {
          "title": "Mario Tennis - Power Tour",
          "longTitle": "Mario Tennis - Power Tour",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mario%20Tennis%20-%20Power%20Tour%20(USA%2C%20Australia)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mario%20Tennis%20-%20Power%20Tour%20(USA%2C%20Australia)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "description": "Mario Tennis: Power Tour is the portable sibling of Mario Power Tennis on the GameCube. \n\nAside from the standard spins, drop shots, lobs, and smashes available in a standard game of tennis, Power Tour adds power shots into the mix. Offensive power shots can be used to end a long-rally in your favor, while defensive power shots can help you make an impossible save.\n\nFollowing in the footsteps of other portable Mario Sports titles, Power Tour adds a bit of RPG-like features into the mix of standard tennis action. Story mode has you guide either one of the rookie players, Max or Tina, through the ranks of competitors in the academy on their way to the Island Open Championships. Winning matches against opponents in the academy rewards you with points you can use to raise your stats. Matches can either be in one-on-one Singles matches, or you can team up with an AI-controlled partner in Doubles. \n\nIn between matches, you are also given the opportunity to explore the academy and participate in training courts and several mini-games, such as weight-lifting, to further build up your stats. Exhibition modes are also available for quick pick-up-and-play gameplay. Multiplayer modes include Singles and Doubles matches where you can choose from the stock cast of characters or you can also opt to use your powered up characters from the Story mode against each other.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Mario%20Tennis%20-%20Power%20Tour%20%28USA%2C%20Australia%29%20%28En%2CFr%2CDe%2CEs%2CIt%29.zip"
          },
          "added": 1650725767432
        },
        {
          "title": "Mario vs. Donkey Kong",
          "longTitle": "Mario vs. Donkey Kong",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mario%20vs.%20Donkey%20Kong%20(USA%2C%20Australia).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mario%20vs.%20Donkey%20Kong%20(USA%2C%20Australia).png",
          "description": "After years of apparent goodwill, Mario and Donkey Kong are at it again--this time, on gameBoy Advance. Donkey Kong has stolen all the Mini-Mario toys from the Mario Toy Co., and now it's up to Mario to hunt down his longtime nemesis and retrieve the pilfered goods. As Mario, you must race through challenging levels while finding keys and releasing Mini Marios before time runs out. Along the way, you'll master new moves that can help you overcome new puzzles.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Mario%20vs.%20Donkey%20Kong%20%28USA%2C%20Australia%29.zip"
          },
          "added": 1650725812460
        },
        {
          "title": "Mega Man Zero",
          "longTitle": "Mega Man Zero",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mega%20Man%20Zero%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mega%20Man%20Zero%20(USA%2C%20Europe).png",
          "description": "It's your mission to help the exiled scientist Ciel discover the source of a new reploid energy! Play as Mega Man's pal Zero, the reploid from the Mega Man X series turned good by the infectious Sigma Virus and 100 years of sleep. Conquer your adversaries and find the energy source... or risk ultimate defeat. It's up to you to defend good from the destructive powers in the universe.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Megaman%20Zero%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650725862875
        },
        {
          "title": "Mega Man Zero 2",
          "longTitle": "Mega Man Zero 2",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mega%20Man%20Zero%202%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mega%20Man%20Zero%202%20(USA).png",
          "description": "Mega Man Zero 2 is a video game developed by Inti Creates and published by Capcom for the Game Boy Advance (GBA) handheld game console. It is the second video game in the Mega Man Zero subseries of Mega Man video games.\n\nThe game is set one year following the events of Mega Man Zero, and follows the same basic format as its predecessor, being a side-scrolling, platform action game. Once again, players take control of the Reploid known as Zero, and lead him through various levels in the battle against the forces of Neo Arcadia.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Megaman%20Zero%202%20%28USA%29.zip"
          },
          "added": 1712679759882
        },
        {
          "title": "Mega Man Zero 3",
          "longTitle": "Mega Man Zero 3",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mega%20Man%20Zero%203%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mega%20Man%20Zero%203%20(USA).png",
          "description": "It's the third chapter in the Mega Man Zero action adventure series for the gameBoy Advance. Featuring a new customization system, you can now equip Zero, with a combination of chips that will affect both his attributes and abilities, allowing you to adapt him to different challenges. Among his other new skills, Zero will now have weapon called the recoil rod. Now be jumps at double his normal height. These new skills will allow our hero to march into Arcadia to defeat the evil Omega single-handedly ... Or will they?",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Megaman%20Zero%203%20%28Europe%29.zip"
          },
          "added": 1650725938921
        },
        {
          "title": "Mega Man Zero 4",
          "longTitle": "Mega Man Zero 4",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Mega%20Man%20Zero%204%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Mega%20Man%20Zero%204%20(USA).png",
          "description": "Mega Man Zero 4 is a video game developed by Inti Creates and published in 2005 by Capcom for the Game Boy Advance (GBA) handheld. It is the fourth and final installment of the Mega Man Zero subseries of the Mega Man franchise and is set several months after the events of Mega Man Zero 3. The European version featured a completely different logo, which was also used on Mega Man X7, Mega Man X8, Mega Man X: Command Mission, Mega Man Zero 2, Mega Man Zero 3, Mega Man Network Transmission, Mega Man Battle Chip Challenge, Mega Man Battle Network 3, Mega Man Battle Network 4, and Mega Man Battle Network 5. The game deals with Dr. Weil's reign over Neo Arcadia in which humans, who have been reduced to second-rate citizens, begin to escape in large numbers to the last-known livable location on the planet, Area Zero, beginning a conflict between the two groups. The effects of this war eventually drive Zero and the Resistance to protect Area Zero and its inhabitants from Dr. Weil.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Megaman%20Zero%204%20%28USA%29.zip"
          },
          "added": 1712679759882
        },
        {
          "title": "Metroid - Zero Mission",
          "longTitle": "Metroid - Zero Mission",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Metroid%20-%20Zero%20Mission%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Metroid%20-%20Zero%20Mission%20(USA).png",
          "description": "Pirates have stolen an unknown life-form, recently discovered on the planet SR388. The life-form, called Metroid, is in a state of suspended animation and, according to analysis, was the cause of the complete destruction of SR388. If it ever got loose, the alien could destroy countless other systems.\n\nThe pirates have taken the being to the planet Zebes and are fending off the Galactic Federation's attacks. It is up to the space bounty hunter Samus Aran to find her way into the planet's core, destroy the pirates, and take back the alien before the pirates complete their plans of world destruction.\n\nZero Mission takes Samus back to her first battle with Mother Brain, expanding on the original story line and action from the original Nintendo classic, Metroid, with updated visuals, new puzzles to solve, and cut scenes filling in the personal story of Samus.\n\nThe player can perform moves taken from the original game, along with additions taken from the last GBA mission, Metroid Fusion, including the power grab. This game can also be linked to Metroid Fusion to unlock special extras.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Metroid%20-%20Zero%20Mission%20%28USA%29.zip"
          },
          "added": 1650726007990
        },
        {
          "title": "Metroid Fusion",
          "longTitle": "Metroid Fusion",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Metroid%20Fusion%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Metroid%20Fusion%20(USA).png",
          "description": "Samus Aran returns in an all-new Metroid adventure!\n\nWhile lending mission support on planet SR388, interstellar bounty hunter Samus Aran is attacked by an X parasite, an organism with the ability to mimic the abilities of any creature it infects. Near death, Samus is saved by a vaccine made from the DNA of the last Metroid -- the X parasite's only natural predator. When the X spread to a research station in orbit around SR388, a weakened Samus is forced to exterminate them all ... or die trying.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Metroid%20Fusion%20%28USA%29.zip"
          },
          "added": 1650726070941
        },
        {
          "title": "Pokémon - Emerald Version",
          "longTitle": "Pokémon - Emerald Version",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Pokemon%20-%20Emerald%20Version%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Pokemon%20-%20Emerald%20Version%20(USA%2C%20Europe).png",
          "description": "Pokémon Emerald is the fifth Pokémon game of the advanced generation, after its predecessors Ruby, Sapphire, FireRed, and LeafGreen. It takes place in the world of Hoenn but can also connect with Kanto-based games FireRed and LeafGreen as well. Like Pikachu and Suicune were for Yellow and Crystal respectively, Rayquaza plays a vital role in this game along with the other Legendaries, Groudon and Kyogre. Though similar to the original storyline that occurs in Hoenn, Emerald offers more changes than Yellow and Crystal.\n\nIn terms of gameplay, there have been several alterations to the game:\n\nLegendaries\n\n1. Ability to catch Rayquaza before the Elite Four, as well as both Groudon and Kyogre after it.\n2. Changes to catching the Regis.\n3. Ability to catch either one of Latios or Latias.\n\nGraphics\n\n1. New outfits for the characters.\n4. New Pokémon animations.\n\nFeatures\n\n1. Ability to enter the Safari Zone Extension, where you can catch Johto (the world of Pokémon Gold, Silver and Crystal) Pokémon like Houndour and Miltank.\n5. The Battle Frontier, an island full of different battle stadiums.\n6. Ability to get both of the Claw and Root fossils.\n\nThese are of the changes you might notice at first while playing Pokémon Emerald. However, there are lots of other improvements apart from the new storyline that separates this game from its predecessors.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Pokemon%20-%20Emerald%20Version%20%28USA%2C%20Europe%29.zip",
            "rtc": true
          },
          "added": 1650726112206
        },
        {
          "title": "Pokémon - FireRed Version",
          "longTitle": "Pokémon - FireRed Version",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Pokemon%20-%20FireRed%20Version%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Pokemon%20-%20FireRed%20Version%20(USA).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Pokemon%20-%20FireRed%20Version%20%28USA%2C%20Europe%29.zip",
            "rtc": true
          },
          "added": 1650726163177,
          "description": "Pokémon FireRed Version and Pokémon LeafGreen Version are a pair of core series Generation III games that are set in the Kanto region. They were released in Japan on January 29, 2004, in North America on September 9, 2004, in Australia on September 23, 2004 and in Europe on October 1, 2004.\n\nAs the first remakes in the Pokémon franchise, the games revisit the original pair of Pokémon games, Pokémon Red and Green Versions. The remakes feature the characters, plot elements, and challenges from the originals, along with several updates introduced in Generation III."
        },
        {
          "title": "Pokemon - LeafGreen Version",
          "longTitle": "Pokemon - LeafGreen Version",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Pokemon%20-%20LeafGreen%20Version%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Pokemon%20-%20LeafGreen%20Version%20(USA).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Pokemon%20-%20LeafGreen%20Version%20%28USA%2C%20Europe%29.zip",
            "rtc": true
          },
          "added": 1712679759882,
          "description": "Pokémon FireRed Version and Pokémon LeafGreen Version are a pair of core series Generation III games that are set in the Kanto region. They were released in Japan on January 29, 2004, in North America on September 9, 2004, in Australia on September 23, 2004 and in Europe on October 1, 2004.\n\nAs the first remakes in the Pokémon franchise, the games revisit the original pair of Pokémon games, Pokémon Red and Green Versions. The remakes feature the characters, plot elements, and challenges from the originals, along with several updates introduced in Generation III."
        },
        {
          "title": "Pokémon - Ruby Version",
          "longTitle": "Pokémon - Ruby Version",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Pokemon%20-%20Ruby%20Version%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Pokemon%20-%20Ruby%20Version%20(USA).png",
          "description": "Pokémon is back for another round catching and training! You're the new guy (or girl) in Littleroot Town, and the newest generation of Pokémon trainers. Professor Birch sends you on your way in your journey, with one of your choice of 3 starter Pokémon. There's Treecko (A grass-type chameleon-like little guy) Torchic (a Fire-type bird) and Mudkip (a Water-type amphibious creature).\n\nNow, you've got a whole new world to explore in Hoenn, with eight new gyms and two-on-two battles, opening up a whole new myriad of tactics! New items, new Pokémon (over 350!!), and a new Pokédex to boot too! And of course we have our new villains, the nefarious Team Magma, who plan on submerging the world in water in order to call out the Legendary Groudon!\n\nOnly one person can stop them and become the ultimate Pokémon Master... You!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Pokemon%20-%20Ruby%20Version%20%28USA%2C%20Europe%29.zip",
            "rtc": true
          },
          "added": 1650726190132
        },
        {
          "title": "Pokémon - Sapphire Version",
          "longTitle": "Pokémon - Sapphire Version",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Pokemon%20-%20Sapphire%20Version%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Pokemon%20-%20Sapphire%20Version%20(USA).png",
          "description": "Pokémon is back for another round catching and training! You're the new guy (or girl) in Littleroot Town, and the newest generation of Pokémon trainers. Professor Birch sends you on your way in your journey, with one of your choice of 3 starter Pokémon. There's Treecko (A grass-type chameleon-like little guy) Torchic (a Fire-type bird) and Mudkip (a Water-type amphibious creature).\n\nNow, you've got a whole new world to explore in Hoenn, with eight new gyms and two-on-two battles, opening up a whole new myriad of tactics! New items, new Pokémon (over 350!!), and a new Pokédex to boot too! And of course we have our new villains, the nefarious Team Aqua, who plan on submerging the world in water in order to call out the Legendary Kyogre!\n\nOnly one person can stop them and become the ultimate Pokémon Master... You!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Pokemon%20-%20Sapphire%20Version%20%28USA%2C%20Europe%29.zip",
            "rtc": true
          },
          "added": 1712679759882
        },
        {
          "title": "Pokémon Mystery Dungeon - Red Rescue Team",
          "longTitle": "Pokémon Mystery Dungeon - Red Rescue Team",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Pokemon%20Mystery%20Dungeon%20-%20Red%20Rescue%20Team%20(USA%2C%20Australia).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Pokemon%20Mystery%20Dungeon%20-%20Red%20Rescue%20Team%20(USA%2C%20Australia).png",
          "description": "Breaking the conventions of prior Pokémon games, you play as a human who has suddenly been transformed into a Pokémon, but before you could come to grips with this startling revelation, a Butterfree needs help! It's baby Caterpie has fallen into a dungeon and cannot get out!\n\nYou and other Pokémon you befriend along the way must brave randomly created dungeons to help out other Pokémon who find themselves in need of rescuing or  just need something delivered. Both happen. \n\nUnlike previous Pokémon games, the battles take place on the map (though they are still turn based), and although you may only directly control the Pokémon that represents you in the game, you can your companions vague battle orders. Such as: use more special attacks or conserve items.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Pokemon%20Mystery%20Dungeon%20-%20Red%20Rescue%20Team%20%28USA%2C%20Australia%29.zip"
          },
          "added": 1650726302857
        },
        {
          "title": "Pokémon Pinball - Ruby & Sapphire",
          "longTitle": "Pokémon Pinball - Ruby & Sapphire",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Pokemon%20Pinball%20-%20Ruby%20%26%20Sapphire%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Pokemon%20Pinball%20-%20Ruby%20%26%20Sapphire%20(USA).png",
          "description": "The Pokémon are back on the pinball table, this time with the latest batch of creatures from the Ruby & Sapphire series on GBA joining the already established cast of characters.\n\nYour job is to not only use a Pokéball as a pinball and rack up the biggest score on the table, but to also capture Pokémon through a selection of mini-games and challenges during the usual pinball game. Simply hit the required areas of the board with the ball and you'll capture the monster available. There's 200 to find in total.\n\nTwo different boards are on offer, each based on the two versions of Pokémon for GBA, Ruby and Sapphire. Each board represents a new challenge as well as which Pokemon you can catch during play.\n\nAlthough there is no 2 player battle mode of sorts, you can trade Pokémon and high scores using the link cable.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Pokemon%20Pinball%20-%20Ruby%20%26%20Sapphire%20%28USA%29.zip"
          },
          "added": 1650726331927
        },
        {
          "title": "Rayman Advance",
          "longTitle": "Rayman Advance",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Rayman%20Advance%20(USA)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Rayman%20Advance%20(USA)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "description": "Rayman Advance is a GBA game. It is basically a port of Rayman 1, however bears some minor changes. The evil Mr. Dark has stolen the Great Protoon, kidnapped all of the Electoons and defeated Betilla the Fairy. Rayman has to travel through 5 worlds before finally meeting up with Mr Dark and defeating him.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Rayman%20Advance%20%28USA%29%20%28En%2CFr%2CDe%2CEs%2CIt%29.zip"
          },
          "added": 1650726364136
        },
        {
          "title": "Sonic Advance",
          "longTitle": "Sonic Advance",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Sonic%20Advance%20(USA)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Sonic%20Advance%20(USA)%20(En%2CJa).png",
          "description": "SONIC IS BACK TO SAVE THE WORLD!\n\nThe evil Dr. Eggman is at it again, with a brand new scheme to trip up Sonic and his pals. Maneuver your way through obstacles, puzzles and traps to collect the Chao Emeralds and defeat the vile Dr. Eggman before it’s too late!\n\n-Play as Sonic, Knuckles, Tails, or Amy\n-Link up to 4 players on one gamePak\n-Zip through levels filled with puzzles and traps at sonic speed\n-Exchange chao between the gameBoy Advance and the Sonic Adventure’ 2: Battle gameon the Nintendo GameCube’",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Sonic%20Advance%20%28USA%29%20%28En%2CJa%29.zip"
          },
          "added": 1650726383152
        },
        {
          "title": "Sonic Advance 2",
          "longTitle": "Sonic Advance 2",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Sonic%20Advance%202%20(USA)%20(En%2CJa%2CFr%2CDe%2CEs%2CIt).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Sonic%20Advance%202%20(USA)%20(En%2CJa%2CFr%2CDe%2CEs%2CIt).png",
          "description": "Dr. Eggman is up to his old tricks!\n\nJoin Sonic, Tails, Knuckles, and their new friend, Cream the Rabbit, as they take off on a blazingly fast quest to thwart Dr. Eggman's nefarious scheme. Dash through space age metal labyrinths and other new locales as Sonic, Tails, Knuckles and Cream\n\n-Unlock special features and stages by collecting Chaos Emeralds and Special Rings\n-4 players can compete on one gamePak\n-Visit the new Chao Garden and connect to Sonic Adventure 2: Battle on the Nintendo GameCube",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Sonic%20Advance%202%20%28USA%29%20%28En%2CJa%2CFr%2CDe%2CEs%2CIt%29.zip"
          },
          "added": 1712679759882
        },
        {
          "title": "Sonic Advance 3",
          "longTitle": "Sonic Advance 3",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Sonic%20Advance%203%20(USA)%20(En%2CJa%2CFr%2CDe%2CEs%2CIt).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Sonic%20Advance%203%20(USA)%20(En%2CJa%2CFr%2CDe%2CEs%2CIt).png",
          "description": "JOIN THE QUEST TO DEFEAT THE EVIL DR. EGGMAN!\n\n*Team up with any one of 5 different characters\n*Pull off different combinations of attack moves\n*Experience changes in gameplay depending on a player's partner selection\n*Multiplayer option allows up to 4 players",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Sonic%20Advance%203%20%28USA%29%20%28En%2CJa%2CFr%2CDe%2CEs%2CIt%29.zip"
          },
          "added": 1650726438384
        },
        {
          "title": "SpongeBob SquarePants - SuperSponge",
          "longTitle": "SpongeBob SquarePants - SuperSponge",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/SpongeBob%20SquarePants%20-%20SuperSponge%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/SpongeBob%20SquarePants%20-%20SuperSponge%20(USA%2C%20Europe).png",
          "description": "SpongeBob wants to give his Friend Patrick Star autographs from their favorite Superheroes, Mermaid Man and Barnaccle Boy. But first, SpongeBob must succeed at some increasingly zany challenges. See if SpongeBob can fulfill the Superheroes' requests to win their autographs!\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/SpongeBob%20SquarePants%20-%20SuperSponge%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650726465774
        },
        {
          "title": "Super Monkey Ball Jr.",
          "longTitle": "Super Monkey Ball Jr.",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Super%20Monkey%20Ball%20Jr.%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Super%20Monkey%20Ball%20Jr.%20(USA).png",
          "description": "The goal of the gameis to maneuver a monkey trapped in a ball by tilting the labyrinth and reaching the goal at the end of the maze.\n\nLike many other games of Super Monkey Ball series, the player has the option to choose Aiai, Meemee and Gongon. In multiplayer, two to four people can pick the same character.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Super%20Monkey%20Ball%20Jr.%20%28USA%29.zip"
          },
          "added": 1650726487350
        },
        {
          "title": "Sword of Mana",
          "longTitle": "Sword of Mana",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Sword%20of%20Mana%20(USA%2C%20Australia).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Sword%20of%20Mana%20(USA%2C%20Australia).png",
          "description": "The Mana Tree Needs Defenders!\n\nThe location of the Mana Tree - wellspring of all life - has long been lost to legend. Many centuries have passed, and the Granz Realm's Dark Lord is searching for the secrets of the ancient tree so that he can control the source of Mana. Now, a young hero and heroine must come together to defeat the evil that threatens both the mystical tree and the world itself.\n\nChoose your hero! Guide a battle-hardened gladiator on his quest to avenge the deaths of his parents!\n\n...Or guide a young girl, one of the last survivors of the Mana Clan, as she confronts the past that haunts her.\n\nExperience the saga of these two heroes as their stories weave together and they join forces to protect the Mana Tree from the powers of darkness.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Sword%20of%20Mana%20%28USA%2C%20Australia%29.zip"
          },
          "added": 1650726566209
        },
        {
          "title": "Teenage Mutant Ninja Turtles",
          "longTitle": "Teenage Mutant Ninja Turtles",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Teenage%20Mutant%20Ninja%20Turtles%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Teenage%20Mutant%20Ninja%20Turtles%20(USA).png",
          "description": "Be your favorite Teenage Mutant Ninja Turtle and master your ninja skills in their action-packed world. Roam NYC streets, scour underground sewers and fight your way across rooftops on a collision course with The Shredder and his vile pack of foot ninjas. Find scrolls to unlock special attack moves and effects. Interact with characters from the animated television series, such as Splinter and Casey Jones. Don't hide in your shell--be a hero.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Teenage%20Mutant%20Ninja%20Turtles%20%28USA%29.zip"
          },
          "added": 1712679759882
        },
        {
          "title": "Teenage Mutant Ninja Turtles 2 - Battle Nexus",
          "longTitle": "Teenage Mutant Ninja Turtles 2 - Battle Nexus",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Teenage%20Mutant%20Ninja%20Turtles%202%20-%20Battle%20Nexus%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Teenage%20Mutant%20Ninja%20Turtles%202%20-%20Battle%20Nexus%20(USA).png",
          "description": "The heroes in a half shell are back in an all new adventure. The four turtles have been split up in order to combat the many bad guys that surround the city.\n\nEach turtle (Leonardo, Michelangelo, Raphael & Donatello) has their own set of levels to complete, with their own distinct moves and combat options to use during battle. Along with a set of side-scrolling levels, complete with end of level boss battles, the four turtles will also get the chance to race through the sewers in the unique 3rd person race modes, shooting down the enemy or collecting items, while Donatello takes to the sky in the Shell Glider and Raphael challenges Casey Jones to a one-on-one cycle race.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Teenage%20Mutant%20Ninja%20Turtles%202%20-%20Battle%20Nexus%20%28USA%29.zip"
          },
          "added": 1650726608915
        },
        {
          "title": "Tekken Advance",
          "longTitle": "Tekken Advance",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Tekken%20Advance%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Tekken%20Advance%20(USA).png",
          "description": "Finally, the biggest, baddest bruiser of them all goes portable! And it's all here... the vicious combos, the killer graphics, and the greatest fighters. Practive your technique, remember to sidestep, and pray your skills are up to the challenge. Nothing compares to the massive bone crunching moves and brutal face-poundings of the King of Iron Fist Tournament.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Tekken%20Advance%20%28USA%29.zip"
          },
          "added": 1650726641919
        },
        {
          "title": "The Legend of Zelda - The Minish Cap",
          "longTitle": "The Legend of Zelda - The Minish Cap",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Legend%20of%20Zelda%2C%20The%20-%20The%20Minish%20Cap%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Legend%20of%20Zelda%2C%20The%20-%20The%20Minish%20Cap%20(USA).png",
          "description": "While at a festival with Princess Zelda, Link encounters a mysterious mage, called Vaati, who turns the princess to stone.  Helpless to stop them, Link is asked by the king to meet with a race of tiny people known as the Minish, who may be able to help with their predicament.  On his travels, Link teams up with a talking cap called Ezlo, who is able to shrink Link to the size of a Minish so that he can meet with them.  With his newfound abilities, Link must save the kingdom from Vaati's menace.\n\nThe Legend of Zelda: The Minish Cap is a top-down action adventure game that tells the origins of the evil Vaati from Four Swords.  Players take on the role of Link as they conquer various dungeons to retrieve essential tools to fight enemies and progress through various obstacles.  Items such as the Mole Mitts allow Link to dig through dirt, while the Gust Jar can be used to suck in enemies, items, and propel Link.  Link can also shrink down to the size of a Minish with the aid of Ezlo, the talking cap.\n\nThe Minish Cap uses the gameplay mechanic of shrinking to make familiar territory new and different.  Puddles become huge rivers, baby chicks are huge monsters, and regular enemies become deadly bosses at Minish size.  Link can also trade items called \"Kinstones\" with people in the game - when two pieces of the same Kinstone are joined together, new areas open up, treasure chests appear, and sometimes, even useful rewards are given to Link.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Legend%20of%20Zelda%2C%20The%20-%20The%20Minish%20Cap%20%28USA%29.zip"
          },
          "added": 1650725382208
        },
        {
          "title": "Tiny Toon Adventures - Buster's Bad Dream",
          "longTitle": "Tiny Toon Adventures - Buster's Bad Dream",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Tiny%20Toon%20Adventures%20-%20Buster's%20Bad%20Dream%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Tiny%20Toon%20Adventures%20-%20Buster's%20Bad%20Dream%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Tiny%20Toon%20Adventures%20-%20Wacky%20Stackers%20%28USA%29.zip"
          },
          "added": 1650726661769,
          "description": "Tiny Toon Adventures: Buster's Bad Dream is the second Tiny Toon Adventures-related game released on the Nintendo Game Boy Advance. It was released on July 5, 2002 in Europe and was developed by Treasure Co. Ltd and published by Swing! Entertainment Media AG.\n\nBuster Bunny is having bad dreams and he aims to stop them. This game features a \"partner system\" that allows players to team up with other characters. The side-scrolling action features a unique take on fighting, allowing combos and more."
        },
        {
          "title": "Wario Land 4",
          "longTitle": "Wario Land 4",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/Wario%20Land%204%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/Wario%20Land%204%20(USA%2C%20Europe).png",
          "description": "Wario's back for more...and more...and MORE!\n\nHey! You! Yeah, you! Listen up when Wario's talking to you! I just read about this legendary Pyramid of Gold, and you're gonna help me go explore it. There's lots of treasure in there for the taking, and I want it all. I'm sure there are gonna be all kinds of weird enemies and big, bad bosses in there, so if you don't think you can hack it, put the gamedown now. I don't want any losers making me jump into bottomless pits, you hear me?\n\n-Wario invades the gameBoy Advance! See Wario in all his greedy glory as he explores vivid worlds made possible by the power of the GBA!\n-Flex your muscles! Wario is no longer immortal, so you'll have your work cut out as you roll, punch and jump your way to tougher and tougher challenges. Wario will get stung by bees, zombified, bitten by bats, set on fire, and much more - what a way to make a living!\n-Over twenty enormous stages await! Hunt down CDs for your listening pleasure, or collect treasure to spend on all-new items that you can use against the most bizarre bosses ever!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/Wario%20Land%204%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650726685906
        },
        {
          "title": "WarioWare, Inc. - Mega Microgame$!",
          "longTitle": "WarioWare, Inc. - Mega Microgame$!",
          "type": "gba",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Snaps/output/WarioWare%2C%20Inc.%20-%20Mega%20Microgame%24!%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gba-images/master/Named_Titles/resized/WarioWare%2C%20Inc.%20-%20Mega%20Microgame%24!%20(USA).png",
          "description": "Tired of chasing after rival Mario and counting his millions again, Wario has put his spare time to good use to create his own video game, WarioWare, Inc.: Mega Microgame$!.\n\nSimply put, WarioWare has you testing your skills in a huge collection of games from almost every genre you can think of. Each game lasts only a matter of seconds, but within that time you have to complete the task. This ranges from hitting a home run, stomping a handful of bad guys, winning a boxing match, solving a puzzle and winning the points.\n\nYou'll witness a wide selection of game graphics as well. Games originate from the original Nintendo Game & Watch series, to the green tinted Game Boy titles and the modern day Game Boy Advance style. You'll also notice some well known names, including Metroid, Duck Hunt, the Mario Bros. series and much more hidden away between each mini game.\n",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Game%20Boy%20Advance/WarioWare%2C%20Inc.%20-%20Mega%20Microgame%24%21%20%28USA%29.zip"
          },
          "added": 1650726728864
        }
      ],
      "longTitle": "Nintendo Game Boy Advance",
      "description": "The Game Boy Advance (GBA) is a 32-bit handheld game console developed, manufactured and marketed by Nintendo as the successor to the Game Boy Color. It was released in Japan on March 21, 2001, in North America on June 11, 2001, in the PAL region on June 22, 2001, and in mainland China as iQue Game Boy Advance on June 8, 2004. The GBA is part of the sixth generation of video game consoles. The original model does not have an illuminated screen; Nintendo addressed that with the release of a redesigned model with a frontlit screen, the Game Boy Advance SP, in 2003. A newer revision of the redesign was released in 2005, with a backlit screen. Around the same time, the final redesign, the Game Boy Micro, was released in September 2005.",
      "background": "https://segaretro.org/images/4/47/GameBoyAdvance.png",
      "backgroundPixelated": false,
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/gba-thumb.png?raw=true"
    },
    {
      "title": "VB",
      "longTitle": "Nintendo Virtual Boy",
      "background": "https://upload.wikimedia.org/wikipedia/commons/1/1d/Virtual-Boy-Set.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "Jack Bros.",
          "longTitle": "Jack Bros.",
          "type": "vb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Snaps/output/Jack%20Bros.%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Titles/resized/Jack%20Bros.%20(USA).png",
          "description": "Jack Bros., is an adventure video game released in 1995 on Virtual Boy. Once a year, at Halloween, the door between our country and the fairies opens. All fairy should return to Fairieland 23:00, otherwise, they will be banished forever. You must choose one of three Jack Bros. as your character. Each has its own attributes and weapons and special attacks.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Virtual%20Boy/Jack%20Bros.%20%28USA%29.zip"
          },
          "added": 1651245419753
        },
        {
          "title": "Mario Clash",
          "longTitle": "Mario Clash",
          "type": "vb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Snaps/output/Mario%20Clash%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Titles/resized/Mario%20Clash%20(Japan%2C%20USA).png",
          "description": "Mario Clash is a game of out platforms on Virtual Boy. The player incarnates Mario. The Clash House Tower was invaded by monsters. This is Mario entrusted to the task of evacuating them. But the tower is difficult to access and Mario is forced to fight in large rooms consist of long platforms, and in the tubing.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Virtual%20Boy/Mario%20Clash%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1651245896838
        },
        {
          "title": "Mario's Tennis",
          "longTitle": "Mario's Tennis",
          "type": "vb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Snaps/output/Mario's%20Tennis%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Titles/resized/Mario's%20Tennis%20(Japan%2C%20USA).png",
          "description": "Mario's Tennis Tennis is a game released in 1995 on Virtual Boy. Seven characters from the Mario universe are present: Mario, Luigi, Toad, Peach, Koopa, Yoshi and Donkey Kong Jr. playing only on one short pipe surrounded by a landscape.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Virtual%20Boy/Mario%27s%20Tennis%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1651245449637
        },
        {
          "title": "Red Alarm",
          "longTitle": "Red Alarm",
          "type": "vb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Snaps/output/Red%20Alarm%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Titles/resized/Red%20Alarm%20(USA).png",
          "description": "Bursting through incredible dimensions of Virtual space the final mission is clear. Obliterate all enemies and obstacles created by KAOS and terminate this menacing battle system from within.\r\n\r\nEmploying an impressive arsenal of high-tech weapons and evasive maneuvers the Tech-Wing Fighter speeds on. Spinning deaths, spy pods and mosquito mechs appear from everywhere! The fate of humanity will soon be defined. Red Alarm! Red Alarm! Alarm Condition Red!!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Virtual%20Boy/Red%20Alarm%20%28USA%29.zip"
          },
          "added": 1651420497385
        },
        {
          "title": "Teleroboxer",
          "longTitle": "Teleroboxer",
          "type": "vb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Snaps/output/Teleroboxer%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Titles/resized/Teleroboxer%20(Japan%2C%20USA).png",
          "description": "In a savage display of pounding moves and lightning action, robotic boxers from around the globe step into a futuristic ring. Mirroring the movements of the humans in control, each Teleroboxer is capable of surviving defense matches unbearable to mankind.\r\n\r\nSlug it out to the staggering end to determine the true world champion. Created with specialized Techtronic powers and unique personalities, these responsive machines show no mercy on their way to the brutal top.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Virtual%20Boy/Teleroboxer%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1651245947648
        },
        {
          "title": "Vertical Force",
          "longTitle": "Vertical Force",
          "type": "vb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Snaps/output/Vertical%20Force%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Titles/resized/Vertical%20Force%20(USA).png",
          "description": "The game takes place in \"Space Era 210.\" The giant computer that takes care of a human colony planet named Odin suddenly malfunctions and decides to send an army of drone starfighters to destroy Earth. These drones emit a signal that renders all Earth starfighters useless. An archaeology team finds an ancient starfighter on the planet Ragnarok that is fortuitously impervious to the drones' signal. It is up to the player to command this starship and destroy all the alien drones.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Virtual%20Boy/Vertical%20Force%20%28USA%29.zip"
          },
          "added": 1651245495669
        },
        {
          "title": "Virtual Boy Wario Land",
          "longTitle": "Virtual Boy Wario Land",
          "type": "vb",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Snaps/output/Virtual%20Boy%20Wario%20Land%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-vb-images/master/Named_Titles/resized/Virtual%20Boy%20Wario%20Land%20(Japan%2C%20USA).png",
          "description": "Yikes!!! Get ready for a devious treasure hunt with the infamous scheming Wario. Capture the shining gold and vast treasures locked deep inside a hidden cave. But, beware of poison ponds, perilous prisons, endless walls and creepy woods! Make a quick change into Sea Dragon Wario, Eagle Wario or Bull Wario and utilize their mighty strengths. Blow away enemy cave defenders with body attacks and power actions. Succeed in this greedy plot to seize the riches of this underground world and find this key to freedom!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Nintendo%20-%20Virtual%20Boy/Virtual%20Boy%20Wario%20Land%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1651245303069
        }
      ],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/vb-thumb.png?raw=true",
      "description": "The Virtual Boy is a 32-bit tabletop portable video game console developed and manufactured by Nintendo. Released in 1995, it was marketed as the first console capable of displaying stereoscopic \"3D\" graphics. The player uses the console like a head-mounted display, placing the head against the eyepiece to see a red monochrome display. The games use a parallax effect to create the illusion of depth. Sales failed to meet targets, and Nintendo ceased distribution and game development in 1996, having released only 22 games for the system."
    },
    {
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/sg1000-thumb.png?raw=true",
      "title": "SG-1000",
      "longTitle": "Sega SG-1000",
      "background": "https://upload.wikimedia.org/wikipedia/commons/b/bf/Sega-SG-1000-Console-Set.png",
      "description": "The SG-1000 is a home video game console manufactured by Sega. It was Sega's first entry into the home video game hardware business. Developed in response to a downturn in arcades starting in 1982, the SG-1000 was created on the advice of Hayao Nakayama, president of Sega's Japanese arm, and was released on July 15, 1983, the same day that Nintendo released the Family Computer in Japan. It also had limited release in Australia and New Zealand.\n\nThe SG-1000 was released in several forms, including the SC-3000 computer and the redesigned SG-1000 II[b] released in 1984. The SG-1000 and the SC-3000 both support a library of 76 ROM cartridge games and 29 Sega My Card games.",
      "items": []
    },
    {
      "title": "MS",
      "items": [
        {
          "title": "Alex Kidd - High-Tech World",
          "longTitle": "Alex Kidd - High-Tech World",
          "type": "sms",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Snaps/output/Alex%20Kidd%20-%20High-Tech%20World%20(USA%2C%20Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Titles/resized/Alex%20Kidd%20-%20High-Tech%20World%20(USA%2C%20Europe%2C%20Brazil).png",
          "description": "Alex Kidd is contacted by one of his friends, who tells him a new arcade, High Tech World, has opened in town. Alex has a map to its location, but it has been torn into eight pieces, and is needed to find the arcade before it closes at 5:00 sharp. He solves puzzles, answers questions, runs errands and does housework to find the pieces. However, once he finds the pieces of the map, he learns that the front gates are shut, and thus is unable to leave. Using a hang-glider to leave the house he lands in the forest. On his way to the arcade, a clan of ninjas appear, who attempt to kill him. Upon fighting through the forest of ninjas, Alex finally makes it to the Arcade.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Master%20System%20-%20Mark%20III/Alex%20Kidd%20-%20High-Tech%20World%20%28USA%2C%20Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727436117
        },
        {
          "title": "Alex Kidd in Shinobi World",
          "longTitle": "Alex Kidd in Shinobi World",
          "type": "sms",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Snaps/output/Alex%20Kidd%20in%20Shinobi%20World%20(USA%2C%20Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Titles/resized/Alex%20Kidd%20in%20Shinobi%20World%20(USA%2C%20Europe%2C%20Brazil).png",
          "description": "Alex Kidd has to rescue his girlfriend, a native of Shinobi World, from an evil ninja named Hanzo. A good ninja fuses into him and gives him his powers.\n\nAlex Kidd in Shinobi World contains 4 rounds with 3 stages:\nRound 1: Kabuto\nRound 2: Raid of the Helicopters\nRound 3: The Jungle\nRound 4: The Battle with the Dark Ninja",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Master%20System%20-%20Mark%20III/Alex%20Kidd%20in%20Shinobi%20World%20%28USA%2C%20Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727440742
        },
        {
          "title": "California Games",
          "longTitle": "California Games",
          "type": "sms",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Snaps/output/California%20Games%20(USA%2C%20Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Titles/resized/California%20Games%20(USA%2C%20Europe%2C%20Brazil).png",
          "description": "California Games is a 1987 sports video game originally released by Epyx. Branching from their popular Summer Games and Winter Games series, this game consists of a collection of outdoor sports purportedly popular in California.\n\nThe Master System conversion was developed by Sega themselves and released in 1989, which, like the similar NES version from around the same time, was mainly based off of the Commodore 64 version.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Master%20System%20-%20Mark%20III/California%20Games%20%28USA%2C%20Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727447592
        },
        {
          "title": "Kenseiden",
          "longTitle": "Kenseiden",
          "type": "sms",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Snaps/output/Kenseiden%20(USA%2C%20Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Titles/resized/Kenseiden%20(USA%2C%20Europe%2C%20Brazil).png",
          "description": "It was a land of peace and plenty... until the evil Warlocks returned in a storm of ruin and destruction! Now, they have struck the final blow by stealing your heritage... the Sword of the Dragon King and the Five Secret Scrolls. You are Hayato. The blood of the Dragon King runs in your veins. Armed only with a samurai sword, you must travel through the 16 provinces of ancient Japan, battling the Warlocks and their monstrous armies in nightmare caves and castles! If you defeat the Warlocks, you will learn the sword magic of the scrolls and... maybe... regain the Sword of the Dragon King. Fail, and your country is doomed to a thousand centuries of terror! It is a battle only you can win!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Master%20System%20-%20Mark%20III/Kenseiden%20%28USA%2C%20Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727451877
        },
        {
          "title": "Master of Darkness",
          "longTitle": "Master of Darkness",
          "type": "sms",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Snaps/output/Vampire%20(Europe)%20(Beta).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Titles/resized/Vampire%20(Europe)%20(Beta).png",
          "description": "Master of Darkness is a platform game, very similar to Castlevania. The plot has the player entering the role of a Ouija board-playing psychologist named Dr. Ferdinand Social, who is looking to defeat Count Dracula, who is behind a series of killings in London that have been attributed to Jack the Ripper. However, Jack the Ripper is indeed responsible, for he is using the victim's bodies and fresh blood for sacrificial offerings – as part of a dark ritual being performed by Count Massen to resurrect Dracula. Also taking some part in the murders and the dark ritual is a mysterious Psychic Girl, who is possessed by an evil Skull Spirit.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Master%20System%20-%20Mark%20III/Master%20of%20Darkness%20%28Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727484171
        },
        {
          "title": "Phantasy Star",
          "longTitle": "Phantasy Star",
          "type": "sms",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Snaps/output/Phantasy%20Star%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Titles/resized/Phantasy%20Star%20(USA%2C%20Europe).png",
          "description": "The time: Space Century 3240. The place: The Algol Star System. It began when King Lassic turned evil and let hordes of hideous, magical creatures run amok on the three planets. When her brother was killed, Alis vowed to avenge his death and put an end to Lassic forever.\n\nJoin her in a journey across time and space to worlds where creatures speak...where magic and science combine to take you on the ultimate video quest.\n\nPhantasy Star is total adventure role playing with towns full of people and shops...16 level dungeons full of traps and treasure...three companions who will help you if you find them and some of the most awesome graphics ever put in a video game.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Master%20System%20-%20Mark%20III/Phantasy%20Star%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650727464604
        },
        {
          "title": "The Lucky Dime Caper Starring Donald Duck",
          "longTitle": "The Lucky Dime Caper Starring Donald Duck",
          "type": "sms",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Snaps/output/Lucky%20Dime%20Caper%20Starring%20Donald%20Duck%2C%20The%20(Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Titles/resized/Lucky%20Dime%20Caper%20Starring%20Donald%20Duck%2C%20The%20(Europe%2C%20Brazil).png",
          "description": "The Lucky Dime Caper starring Donald Duck is a platform game released by Sega for the Master System and Game Gear in 1991. It features Donald Duck as the main character.\n\nThe game is a side-scrolling platformer. The gameplay follows the same pattern of Castle of Illusion Starring Mickey Mouse which was released for Sega consoles a year before, but unlike Mickey, Donald can attack enemies by hitting them with a hammer or throwing discs. He can also attack faster by collecting star items.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Master%20System%20-%20Mark%20III/Lucky%20Dime%20Caper%20Starring%20Donald%20Duck%2C%20The%20%28Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650738239020
        },
        {
          "title": "Wonder Boy III - The Dragon's Trap",
          "longTitle": "Wonder Boy III - The Dragon's Trap",
          "type": "sms",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Snaps/output/Wonder%20Boy%20III%20-%20The%20Dragon's%20Trap%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-sms-images/master/Named_Titles/resized/Wonder%20Boy%20III%20-%20The%20Dragon's%20Trap%20(USA%2C%20Europe).png",
          "description": "Wonder Boy III: The Dragon's Trap is a platforming action-adventure video game developed by Westone as part of Sega's Wonder Boy series. It was published by Sega and released for the Master System in 1989.\n\nThe game takes place after the events of Wonder Boy in Monster Land, in which Wonder Boy has been cursed by the Mecha Dragon and must locate the Salamander Cross to lift it. The game is nonlinear and features varying landscapes in which players must navigate. Players find items and clues needed to access different parts of Monster Land, and they can transform into other forms and gain different abilities.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Master%20System%20-%20Mark%20III/Wonder%20Boy%20III%20-%20The%20Dragon%27s%20Trap%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650727488819
        }
      ],
      "longTitle": "Sega Master System",
      "description": "The Master System is a third-generation 8-bit home video game console manufactured by Sega. It was originally a remodeled export version of the Sega Mark III, the third iteration of the SG-1000 series of consoles, which was released in Japan in 1985 and featured enhanced graphical capabilities over its predecessors. The Master System launched in North America in 1986, followed by Europe in 1987, and Brazil in 1989. A Japanese version of the Master System was also launched in 1987, which features a few enhancements over the export models (and by proxy the original Mark III): a built-in FM audio chip, a rapid-fire switch, and a dedicated port for the 3D glasses. The Master System II, a cheaper model, was released in 1990 in North America, Australia and Europe.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/0/0b/Sega-Master-System-Set.png",
      "backgroundPixelated": false,
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/mastersystem-thumb.png?raw=true"
    },
    {
      "title": "GEN",
      "items": [
        {
          "title": "Alex Kidd in the Enchanted Castle",
          "longTitle": "Alex Kidd in the Enchanted Castle",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Alex%20Kidd%20in%20the%20Enchanted%20Castle%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Alex%20Kidd%20in%20the%20Enchanted%20Castle%20(USA).png",
          "description": "Alex Kidd in the Enchanted Castle is a side-scrolling platform game developed and published by Sega for the Sega Genesis video game console. The game was released in Japan on February 10, 1989, in the U.S. on March 1990, in Europe on November 30, 1990, in South Korea in December 1990, and in Brazil in March 21, 1991, shortly after the beginning of autumn. It is the only 16-bit platform game starring Alex Kidd, and the fifth game in the Alex Kidd series of video games.\n\nAlex Kidd in the Enchanted Castle follows Alex as he fights his way through the fictional planet Paperock in search of his long-lost father, King Thor. Alex has access to several items and vehicles that help him complete his quest, including a motorbike, pedicopter, and pogo stick, which each give him unique abilities. While traveling through eleven worlds, Alex must defeat several opponents in \"Paper, Rock, Scissors\" before finally finding King Thor.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Alex%20Kidd%20in%20the%20Enchanted%20Castle%20%28USA%29.zip"
          },
          "added": 1650727633982
        },
        {
          "title": "Asterix and the Great Rescue",
          "longTitle": "Asterix and the Great Rescue",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Asterix%20and%20the%20Great%20Rescue%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Asterix%20and%20the%20Great%20Rescue%20(USA).png",
          "description": "It is 50 B.C., and the entire Gaul (today's France) is conquered by the Romans. Only one village still remains independent, thanks to the incredible powers of its two great warriors, Asterix and Obelix. In the game, they must first of all liberate the village Orvio and rescue their friend Dogmatix.\n\nThe player can play as either Asterix or Obelix. They make their way through platform levels, fighting enemies by punching them, and jumping to access higher ares or to avoid falling down. There are also some items that the player can collect, such as bombs, with which the player can overcome obstacles and advance in the game.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Asterix%20and%20the%20Great%20Rescue%20%28USA%29.zip"
          },
          "added": 1650727633982
        },
        {
          "title": "Beast Wrestler",
          "longTitle": "Beast Wrestler",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Beast%20Wrestler%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Beast%20Wrestler%20(USA).png",
          "description": "A one on one fighting game seen from an isometric perspective. All beasts or dragons have two basic attacks: a punch and a tail attack, as well as a special attack that can only be performed while a certain icon is displayed. During close combat, pressing the A or C button rapidly will result in a throwing or choking attack. There is no visible health bar, but three icons are displayed at the bottom of the screen. Once a dragon is knocked down for a longer moment, one icon turns red. Once all icons are red, the fight is lost. The battle arena is surrounded by an electric fence, that opponents can be thrown into and which can also be used to initiate jump attacks.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Beast%20Wrestler%20%28USA%29.zip"
          },
          "added": 1650728146631
        },
        {
          "title": "Castle of Illusion Starring Mickey Mouse",
          "longTitle": "Castle of Illusion Starring Mickey Mouse",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Castle%20of%20Illusion%20Starring%20Mickey%20Mouse%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Castle%20of%20Illusion%20Starring%20Mickey%20Mouse%20(USA%2C%20Europe).png",
          "description": "Each level exists within the large titular castle and the player must defeat enemies and bosses by jumping on them, or collecting apples and marbles to use as projectiles. The player can also collect icons to increase health, collect extra lives, or gain bonus points. After defeating a boss, the player is given a gem. When all seven gems are collected, the player can build a rainbow bridge that allows him/her to walk into the castle's tower for a final battle against the witch (who in her youthful form resembles the Queen Grimhilde).",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Castle%20of%20Illusion%20Starring%20Mickey%20Mouse%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650728152110
        },
        {
          "title": "Castlevania - Bloodlines",
          "longTitle": "Castlevania - Bloodlines",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Castlevania%20-%20Bloodlines%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Castlevania%20-%20Bloodlines%20(USA).png",
          "description": "In the 19th century Europe's greatest nations had gone to great lengths to maintain a balance of power throughout Europe. The inhabitants sensed that a war would unfold sooner or later and countries formed several alliances, who in turned harbored feelings of distrust against each other. on June 1914 at Sarajevo, the Crown Prince of Austria was assasinated and resulted in a chain reaction of violence across the entire continent. It was said that a strange beautiful woman was involved within the shadows.\n\nIt was Elizabeth Bartley who had plotted together with the dark sorceress Drolta Tzuentes to unleash an international global war and use the souls of the dead to revive their Lord, Dracula.\n\nTwo man, descendants of the legendary Belmont family of vampire hunters, named John Morris and Eric Lecarde arose to counter the threat.\n\nTogether they travled to the ruins of Dracula's castle were unable to find any trace of the Vampire Lord. After learning that Elizabeth was nearby, they followed in hot pursuit while fighting their way all across Europe. With much effort, John and Eric were able to finally end the menace of Dracula and Elizabeth after a final showdown in Castle Proserpina.\n\nVictory would soon be tainted when learned of the terrible price that came with using the whip's full power.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Castlevania%20-%20Bloodlines%20%28USA%29.zip"
          },
          "added": 1650728161690
        },
        {
          "title": "Comix Zone",
          "longTitle": "Comix Zone",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Comix%20Zone%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Comix%20Zone%20(USA).png",
          "description": "ENTER THE COMIX ZONE: THE FIRST TRULY INTERACTIVE COMIC BOOK! Play as Sketch Turner, a street-wise comic book artist who gets trapped in the comic book world of his own creation. Warp into the Comix Zone with all the action and adventure of your favorite comics! Battle panel by panel through full comic book pages drawn by real comic book artists! Sharpen your fighting skills to defeat mutant enemies drawn in by Mortus, public enemy no. 1. Rip up the page with superhero power-ups and tons of intense fighting moves!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Comix%20Zone%20%28USA%29.zip"
          },
          "added": 1650728168061
        },
        {
          "title": "Contra - Hard Corps",
          "longTitle": "Contra - Hard Corps",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Contra%20-%20Hard%20Corps%20(USA%2C%20Korea).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Contra%20-%20Hard%20Corps%20(USA%2C%20Korea).png",
          "description": "Kickin' cyborg butt... That's what it's all about, dude. Jack into this game of genetic engineering gone bad. Real bad. It's five years after the mother of all wars ended - and things still aren't right. Your job is to fix it. The ever-popular Contra series makes its Sega Genesis debut with a pulse-pounding new storyline. At 16 megs, HARD CORPS pushes the technology to bring you over ten gut-wrenching levels with huge boss characters, great graphics and dynamic sound. Find high powered weapons such as the homing gun, crush gun, needle laser or mine setter. Do you think you can handle it? Trust me, you can't. You still here? Okay, then get ready for the fight of your life. Pick one of the four heroes and begin your search across many dark levels of doom. The ending changes, depending on the paths you choose - but every pass crosses boss characters that will blow you away. Literally!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Contra%20-%20Hard%20Corps%20%28USA%2C%20Korea%29%20%28En%29.zip"
          },
          "added": 1650728199851
        },
        {
          "title": "Ecco the Dolphin",
          "longTitle": "Ecco the Dolphin",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Ecco%20the%20Dolphin%20(USA%2C%20Europe%2C%20Korea).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Ecco%20the%20Dolphin%20(USA%2C%20Europe%2C%20Korea).png",
          "description": "You are Ecco, a powerful young dolphin. A mysterious storm has swept your family from the sea. The search to find them will take you through vast underwater realms of treachery, beauty and adventure. Use your sonar to discover hidden caverns and unlock the secrets of crystal glyphs. Charge packs of bloodthirsty sharks. Dive deep... but don't linger too long, because you're a mammal and need air to breathe. In your quest, you'll discover that more than your family's safety is at stake. The fate of the whole world rests on your wits and fins. Explore over 25 giant levels of solving puzzles and fighting denizens of the sea. Knife through the waters, flip above the waves, with motions created from real dolphins.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Ecco%20the%20Dolphin%20%28USA%2C%20Europe%2C%20Korea%29%20%28En%29.zip"
          },
          "added": 1650728209670
        },
        {
          "title": "Golden Axe II",
          "longTitle": "Golden Axe II",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Golden%20Axe%20II%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Golden%20Axe%20II%20(World).png",
          "description": "The three playable characters from the first Golden Axe, Ax Battler, Tyris Flare, and Gilius Thunderhead, return in Golden Axe II to fight the new evil forces led by Dark Guild. The game features a total of seven levels: six scrolling levels and a final end of game boss battle against Dark Guild.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Golden%20Axe%20II%20%28World%29.zip"
          },
          "added": 1712680247922
        },
        {
          "title": "Gunstar Heroes",
          "longTitle": "Gunstar Heroes",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Gunstar%20Heroes%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Gunstar%20Heroes%20(USA).png",
          "description": "Gunstar Heroes is a side scrolling shooter. The player has four weapons to choose from, and they can be combined in various pairs to create a total of 14 unique weapons. In addition to the weapons, the player can engage enemies in close quarters combat. It is possible to grab and toss enemies, perform sliding and jumping attacks and a long-range skid.\n\nUnlike most games in the genre, the player has a life total calculated in numbers. Death to a player requires multiple hits but just one death will issue the option to continue from the start of the level or to end the game. Players have unlimited continues.\n\nThe main highlight of the game are its boss encounters, which often feature large enemies made up of multiple sprites allowing for fluid movement.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Gunstar%20Heroes%20%28USA%29.zip"
          },
          "added": 1650728217708
        },
        {
          "title": "Marble Madness",
          "longTitle": "Marble Madness",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Marble%20Madness%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Marble%20Madness%20(USA%2C%20Europe).png",
          "description": "The idea is deceptively simple: Guide a marble down a path without hitting any obstacles or straying off the course. The game is viewed from an isometric perspective, which makes it harder to stay focused on the direction the ball is to follow. There are tight corridors to follow and enemies to avoid. There is a 2-player mode in which players must race to the finish; otherwise you're racing against the clock.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Marble%20Madness%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1651337554275
        },
        {
          "title": "Mega Bomberman",
          "longTitle": "Mega Bomberman",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Mega%20Bomberman%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Mega%20Bomberman%20(USA).png",
          "description": "The inhabitants of Bomber Planet lived in peace, protected by five spirits, until the evil Bagular and his robot army invaded. The Spirit Pictures, the source of the Spirits' magical power, were destroyed, splitting Bomber Planet into five pieces. Bomberman arrives to restore the Spirit Pictures and reassemble Bomber Planet.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Mega%20Bomberman%20%28USA%29.zip"
          },
          "added": 1650728280777
        },
        {
          "title": "Mega Man - The Wily Wars",
          "longTitle": "Mega Man - The Wily Wars",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Mega%20Man%20-%20The%20Wily%20Wars%20(Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Mega%20Man%20-%20The%20Wily%20Wars%20(Europe).png",
          "description": "The premise of the compilation involves the evil Dr. Wily traveling back in time in an attempt to defeat the robotic hero Mega Man. Each game follows a similar storyline in which Wily dispatches a set of powerful robots to take over the world and Mega Man single-handedly stops them.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Mega%20Man%20-%20The%20Wily%20Wars%20%28USA%29%20%28Genesis%20Mini%29.zip"
          },
          "added": 1650728288692
        },
        {
          "title": "Micro Machines",
          "longTitle": "Micro Machines",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Micro%20Machines%20(Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Micro%20Machines%20(Europe).png",
          "description": "If you're bored of racing Formula 1 cars, rally cars or MotoGP bikes in their natural habitats, the Micro Machines series could be for you. It involves racing miniatures representing particular vehicle types across a particular terrain found around the house. The Sports Cars race on the desktop, 4x4s in the sandpit, Formula 1 cars on a snooker table, and so on.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Micro%20Machines%20%28USA%29.zip"
          },
          "added": 1650728294987
        },
        {
          "title": "Monster World IV",
          "longTitle": "Monster World IV",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Monster%20World%20IV%20(USA%2C%20Europe)%20(En%2CJa)%20(Virtual%20Console).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Monster%20World%20IV%20(USA%2C%20Europe)%20(En%2CJa)%20(Virtual%20Console).png",
          "description": "Monster World IV is a sequel to Wonder Boy 5: Monster World 3. The player controls Asha, the green-haired girlfriend of Shion, the hero of the previous game. One day, Asha was standing on a cliff near her home village, and suddenly heard a mysterious voice calling for help. She decided to leave the village and to embark on an adventure to discover the identity of this mysterious person.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Monster%20World%20IV%20%28USA%29%20%28Genesis%20Mini%29.zip"
          },
          "added": 1650728311670
        },
        {
          "title": "Out of This World",
          "longTitle": "Out of This World",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Out%20of%20This%20World%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Out%20of%20This%20World%20(USA).png",
          "description": "There it is - the particle accelerator you've invented. You are so intent on testing it, you don't even notice the crackling outside of a not-so-distant electrical storm. Before you can say snap, crackle, pop, a lightning bolt slams through you and the accelerator with deadly accuracy. When you finally come to, you have no idea where you are. Are you being watched? Is this place home? In order to survive, you'll need to dodge, outwit and overcome deadly alien monsters and blood-sucking leeches who think you're a delicacy. Now that shouldn't be too hard for a whiz kid like you, right? Out of this World bridges the gap between cinema and action/adventure games with a completely new style of fluid, cinematic storytelling.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Out%20of%20This%20World%20%28USA%29.zip"
          },
          "added": 1650728321666
        },
        {
          "title": "Pac-Mania",
          "longTitle": "Pac-Mania",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Pac-Mania%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Pac-Mania%20(USA%2C%20Europe).png",
          "description": "Pac-Mania is a variation on the game Pac-Man. You need to guide Pac-Man around a maze and eat all of the dots on the board in order to proceed on to the next round. Numerous, multi-colored ghosts also roam the maze trying to stop you. If you eat one of the power pellets in the maze, the ghosts will temporarily turn blue and run from you. Pac-man can earn bonus points by eating the ghosts when they are in this state. The maze is now in 3-D and is larger than screen which will scroll to follow the action. To help get out of tight spots, Pac-Man now has the ability to jump. But be careful, because some of the ghosts have learned this trick as well and you could end up in a mid air collision!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Pac-Mania%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650728341635
        },
        {
          "title": "Phantasy Star II",
          "longTitle": "Phantasy Star II",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Phantasy%20Star%20II%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Phantasy%20Star%20II%20(USA%2C%20Europe).png",
          "description": "The time: Space Century 3240. The place: The Algol Star System. It began when King Lassic turned evil and let hordes of hideous, magical creatures run amok on the three planets. When her brother was killed, Alis vowed to avenge his death and put an end to Lassic forever.\n\nJoin her in a journey across time and space to worlds where creatures speak...where magic and science combine to take you on the ultimate video quest.\n\nThe battle system is turn-based, allowing the player to choose commands for up to four characters. Each of the eight characters has a different set of preferred weapons and armor, as well as techniques, suited to the character's job. The player must defeat enemies in the overworld and in dungeons to advance in the game.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Phantasy%20Star%20II%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650728350447
        },
        {
          "title": "Phantasy Star IV",
          "longTitle": "Phantasy Star IV",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Phantasy%20Star%20IV%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Phantasy%20Star%20IV%20(USA).png",
          "description": "Launch into the biggest RPG ever on Genesis! This is the explosive magic-and-monster packed FINALE to the incredible Phantasy Star saga. An ancient, hideous Dark Force stalks the Algol star system. You, a young hunter, are destined to become Motavia's greatest warrior and strike the death-blow that destroys evil FOREVER!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Phantasy%20Star%20IV%20%28USA%29.zip"
          },
          "added": 1650728362715
        },
        {
          "title": "Prince of Persia",
          "longTitle": "Prince of Persia",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Prince%20of%20Persia%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Prince%20of%20Persia%20(USA).png",
          "description": "The Grand Vizier Jaffar has thrown you into a dark dungeon and plans to marry the girl of your dreams in an hour. You're not going to let that happen are you? Try to escape from the dungeon, take out Jaffar's guards, find your way through the Sultan's palace and defeat Jaffar himself. Now go, you've got 60 minutes!\n\nPrince of Persia is a 2D platformer with run and jump gameplay. Your hero must avoid deadly traps, solve some simple puzzles and engage in sword fights with the guards. The player has an infinite amount of lives, but has to restart at the beginning of a level each time he dies, and must complete the game within an hour. An especially noteworthy aspect of the game is the very fluent animation of your character.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Prince%20of%20Persia%20%28USA%29.zip"
          },
          "added": 1650728366625
        },
        {
          "title": "Road Rash",
          "longTitle": "Road Rash",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Road%20Rash%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Road%20Rash%20(USA%2C%20Europe).png",
          "description": "Road Rash is an aggressive motorcycle racing game where the player assumes the role of a biker who takes part in a series of illegal races across the U.S.A. Starting at the back of the pack the objective is always to finish first on a linear course, overtaking the other bikers. This is achieved by driving very well or by playing it dirty, knocking opponents of their bikes using clubs, crowbars or your bare hands. The other racers fight back in a similar fashion and there are also hazards. All the races take place on the regular road with normal traffic (in both directions) and the cops, as well as occasional oil slicks and stray cows.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Road%20Rash%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650728391772
        },
        {
          "title": "Road Rash II",
          "longTitle": "Road Rash II",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Road%20Rash%20II%20(USA%2C%20Europe)%20(RR205).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Road%20Rash%20II%20(USA%2C%20Europe)%20(RR205).png",
          "description": "The races took place in the U.S. states of Alaska, Hawaii, Tennessee, Arizona, and Vermont, on progressively longer two-lane roads. Races would be won by placing first, second, or third in each of the five tracks (as opposed to the first game, which would allow a victory by placing fourth as well). After all five tracks were won, the player would advance to the next level, where the track would be longer, the opponents faster, and much more money at stake for a victory or a loss.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Road%20Rash%20II%20%28USA%2C%20Europe%29%20%28RR205%29.zip"
          },
          "added": 1650728398630
        },
        {
          "title": "Shadow Dancer - The Secret of Shinobi",
          "longTitle": "Shadow Dancer - The Secret of Shinobi",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Shadow%20Dancer%20-%20The%20Secret%20of%20Shinobi%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Shadow%20Dancer%20-%20The%20Secret%20of%20Shinobi%20(World).png",
          "description": "The gameplay remains basically unchanged from the Shadow Dancer coin-op game, the Mega Drive features all new stages and bosses, and a slightly different objective: instead of looking for time bombs, the player must now rescue hostages scattered around each stage before facing the boss. The bonus rounds were also changed from a first-person minigame to one in which the player must shoot down ninjas below them while skydiving from a building.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Shadow%20Dancer%20-%20The%20Secret%20of%20Shinobi%20%28World%29.zip"
          },
          "added": 1650728408608
        },
        {
          "title": "Shining Force",
          "longTitle": "Shining Force",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Shining%20Force%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Shining%20Force%20(USA).png",
          "description": "Shining Force is a turn-based tactical RPG. Battles take place in square grids, and each unit occupies 1 square. Each unit can move up to a fixed amount of squares along the battlefield, determined by its Move statistic. Depending on its location relative to enemies and to allies, a unit can also perform one action: attack, cast a spell, use an item, or search the area. Some commands, such as equipping or dropping items, don't count as actions. The order of turns is determined by the unit's agility score and a random seed.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Shining%20Force%20%28USA%29.zip"
          },
          "added": 1650732543691
        },
        {
          "title": "Shining Force II",
          "longTitle": "Shining Force II",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Shining%20Force%20II%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Shining%20Force%20II%20(USA).png",
          "description": "Shining Force II is a tactical role-playing game. The player assumes the role of the Shining Force leader, Bowie. When not in combat, the player can explore towns and other locales, talk with people, and set the members and equipment of the army. Some towns have a headquarters where the player can inspect and talk with his allies. While roaming through town or moving throughout the world, one can find both visible and hidden treasures and interact with certain objects.\nEach ally unit is represented by a character with a background and personality. Some of these characters are hidden, requiring specific events to occur before they will join the force. Each ally unit also has a class, which defines the abilities for that unit. These abilities range from what type of weapons they can use to what kind of spells they can learn. Units can become stronger by fighting enemies and performing various actions which gives them experience points (EXP), which allow them to gain levels. Once a unit reaches level 20, that character has the ability to advance to more powerful class through promotion. Some characters have two different classes they may be promoted to, one of which is only accessible using a special hidden item.\nBattles take place on a square grid, and each unit occupies a single square. Battle is turn-based. Each turn, a character can move and perform one action: either attack, cast a spell, or use an item. Some commands, such as equipping or dropping an item during the turn, do not count as actions.\nThe battle is won if all enemies are defeated, or if the enemy commander is defeated. If Bowie is defeated in combat or withdraws, the battle is lost and the player is returned to the nearest town, where he can recover his allies and fight the same battle again.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Shining%20Force%20II%20%28USA%29.zip"
          },
          "added": 1650728435183
        },
        {
          "title": "Shinobi III - Return of the Ninja Master",
          "longTitle": "Shinobi III - Return of the Ninja Master",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Shinobi%20III%20-%20Return%20of%20the%20Ninja%20Master%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Shinobi%20III%20-%20Return%20of%20the%20Ninja%20Master%20(USA).png",
          "description": "Shinobi III involves a ninja named Joe \"Shinobi\" Musashi (you) going and kicking some bad guy butt, in this case his old enemy \"Neo Zeed\".\n\nIn normal Shinobi style, you are presented with side-scrolling playfields which you must slash and shuriken your way through, to meet the end boss of each round.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Shinobi%20III%20-%20Return%20of%20the%20Ninja%20Master%20%28USA%29.zip"
          },
          "added": 1650728446677
        },
        {
          "title": "Sonic & Knuckles",
          "longTitle": "Sonic & Knuckles",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Sonic%20%26%20Knuckles%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Sonic%20%26%20Knuckles%20(World).png",
          "description": "The story picks up from the ending of Sonic 3 - Dr. Robotnik's orbital weapon, the Death Egg, has been badly damaged in the climactic battle between himself and Sonic The Hedgehog. As the satellite falls back to the Floating Island, landing in a volcanic crater, Sonic jumps off, landing in a mushroom filled woodland.\nSonic knows there are many Chaos Emeralds hidden on the island, including the powerful Super Emeralds and the Master Emerald, the secret to the island's levitation powers. Worried that Robotnik may try to harness this power to fuel a repaired Death Egg, he sets off to try and destroy the Death Egg once and for all, keeping an eye out for Knuckles the Echidna, still smarting from his Launch Base defeat.\nAt Hidden Palace, Sonic finds Knuckles there waiting for him. They fight and Sonic seems to emerge victorious when Knuckles flees from the duel after sensing someone is trying to steal the Master Emerald. Knuckles races ahead closely followed by Sonic to find Robotnik trying to steal the Master Emerald: It had been his plan all along to snatch it while Sonic and Knuckles were too busy dealing with each other. Realizing he had been tricked, Knuckles reacts by attacking Robotnik, which fails when Robotnik electrocutes Knuckles. Sonic tries to intervene but Robotnik stills manages to escape. Knuckles now realizes his mistake and that Sonic is in fact on his side. They join forces and teleport to Sky Sanctuary.\nAt Sky Sanctuary, Knuckles and Sonic watch the Death Egg launching in the background. Knuckles activates a bridge so Sonic can cross over. Sonic defeats a rebuilt Metal Sonic on the way to the Death Egg, and manages to board it before it leaves the atmosphere. Onboard the Death Egg, Sonic defeats Robotnik and destroys the ship once and for all, only for Robotnik to get away with the Master Emerald in one of his giant robots. If Sonic hasn't collected all seven Chaos Emeralds and/or Super Emeralds, the game ends here, and the ending in which the Master Emerald does not return to Angel Island occurs. After the credits, the player sees a scene with Robotnik still in possession of the Master Emerald.\nIf all the seven Chaos Emeralds and/or Super Emeralds are collected, Sonic transforms into Super Sonic or Hyper Sonic and chases Robotnik into the Doomsday Zone. After failing to lose him in an asteroid belt, Robotnik's machine is destroyed, Sonic and Tails return the Master Emerald, and the Floating Island becomes airborne once again. If the player didn't collect all the Super Emeralds, a scene occurs which shows an Egg Robo emerging from a pile of metal. If all Emeralds are collected, the player sees the Sonic 3 and Knuckles logo featuring Sonic, Tails, and Knuckles.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Sonic%20%26%20Knuckles%20%28World%29.zip"
          },
          "added": 1650728462726
        },
        {
          "title": "Sonic 3D Blast",
          "longTitle": "Sonic 3D Blast",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Sonic%203D%20Blast%20(USA%2C%20Europe%2C%20Korea).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Sonic%203D%20Blast%20(USA%2C%20Europe%2C%20Korea).png",
          "description": "Doctor Robotnik discovered that some strange birds, called Flickies, live on an island in an alternate dimension. He learned that they can travel anywhere using large rings, so he decided to exploit them by turning them into robots to help him search for the Chaos Emeralds. One day, Sonic visited Flickies' Island and saw what Robotnik had done to them. He decided to free the Flickies and stop Robotnik from finding the Emeralds.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Sonic%203D%20Blast%20%28USA%2C%20Europe%2C%20Korea%29%20%28En%29.zip"
          },
          "added": 1650728480766
        },
        {
          "title": "Sonic The Hedgehog",
          "longTitle": "Sonic The Hedgehog",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Sonic%20The%20Hedgehog%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Sonic%20The%20Hedgehog%20(USA%2C%20Europe).png",
          "description": "When Dr. Eggman was hatching his plans for a global takeover, there was one little thing he didn't count on - Sonic The Hedgehog! Our blue hero zips, flips, and spins through the levels at lightning speed to collect the Chaos Emerald and restore World Order.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Sonic%20The%20Hedgehog%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650728486286
        },
        {
          "title": "Sonic The Hedgehog 2",
          "longTitle": "Sonic The Hedgehog 2",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Sonic%20The%20Hedgehog%202%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Sonic%20The%20Hedgehog%202%20(World).png",
          "description": "The gameplay of Sonic the Hedgehog 2 builds upon the basic set-up of the original Sonic the Hedgehog game. The player finishes each level, generally moving from left to right, within a time limit of 10 minutes.  Along the way, rings are collected and Badniks are defeated. Star posts serve as checkpoints, where if the player was to lose a life then he or she would return to one.  When the player has collected at least 50 rings, star posts can be run past for an optional Special Stage.  At the end of the last act of each zone (with the exception of Sky Chase Zone which does not have a boss), Sonic confronts Dr. Robotnik.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Sonic%20The%20Hedgehog%202%20%28World%29.zip"
          },
          "added": 1650728491349
        },
        {
          "title": "Sonic The Hedgehog 3",
          "longTitle": "Sonic The Hedgehog 3",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Sonic%20The%20Hedgehog%203%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Sonic%20The%20Hedgehog%203%20(USA).png",
          "description": "In single player mode, the player can choose to play solo, as either Sonic or Tails, or as a team, controlling Sonic, with the AI controlling Tails, which is the default configuration. Another player may take control of Tails at any time by using a controller plugged into port 2. The object of the game is to progress through the levels. In order to completely finish the game, seven Chaos Emeralds must also be collected from the special stages.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Sonic%20The%20Hedgehog%203%20%28USA%29.zip"
          },
          "added": 1650728504641
        },
        {
          "title": "Streets of Rage",
          "longTitle": "Streets of Rage",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Bare%20Knuckle%20-%20Ikari%20no%20Tekken%20(World).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Bare%20Knuckle%20-%20Ikari%20no%20Tekken%20(World).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Streets%20of%20Rage%20%28World%29.zip"
          },
          "added": 1650727633982,
          "description": "Streets of Rageis a series of side-scrolling beat 'em up video games, centering on the efforts of several ex-police vigilantes trying to rid a fictional, large American city from a crime syndicate that has corrupted its local government. The first three games in the franchise were developed and published by Sega for the Sega Genesis in the early 1990s and have since been ported and re-released on various platforms. \n\nThe games were well-received and have been re-released many times both on compilations and as standalone games. The electronic dance music soundtracks of the games, scored primarily by Yuzo Koshiro and Motohiro Kawashima, have also received praise."
        },
        {
          "title": "Streets of Rage 2",
          "longTitle": "Streets of Rage 2",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Streets%20of%20Rage%202%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Streets%20of%20Rage%202%20(USA).png",
          "description": "A year has passed since the events of Streets of Rage. To celebrate the defeat of the mysterious \"Mr. X\" and his syndicate the previous year, Adam Hunter, Axel Stone, and Blaze Fielding met at their favorite nightspot in the city and spent their time reminiscing about their vigilante crusade against \"Mr. X\" and his organization. Axel and Blaze had moved out of the city after the adventure from last year. Axel has begun working as a part-time bodyguard and Blaze teaches dance classes. Adam has since rejoined the police force and lives in a small house with his younger brother.\nThe next morning, Axel received a phone call from Eddie 'Skate' Hunter, Adam's younger brother. Skate had arrived at home from school and was shocked to find his house in ruin and his older brother missing. Attached to the front door was a picture of Adam chained to a wall at the feet of Mr. X. The criminals began to retake the streets once more. Beatings and lootings took place regularly and in broad daylight. Chaos reigned in the city, far worse than before.\nRealizing that \"Mr. X\" and his syndicate has returned for revenge against him, Blaze, and Adam, Axel wastes no time in telling Blaze about the unexpected situation and Blaze herself is determined to help Axel out in defeating \"Mr. X\" and rescuing Adam. Accompanied by Adam's young brother Skate and Axel's friend, a professional wrestler named Max Thunder, Axel and Blaze set forth on a rescue mission, which will take them from the city all the way to \"Mr. X\"'s hideout on a desolate island.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Streets%20of%20Rage%202%20%28USA%29.zip"
          },
          "added": 1650732480798
        },
        {
          "title": "Streets of Rage 3",
          "longTitle": "Streets of Rage 3",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Streets%20of%20Rage%203%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Streets%20of%20Rage%203%20(USA).png",
          "description": "After being defeated twice, Syndicate crime boss Mr. X has started a research company called RoboCy Corporation to act as a cover for his illegal activities. The world's best roboticist, Dr. Dahm, has been brought in to help him create an army of realistic robots to replace important officials from the city. With the replacements in place, Mr. X plans to run the city using a remote control device. His criminal organization, The Syndicate, has strategically placed bombs around the city to distract the police while the city officials are dealt with.\n\nDr. Zan discovers what the research is really for and knows the Syndicate must be stopped. He contacts Blaze Fielding with the details of The Syndicate's plan. Blaze quickly contacts her old comrades Axel Stone and Adam Hunter for a task force to bring down The Syndicate once and for all. Axel quickly joins the task force, but Adam can't make it (due to his own assignments from within the police) and sends his young brother, Eddie \"Skate\" Hunter instead. The game has four endings depending on the difficulty level and if the player defeats certain levels in an alloted amount of time.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Streets%20of%20Rage%203%20%28USA%29.zip"
          },
          "added": 1650732488331
        },
        {
          "title": "Super Fantasy Zone",
          "longTitle": "Super Fantasy Zone",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Super%20Fantasy%20Zone%20(Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Super%20Fantasy%20Zone%20(Europe).png",
          "description": "The next-gen sequel to Fantasy Zone, Super Fantasy Zone starts as a strange gravitational force appears in the Menon planet, home of the evil Menon empire and thus a new threat looms over the Fantasy Zone.\n\nIn a sudden strike by the Menon forces O-Papa, Opa-Opa's father, is fatally wounded. Thus Opa-Opa once again sets forth to destroy the Menon empire and avenge his father.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Super%20Fantasy%20Zone%20%28USA%29%20%28Ja%29%20%28Genesis%20Mini%29.zip"
          },
          "added": 1650728514631
        },
        {
          "title": "Teenage Mutant Ninja Turtles - The Hyperstone Heist",
          "longTitle": "Teenage Mutant Ninja Turtles - The Hyperstone Heist",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Teenage%20Mutant%20Ninja%20Turtles%20-%20The%20Hyperstone%20Heist%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Teenage%20Mutant%20Ninja%20Turtles%20-%20The%20Hyperstone%20Heist%20(USA).png",
          "description": "Shredder steals the powerful Hyperstone to shrink New York City and it's up to you to teach that treacherous troublemaker not to mess with the fearless foursome! Pick your favorite Cowabunga commando to slash through 5 lawless levels of lambasting. Four levels each have 3 intense stages and the other is packed with brand new challenges that will make you hurl your pizza lunch. Pulverize shrink-happy Shredder before he pockets our whole planet!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Teenage%20Mutant%20Ninja%20Turtles%20-%20The%20Hyperstone%20Heist%20%28USA%29.zip"
          },
          "added": 1650728534597
        },
        {
          "title": "The Revenge of Shinobi",
          "longTitle": "The Revenge of Shinobi",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Revenge%20of%20Shinobi%2C%20The%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Revenge%20of%20Shinobi%2C%20The%20(USA%2C%20Europe).png",
          "description": "You are Musashi, master ninja. You are one of the mystic warriors, who see and know all things. You are deadly! Now you must destroy the vicious army of Neo Zeed. If you fail, then Naoko, their beautiful prisoner, dies! Attack with a ninja sword and crossed daggers! Somersault over fences while hurling deadly knives! Ward off bullets, Death Stars, and junked cars by leaping, twisting, and kicking! The Neo Zeed are masters of disguise. But you are a master of Shinobi, the art of stealth. You'll stalk the Neo Zeed through 24 treacherous scenes, while they stalk you! Battle ninja, musclemen, deadly lasers, and the diabolical Boss! Outfight Kung Fu gangs and armies of machine gunners. The Neo Zeed is almost unstoppable, but you have a secret weapon - ninja magic!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Revenge%20of%20Shinobi%2C%20The%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650728384599
        },
        {
          "title": "Thunder Force III",
          "longTitle": "Thunder Force III",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Thunder%20Force%20III%20(Japan%2C%20USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Thunder%20Force%20III%20(Japan%2C%20USA).png",
          "description": "This masterpiece of shooting games takes you to a world of extraordinary proportions. It's the sequel to the explosive conflict that erupted in Thunder Force II. The unique backdrops scroll in three dimensions and offer you numerous surprises beyond imagination. Battle the enemy with a wide array of highly sophisticated weaponry. The menacing boss vehicles at the end of every stage have abilities unlike anything you've ever experienced.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Thunder%20Force%20III%20%28Japan%2C%20USA%29%20%28En%29.zip"
          },
          "added": 1650728541657
        },
        {
          "title": "ToeJam & Earl",
          "longTitle": "ToeJam & Earl",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/ToeJam%20%26%20Earl%20(USA%2C%20Europe%2C%20Korea).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/ToeJam%20%26%20Earl%20(USA%2C%20Europe%2C%20Korea).png",
          "description": "ToeJam & Earl has been called a surreal, comic satire, and a \"daringly misanthropic commentary on Earthly life\". The game's protagonists, ToeJam and Earl, have been described as a \"three-legged red alien\" and \"fat orange alien\", respectively. ToeJam wears a large gold medallion and a backwards baseball cap, while Earl is marked by high-tops and oversized sunglasses; both outfits are \"over-the-top appropriations\" of 1990s urban culture. Their speech features California slang. The game is set to a soundtrack which has been described both as jazz-funk, and as hip hop. For the game's unique sound, composer John Baker was inspired by Herbie Hancock and The Headhunters.\n\nIn the game's opening sequence, ToeJam explains that Earl's erratic piloting abilities have resulted in a crash-landing on Earth. He says that they must find the pieces of their spacecraft's wreckage to return to their home planet, Funkotron. The player guides the characters as they avoid Earth's antagonistic inhabitants and search for the debris. Should the player succeed, the final sequence depicts ToeJam and Earl escaping the planet in their reconstructed spacecraft. Under the player's control, the characters proceed across a purple landscape that represents Funkotron, and are greeted by their friends and family.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/ToeJam%20%26%20Earl%20%28USA%2C%20Europe%2C%20Korea%29%20%28En%29.zip"
          },
          "added": 1650728559639
        },
        {
          "title": "Valis III",
          "longTitle": "Valis III",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Valis%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Valis%20III%20(USA).png",
          "description": "Somewhere in the Dark World, evil rears its ugly head once again...\nA black-hearted man named Glames, possessor of a sword named Leethus, threatens the Human World, the Dream World, and the Dark World with complete and utter destruction. A young girl from the Dark World named Cham escapes from Glames, and seeks help to destroy him.\nShe comes to the Human World, searching for the Valis Warrior, Yko Asou, and more importantly, the Valis Sword.\nYuko must now help Cham defeat Glames before the three worlds are torn apart!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Valis%20III%20%28USA%29.zip"
          },
          "added": 1650728565632
        },
        {
          "title": "Virtua Fighter 2",
          "longTitle": "Virtua Fighter 2",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Virtua%20Fighter%202%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Virtua%20Fighter%202%20(USA%2C%20Europe).png",
          "description": "Virtua Fighter 2 for the Mega Drive is a fighting game developed by Sega released in North America and Europe in 1996.\n\nVirtua Fighter 2 is a vastly watered down version of Virtua Fighter 2, a game originally released for Sega Model 2A CRX arcade hardware in 1995 (and subsequently ported to the Sega Saturn. Unlike any other version of Virtua Fighter 2, this on the Mega Drive is rendered entirely in 2D, with more traditional hand-drawn sprites replacing the motion-captured 3D models of the arcade game.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Virtua%20Fighter%202%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650728579842
        },
        {
          "title": "Virtua Racing",
          "longTitle": "Virtua Racing",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Virtua%20Racing%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Virtua%20Racing%20(USA).png",
          "description": "Virtua Racing is a home port of Sega's first ever 3D, polygon-based racing game for the arcade. The game consists of racing Formula-1-looking cars around a beginner, intermediate, or expert track, competing against a second player or computer drivers. Despite having Formula-1 cars, the game controls are very \"arcadey\" and players can see the leap they made from here to Daytona.\n\nThe Megadrive/Genesis version of Virtua Racing is of note as it is the only game for the system which features the SVP chip (Sega Virtua Processor). The chip is a 3D processor built into each cartridge (the console itself had no 3D capability) and is very similar to the SNES's SuperFX chips, used in games such as Starfox and Stunt Race FX.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Virtua%20Racing%20%28USA%29.zip"
          },
          "added": 1650729699464
        },
        {
          "title": "Wonder Boy in Monster World",
          "longTitle": "Wonder Boy in Monster World",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Wonder%20Boy%20in%20Monster%20World%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Wonder%20Boy%20in%20Monster%20World%20(USA%2C%20Europe).png",
          "description": "Wonder Boy In Monster World puts you in control of Shion in his quest to save Monster World from the evil BioMeka. It controls like your standard platform game: run, jump, and kill enemies. The game is filled with RPG elements such as talking to townsfolk, collecting money to buy items, extending your life bar, and equipping a large variety of armor, weapons and magic.\n\nShion travels through the many interconnected regions of Monster World, all the while collecting increasingly powerful equipment in the form of many different swords, spears, shields, suits of armor, and boots.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Wonder%20Boy%20in%20Monster%20World%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650732568754
        },
        {
          "title": "Worms",
          "longTitle": "Worms",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Worms%20(Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Worms%20(Europe).png",
          "description": "Worms is a critically acclaimed turn based strategy game designed for the Commodore Amiga and ported to a variety of platforms including the Sega Mega Drive and Sega Saturn. It was the first in the series of Worms games, which continue to this day and still largely share the same gameplay as the original.\n\nThe game involves the player controlling a team of worms, each supplied with a variety of different weapons, and the aim is to eliminate all the enemy worms. Worms was revolutionary at the time due to the randomly generated and fully destructaile landscapes that the game employs, so an explosion will leave a huge crater and a different strategy may need to be divised.\n\nAs it is turn-based, the game allows up to 16 players to take control of units (though there is only ever a maximum of four teams).",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Worms%20%28Europe%29.zip"
          },
          "added": 1650728591738
        },
        {
          "title": "Ys III",
          "longTitle": "Ys III",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Ys%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Ys%20III%20(USA).png",
          "description": "Ys III: Wanderers from Ys breaks away from the \"bumping into enemies\" battle system of the first two games, allowing Adol to control his sword in a variety of directions. Beside changing the battle system, the game's perspective switches to a side-scrolling view, as opposed to the top-down one of the previous games. Adol also has the ability to jump now. New to the series is the use of magical rings, which give Adol different powering-up abilities such as healing and shielding. The game also uses various key items found along the way to solve minor puzzles and progress the story.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Ys%20III%20%28USA%29.zip"
          },
          "added": 1650728601702
        },
        {
          "title": "Zero Wing",
          "longTitle": "Zero Wing",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Zero%20Wing%20(Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Zero%20Wing%20(Europe).png",
          "description": "Zero Wing is an horizontal shooter game where the player is in control of a ZIG, an escape pod released after its main ship was attacked and destroyed by the evil cyborg CATS, bent on taking over the world.\n\nLike most games in the genre, there are three color-coded weapons: red (scatter), green (homing) and blue (lasers). Each weapon has three levels of power, and to obtain those, similar upgrades must be collected sequentially. However, what makes the game unique is the ability to use a traction beam to trap an enemy and then throw him against his peers, destroying them.\n\nThe game (more precisely, the European PAL version of it) is known for being the origin of the grammatically incorrect phrase in the English translation, All your base are belong to us, which has since become an internet phenomenon.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Zero%20Wing%20%28Europe%29.zip"
          },
          "added": 1650728605720
        },
        {
          "title": "Phantasy Star III - Generations of Doom",
          "longTitle": "Phantasy Star III - Generations of Doom",
          "type": "genesis",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Snaps/output/Phantasy%20Star%20III%20-%20Generations%20of%20Doom%20(USA%2C%20Europe%2C%20Korea).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-genesis-images/master/Named_Titles/resized/Phantasy%20Star%20III%20-%20Generations%20of%20Doom%20(USA%2C%20Europe%2C%20Korea).png",
          "description": "Phantasy Star III is a sequel to the previous game in the series, Phantasy Star II, although the connections to other games in the Phantasy Star series are not immediately evident. Gameplay is similar to the games before it in the series, with combat still being turn-based and battles randomly occurring. Players must explore both overworld maps and dungeons in order to progress through the game.\n\nPhantasy Star III mostly follows the traditional roleplaying game formula seen throughout the series, with exploration of several 2-D worlds, character recruitment, and random enemy encounters using a turn-based battle system. Unlike previous games, the series staple of \"techniques\" play a diminished role in combat, which is ironic considering the role they play in differentiating the game's two major factions - with techniques being exclusive to Layans, and viewed as \"evil magic\" by the Orakians.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Mega%20Drive%20-%20Genesis/Phantasy%20Star%20III%20-%20Generations%20of%20Doom%20%28USA%2C%20Europe%2C%20Korea%29%20%28En%29.zip"
          },
          "added": 1730582297974
        }
      ],
      "longTitle": "Sega Genesis",
      "description": "The Sega Genesis, known as the Mega Drive outside North America, is a 16-bit fourth-generation home video game console developed and sold by Sega. The Genesis was Sega's third console and the successor to the Master System. Sega released it in 1988 in Japan as the Mega Drive, and in 1989 in North America as the Genesis. In 1990, it was distributed as the Mega Drive by Virgin Mastertronic in Europe, Ozisoft in Australia, and Tec Toy in Brazil. In South Korea, it was distributed by Samsung as the Super Gam*Boy and later the Super Aladdin Boy. In Russia, it was distributed by Forrus.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/2/26/Sega-Genesis-Mod1-Set.png",
      "backgroundPixelated": false,
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/genesis-thumb.png?raw=true"
    },
    {
      "title": "SCD",
      "longTitle": "Sega CD",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/segacd-thumb.png?raw=true",
      "background": "https://i.ibb.co/XS79kCv/Sega-CD-Model1-Set.png",
      "description": "The Sega CD, known as Mega-CD in most regions outside North America and Brazil, is a CD-ROM accessory for the Sega Genesis produced by Sega as part of the fourth generation of video game consoles. It was released on December 12, 1991, in Japan, October 15, 1992, in North America, and April 2, 1993, in Europe. The Sega CD plays CD games and adds hardware functionality such as a faster CPU and graphic enhancements such as sprite scaling and rotation. It can also play audio CDs and CD+G discs.",
      "items": []
    },
    {
      "title": "GG",
      "longTitle": "Sega Game Gear",
      "description": "The Game Gear is an 8-bit fourth generation handheld game console released by Sega on October 6, 1990 in Japan and in April 1991 throughout North America and Europe. The Game Gear primarily competed with Nintendo's Game Boy, the Atari Lynx, and NEC's TurboExpress. It shares much of its hardware with the Master System.",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/gamegear-thumb.png?raw=true",
      "background": "https://i.ibb.co/5KNK47C/Game-Gear-Handheld.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "Ax Battler - A Legend of Golden Axe",
          "longTitle": "Ax Battler - A Legend of Golden Axe",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Ax%20Battler%20-%20A%20Legend%20of%20Golden%20Axe%20(USA%2C%20Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Ax%20Battler%20-%20A%20Legend%20of%20Golden%20Axe%20(USA%2C%20Europe%2C%20Brazil).png",
          "description": "Use your wits and your razor sharp sword to recapture the Golden Axe from the diabolical Death Adder. Defeat skeletons and giant bats in dark, deep chasms and caves. And summon Earth, Thunder and Fire Magic to fight gargoyles that come to life before your eyes!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Ax%20Battler%20-%20A%20Legend%20of%20Golden%20Axe%20%28USA%2C%20Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727265676
        },
        {
          "title": "Dr. Robotnik's Mean Bean Machine",
          "longTitle": "Dr. Robotnik's Mean Bean Machine",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Dr.%20Robotnik's%20Mean%20Bean%20Machine%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Dr.%20Robotnik's%20Mean%20Bean%20Machine%20(USA%2C%20Europe).png",
          "description": "Evil Dr. Robotnik has invented a machine that turns good folks into rotten robots! In Mobius, the famous home of Sonic The Hedgehog, village bean folk are being rounded up and thrown into the Doctor's dungeons, there to await their turn in the steamer!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Dr.%20Robotnik%27s%20Mean%20Bean%20Machine%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650727271590
        },
        {
          "title": "Dragon Crystal",
          "longTitle": "Dragon Crystal",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Dragon%20Crystal%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Dragon%20Crystal%20(USA%2C%20Europe).png",
          "description": "As the player rides a bicycle one late afternoon, he turns down an alley never before noticed and enters an antique shop. There, a mysterious glowing crystal is sitting on a shelf. Upon approaching the crystal and gazing into it, a powerful force pulls the player in, causing a blackout.\n\nThe player awakens in a forest with a large egg following behind. This forest is a huge maze, crawling with dangerous creatures. The player finds weapons and other items scattered around with which to fight the monsters. The only way out is to continue onward, defeating monsters and growing in power along the way.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Dragon%20Crystal%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650727282581
        },
        {
          "title": "Land of Illusion Starring Mickey Mouse",
          "longTitle": "Land of Illusion Starring Mickey Mouse",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Land%20of%20Illusion%20Starring%20Mickey%20Mouse%20(USA%2C%20Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Land%20of%20Illusion%20Starring%20Mickey%20Mouse%20(USA%2C%20Europe%2C%20Brazil).png",
          "description": "Mickey finds himself in a fairy tale land where an evil Phantom-in-the-Clouds has stolen a special gem which brought peace and prosperity to a tiny village. It's up to you to help him save the day - and earn a place in Minnie's heart!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Land%20of%20Illusion%20Starring%20Mickey%20Mouse%20%28USA%2C%20Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727289594
        },
        {
          "title": "Vampire - Master of Darkness",
          "longTitle": "Vampire - Master of Darkness",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Vampire%20-%20Master%20of%20Darkness%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Vampire%20-%20Master%20of%20Darkness%20(USA).png",
          "description": "You must hunt down Dracula, the Master of Darkness, and defeat him before all of England is in his terrifying grasp! Do you have both the skills and the courage to battle past his ghoulish minions so that you can face this monster and save the day?",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Vampire%20-%20Master%20of%20Darkness%20%28USA%29.zip"
          },
          "added": 1650727301558
        },
        {
          "title": "Mega Man",
          "longTitle": "Mega Man",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Mega%20Man%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Mega%20Man%20(USA).png",
          "description": "Mega Man is a video game in the eponymous series that was developed by Freestyle and released exclusively in North America by U.S. Gold for the Sega Game Gear in 1994. Despite the title, it is not a remake of the original Mega Man, but an original title that uses elements from Mega Man 2, 4, and 5 in the same vein as the Mega Man games for the Game Boy. It is also the only Mega Man game released for the Game Gear handheld system.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Mega%20Man%20%28USA%29.zip"
          },
          "added": 1650727306592
        },
        {
          "title": "Shining Force - The Sword of Hajya",
          "longTitle": "Shining Force - The Sword of Hajya",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Shining%20Force%20-%20The%20Sword%20of%20Hajya%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Shining%20Force%20-%20The%20Sword%20of%20Hajya%20(USA).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Shining%20Force%20-%20The%20Sword%20of%20Hajya%20%28USA%29.zip"
          },
          "added": 1650727318168,
          "description": "Shining Force: The Sword of Hajya is a 1993 tactical role-playing game for the Sega Game Gear.\n\nIt is not to be confused with Shining Force II, as this Gaiden II is the sequel to the original Shining Force Gaiden. Along with the original Gaiden, The Sword of Hajya was remade as Shining Force CD, which contains two new scenarios that further continue the story of Cypress."
        },
        {
          "title": "Sonic Chaos",
          "longTitle": "Sonic Chaos",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Sonic%20Chaos%20(USA%2C%20Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Sonic%20Chaos%20(USA%2C%20Europe%2C%20Brazil).png",
          "description": "The storyline to Sonic Chaos, like most Sonic stories, revolves around Dr. Robotnik and his quest for world domination via the mythical Chaos Emeralds. The Emeralds are the source of vitality for all living things, but they could be turned into nuclear bombs and laser weapons in the hands of the rotten Dr. Robotnik.\n\nDr. Robotnik has stolen the Red Chaos Emerald, causing the other five to \"lose balance\" and scatter themselves into a parallel universe. As a result of the instability, South Island is now sinking into the ocean. It is up to Sonic and Tails to find the Chaos Emeralds and restore harmony to the universe, or else the innocent residents of South Island will find themselves taking a long swim.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Sonic%20Chaos%20%28USA%2C%20Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727334206
        },
        {
          "title": "Sonic Drift 2",
          "longTitle": "Sonic Drift 2",
          "type": "gg",
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Sonic%20Drift%202%20%28World%29.zip"
          },
          "added": 1650732683632,
          "thumbnail": "http://retrocdn.net/images/c/cc/Sonic_Drift_2_title.png",
          "background": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR1Vtob75uxlCoDslJiltrimREFaliwW7ReBsW3wQ0yHh4BgX1b0o8TXD36DRTsloRpAoM&usqp=CAU",
          "backgroundPixelated": true,
          "description": "Sonic Drift 2, released in Europe as Sonic Drift Racing, is a kart racing video game by Sega for the Game Gear. The sequel to Sonic Drift, it was released in Japan and Europe in March 1995 and in North America in November 1995. It added three characters: Knuckles, Fang the Sniper, and Metal Sonic, and marked the first time the last two were playable characters.\n\nThe gameplay is similar to Sonic Drift, but with minor changes. In the Chaos GP mode, players are awarded with Chaos Emeralds should they come in 1st within a GP. Alongside Sonic, Tails, Amy, and Dr. Eggman, there are three additional playable characters: Metal Sonic, Fang, and Knuckles."
        },
        {
          "title": "Sonic The Hedgehog - Triple Trouble",
          "longTitle": "Sonic The Hedgehog - Triple Trouble",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Sonic%20The%20Hedgehog%20-%20Triple%20Trouble%20(USA%2C%20Europe%2C%20Brazil).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Sonic%20The%20Hedgehog%20-%20Triple%20Trouble%20(USA%2C%20Europe%2C%20Brazil).png",
          "description": "Sonic and Tails are back with three times the fun and three times the trouble! Dr. Robotnik is building the ultimate super-weapon with the help of Knuckles, but you can stop him by getting the Chaos Emeralds first. Rip across snow and water on Sonic's new jet skateboard or zip underwater in Tails' \"Sea Fox\". But look out - Nack the Weasel is after the Emeralds, too!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Sonic%20The%20Hedgehog%20-%20Triple%20Trouble%20%28USA%2C%20Europe%2C%20Brazil%29%20%28En%29.zip"
          },
          "added": 1650727354607
        },
        {
          "title": "Super Off Road",
          "longTitle": "Super Off Road",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Super%20Off%20Road%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Super%20Off%20Road%20(USA%2C%20Europe).png",
          "description": "Super Off Road is the ultimate off-road racing event. Four tough trucks speed around rough and ready tracks packed with pitfalls, power-boosters and prizes. No one knows the meaning of sportsmanship here. Have you got the skill and determination to come out on top?",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Super%20Off%20Road%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1650727397644
        },
        {
          "title": "Tails Adventure",
          "longTitle": "Tails Adventure",
          "type": "gg",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Snaps/output/Tails%20Adventure%20(World)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-gg-images/master/Named_Titles/resized/Tails%20Adventure%20(World)%20(En%2CJa).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Sega%20-%20Game%20Gear/Tails%20Adventure%20%28World%29%20%28En%2CJa%29.zip"
          },
          "added": 1650727363333,
          "description": "Tails Adventure is a platform game developed by Aspect and published by Sega in 1995 for the Game Gear. The game stars Tails from the Sonic the Hedgehog series in a solo adventure, as he collects an array of items to help him explore Tails Island and defeat the enemies inhabiting it. The gameplay is more slow-paced than other Sonic games, with Tails only capable of walking and flying at a moderate speed. The stages are explored in a non-linear fashion, with newly collected items opening up pathways in previous areas."
        }
      ]
    },
    {
      "title": "PSX",
      "longTitle": "Sony PlayStation",
      "description": "The PlayStation is a home video game console developed and marketed by Sony Computer Entertainment. It was released in Japan on 3 December 1994, in North America on 9 September 1995, in Europe on 29 September 1995, and in Australia on 15 November 1995. As a fifth-generation console, the PlayStation primarily competed with the Nintendo 64 and the Sega Saturn.\n\nSony began developing the standalone PlayStation after a failed venture with Nintendo to create a CD-ROM peripheral for the Super Nintendo Entertainment System in the early 1990s. The console was primarily designed by Ken Kutaragi and Sony Computer Entertainment in Japan, while additional development was outsourced in the United Kingdom. An emphasis on 3D polygon graphics was placed at the forefront of the console's design. PlayStation game production was designed to be streamlined and inclusive, enticing the support of many third-party developers.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/9/95/PSX-Console-wController.png",
      "backgroundPixelated": false,
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/psx-thumb.png?raw=true",
      "items": [
        {
          "props": {
            "uid": "335c43e8-c628-48da-bae3-d031a0e859ce",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Ape%20Escape%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Ape Escape",
          "description": "Ape Escape is arguably one of PlayStation's most original platform titles. The game exclusively used Sony's Dual Shock controller and required the player to use both analog sticks to control the game's hero. Ape Escape is the story of a band of rogue monkeys that escape from the amusement park and mistakenly break into a genius professor's laboratory. They find the inventions called the Peak Point Helmets and instantly become intelligent, with a particularly ingenious simian named Specter running the others. In a theme reminiscent of Planet of the Apes, these little creeps plan on changing history so that apes rule the world and humankind becomes the special attraction at amusement parks. The premise was damn cool...and more importantly, it had monkeys!",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Ape%20Escape%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Ape%20Escape%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Ape Escape",
          "added": 1665744721541
        },
        {
          "props": {
            "uid": "ff905142-b4a1-460e-a54a-92acefd42634",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Castlevania%20-%20Symphony%20of%20the%20Night%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Castlevania - Symphony of the Night",
          "description": "Five years ago, Richter Belmont, the latest in the Belmont lineage and the one destined to be a Vampire Hunter, defeated Dracula in a brutal battle which nearly cost him the love of his life, Annette, and her sister, Maria. Now, Richter has suddenly vanished, CastleVania has mysteriously reappeared, and Maria, now a young woman, sets off to find Richter. Alucard, the son of Dracula, is awakened from his eternal slumber after this large shift in power, and enters into Castlevania to find some answers and perhaps destroy the castle once again.\n\nSymphony of the Night is a direct sequel to Dracula X: Rondo of Blood. The game is set in a castle which you can explore freely with many different paths, although often items in certain areas need to be found that will allow passage to others. The action-based gameplay incorporates now strong RPG elements. The hero receives experience points for defeating enemies, gains levels and becomes more powerful. There is also money to be found in the game, and various accessories to buy. In a separate screen, players need to equip attack weapons, shields and other items. Magic plays an important role, as well as secondary weapons and a large amount of \"special moves\" that are executed similar to advanced one-on-one fighting games.\n\nThe Saturn release adds two new areas to the castle (the Underground Garden and the Haunted Path), a third playable character (Maria), and a few new remixed music tracks. However, it sacrifices a few of the graphical effects from the PlayStation version, particularly true transparencies. All other releases are based on the PlayStation version, and do not feature these changes.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Castlevania%20-%20Symphony%20of%20the%20Night%20(Asia).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Castlevania%20-%20Symphony%20of%20the%20Night%20(Asia).png",
          "backgroundPixelated": true,
          "longTitle": "Castlevania - Symphony of the Night",
          "added": 1665744494638
        },
        {
          "props": {
            "uid": "a90a21ae-9787-413c-b9aa-6db50a0227b3",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Chrono%20Cross%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Chrono%20Cross%20%28USA%29%20%28Disc%202%29.chd"
            ]
          },
          "type": "psx",
          "title": "Chrono Cross",
          "description": "Chrono Cross features standard RPG gameplay with some differences. Players advance the game by controlling the protagonist Serge through the game's world, primarily by foot and boat. Navigation between areas is conducted via an overworld map, much like Chrono Trigger's, depicting the landscape from a scaled down overhead view. Around the island world are villages, outdoor areas, and dungeons, through which the player moves in three dimensions. Locations such as cities and forests are represented by more realistically scaled field maps, in which players can converse with locals to procure items and services, solve puzzles and challenges, or encounter enemies. Like Chrono Trigger, the game features no random encounters; enemies are openly visible on field maps or lie in wait to ambush the party",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Chrono%20Cross%20(Japan%2C%20Asia)%20(Disc%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Chrono%20Cross%20(Japan%2C%20Asia)%20(Disc%201).png",
          "backgroundPixelated": true,
          "longTitle": "Chrono Cross",
          "added": 1665744569590
        },
        {
          "props": {
            "uid": "731a9b38-320f-40ab-aca6-84f873aa1dda",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Crash%20Bandicoot%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Crash Bandicoot",
          "description": "Crash Bandicoot, a heroic, agile and mutated marsupial who must save his girlfriend Tawna. The main antagonist is Doctor Neo Cortex, a mad scientist who was often ridiculed by the scientific community for his outlandish (but nearly workable) theories and is now motivated to prove his tormentors wrong by creating a mutated army of beasts to conquer the world. Cortex's henchman is Doctor Nitrus Brio, the insecure creator of the Evolvo-Ray. Crash's love interest is Tawna, a female bandicoot about to undergo experimentation by the Doctors. Helping Crash in his journey is an ancient witch doctor spirit named Aku Aku, who has scattered masks of himself throughout the islands to grant Crash special powers. The boss characters of the game include Papu Papu, the obese and short-tempered chief of the native village; Ripper Roo, a demented kangaroo with razor-sharp toenails; Koala Kong, a muscular but unintelligent koala; and Pinstripe Potoroo, the tommy gun-wielding bodyguard of Doctor Cortex.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Crash%20Bandicoot%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Crash%20Bandicoot%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Crash Bandicoot",
          "added": 1665744052089
        },
        {
          "props": {
            "uid": "7563bc88-7c46-4f47-a2c4-fd97116a3646",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Crash%20Bandicoot%20-%20Warped%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Crash Bandicoot - Warped",
          "description": "The third title in Sony's popular Crash Bandicoot series, Crash Bandicoot 3 is the first to feature Coco as a playable character, and uses the \"tunnel\" 3D popularized in the earlier Crash games. \n\nAs in Crash Bandicoot 2 you have to collect 25 crystals that are scattered across time before your enemy Dr. Neo Cortex does. But this time the evil witch doctor Uka Uka is with Cortex to find the crystals and take over the world. With help from N. Tropy they build a Time Twister Machine to travel through time with. Crash and Coco must also use the Time Twister for gathering crystals, as usual with the help from the good witch doctor Aku Aku. \n\nBut there are also 42 gems scattered across time, just like in Crash 2. You must find them as well in order to complete the game. When you have collected all of the 25 crystals, then you can take on Cortex and Uka Uka.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Crash%20Bandicoot%20-%20Warped%20(USA).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Crash%20Bandicoot%20-%20Warped%20(USA).png",
          "backgroundPixelated": true,
          "longTitle": "Crash Bandicoot - Warped",
          "added": 1665744104422
        },
        {
          "props": {
            "uid": "0e2a94b5-5f71-4341-ba5b-099992d8dcd6",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Crash%20Bandicoot%202%20-%20Cortex%20Strikes%20Back%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Crash Bandicoot 2 - Cortex Strikes Back",
          "description": "After the last battle with Crash Bandicoot, Cortex is thrown down to Crash' island. In a cave he finds a crystal which he finds out holds great powers. Cortex plans to use these powers for an improved Cortex Vortex which will turn everyone on Earth into his mindless slaves. But in order to do that he has to find 25 other crystals to power the Cortex Vortex. He recruits his old enemy, Crash, to find them, but Crash doesn't know about Cortex' evil plans.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Crash%20Bandicoot%202%20-%20Cortex%20Strikes%20Back%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Crash%20Bandicoot%202%20-%20Cortex%20Strikes%20Back%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "backgroundPixelated": true,
          "longTitle": "Crash Bandicoot 2 - Cortex Strikes Back",
          "added": 1665744072589
        },
        {
          "props": {
            "uid": "d016cfac-b6e7-489c-82f6-535955adac52",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/CTR%20-%20Crash%20Team%20Racing%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "CTR - Crash Team Racing",
          "description": "Crash Team Racing (CTR) is a kart racing game a la Mario Kart, featuring popular characters from the Crash Bandicoot series of games - Crash, Coco, Neo Cortex, N. Gin, Penta Penguin, Polar, Pura, Papu Papu, Komodo Joe, Pinstripe, Tiny, Dingodile, Ripper Roo, Fake Crash and N. Tropy.\n\nThe player can race a full storyboard game as any one of the characters, fighting to beat the ultimate (and cheating) racer from another planet, Nitrous Oxide, who wants to turn the Earth into a car park. Each of the main races are against 7 other AI competitors, with 5 \"boss\" races against a single boss character.\n\nTo help you along your way are a whole bunch of weapons, ranging from missiles and rolling bombs to booby-trapped TNT crates and the leader-seeking orb.\n\nThere are also a few arcade modes, sub-games and battle games against up to 4 other players.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/CTR%20-%20Crash%20Team%20Racing%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt%2CNl).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/CTR%20-%20Crash%20Team%20Racing%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt%2CNl).png",
          "backgroundPixelated": true,
          "longTitle": "CTR - Crash Team Racing",
          "added": 1665745050042
        },
        {
          "props": {
            "uid": "73aa57ea-86f4-433b-94f2-65e04428815f",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Dead%20or%20Alive%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Dead or Alive",
          "description": "The Fighting Game You've been waiting for...\r\nPurist Fighting for Purist Fighting Fans\r\nNo lightening bolts, No Magic Tricks, No Weapons...\r\n\r\nYOUR SURVIVAL IS ALL IN YOUR OWN HANDS\r\n\r\nSeamlessly Rendered Characters\r\nCombined Attack Maneuvers\r\nDynamic Backgrounds with light-sourcing brings you a vividly real experience\r\n\r\nAVAILABLE ONLY ON DEAD OR ALIVE:\r\nBeautiful Women\r\nDanger Zone Mode\r\nReversal Attacks",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Dead%20or%20Alive%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Dead%20or%20Alive%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Dead or Alive",
          "added": 1665744822756
        },
        {
          "props": {
            "uid": "765602fd-f9d6-4c68-a4f3-62e2155df5da",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Dragon%20Warrior%20VII%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Dragon%20Warrior%20VII%20%28USA%29%20%28Disc%202%29.chd"
            ]
          },
          "type": "psx",
          "title": "Dragon Warrior VII",
          "description": "The story begins when the father of the protagonist brings home a map fragment from a fishing trip; this map suggests to the protagonist and his friend that the world had, at some point in its past, many continents, though now there is only the small island of Estard. The two of them find a way to travel back to the past, when the continents still existed. The continents are facing serious problems that threaten their existence; the protagonist and his growing party work to resolve the problems, and when they do, the continents reappear in the present. When all the continents are finally restored, the Demon Lord, who is responsible for the loss of many of the continents, appears and seals away many of the continents again. He then raises up his Dark Palace, where the party face the Demon Lord in a final showdown.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Dragon%20Warrior%20VII%20(USA)%20(Disc%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Dragon%20Warrior%20VII%20(USA)%20(Disc%201).png",
          "backgroundPixelated": true,
          "longTitle": "Dragon Warrior VII",
          "added": 1665744898341
        },
        {
          "props": {
            "uid": "a7fc8811-13e4-434d-8b43-29def42ce870",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20IX%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20IX%20%28USA%29%20%28Disc%202%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20IX%20%28USA%29%20%28Disc%203%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20IX%20%28USA%29%20%28Disc%204%29.chd"
            ]
          },
          "type": "psx",
          "title": "Final Fantasy IX",
          "description": "A band of thieves are hired to kidnap Princess Garnet of Alexandria. After they succeed, they end up becoming her guardians. And while protecting the fair Princess from a powerful evil...they hold the fate of the world in their hands. Play along on the epic journey filled with danger, mystery, war and love.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Final%20Fantasy%20IX%20(Europe)%20(Disc%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Final%20Fantasy%20IX%20(Europe)%20(Disc%201).png",
          "backgroundPixelated": true,
          "longTitle": "Final Fantasy IX",
          "added": 1665743173284
        },
        {
          "props": {
            "uid": "afa4187f-b8d8-4ac0-b06d-8ad3e99e5d43",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20Tactics%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Final Fantasy Tactics",
          "description": "Lead epic battles in a new Final Fantasy world.\r\n\r\nBetrayal and darker dealings await in Square Soft's game of war.\r\n\r\nFight hundreds of battles across dangerous 3D terrain as an ancient blood feud awakens a deadlier foe.\r\n\r\n* Command knights, mages, ninjas and more\r\n* Based on Final Fantasy characters and magic\r\n* 19 character classes, 400 abilities\r\n* Deep customization options\r\n* In-game interactive manual\r\n* Only on PlayStation.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Final%20Fantasy%20Tactics%20(Japan).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Final%20Fantasy%20Tactics%20(Japan).png",
          "backgroundPixelated": true,
          "longTitle": "Final Fantasy Tactics",
          "added": 1665743030767
        },
        {
          "props": {
            "uid": "380e9cca-1668-4101-a1e4-10020b45cf5b",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20VII%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20VII%20%28USA%29%20%28Disc%202%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20VII%20%28USA%29%20%28Disc%203%29.chd"
            ]
          },
          "type": "psx",
          "title": "Final Fantasy VII",
          "description": "Set in a dystopian world, Final Fantasy VII's story centers on mercenary Cloud Strife who joins with several others to stop the megacorporation Shinra, which is draining the life of the planet to use as an energy source. As the story progresses, the situation escalates and Cloud and his allies face Sephiroth, the game's main antagonist.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Final%20Fantasy%20VII%20(Europe)%20(Disc%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Final%20Fantasy%20VII%20(Europe)%20(Disc%201).png",
          "backgroundPixelated": true,
          "longTitle": "Final Fantasy VII",
          "added": 1665743087782
        },
        {
          "props": {
            "uid": "49c6471c-18a8-4b99-8ec5-3a1ff85adb38",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20VIII%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20VIII%20%28USA%29%20%28Disc%202%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20VIII%20%28USA%29%20%28Disc%203%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Final%20Fantasy%20VIII%20%28USA%29%20%28Disc%204%29.chd"
            ]
          },
          "type": "psx",
          "title": "Final Fantasy VIII",
          "description": "A member of an elite military team, Squall is forced into a conflict beyond imagination.  To survive, he must contend with a desperate rival, a powerful sorceress, and his own mysterious dreams.\r\n\r\n* Realistic, detailed characters and background graphics enhanced by a breathtaking musical score\r\n* An epic story based on the theme of love, set in a massive new world\r\n* New Junction System allows characters to be customized with powerful magic spells drawn from enemies\r\n* Nearly an hour of stunning motion-captured CG cinemas seamlessly integrated into gameplay",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Final%20Fantasy%20VIII%20(Europe)%20(Demo%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Final%20Fantasy%20VIII%20(Europe)%20(Demo%201).png",
          "backgroundPixelated": true,
          "longTitle": "Final Fantasy VIII",
          "added": 1665743130781
        },
        {
          "props": {
            "uid": "a22fc236-a121-4d88-98f2-04a1abdca960",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Gran%20Turismo%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Gran Turismo",
          "description": "Gran Turismo is fundamentally based on the racing simulator genre. The player must maneuver an automobile to compete against artificially intelligent drivers on various race tracks. The game uses two different modes: Arcade Mode and Simulation Mode (Gran Turismo Mode in PAL and Japanese versions). In the arcade mode, the player can freely choose the courses and vehicles they wish to use. Winning races unlocks additional cars and courses.\r\n\r\nHowever, simulation mode requires the player to earn different levels of driver's licenses in order to qualify for events, and earn credits(money), trophies and prize cars by winning race championships. Winning one particular championship also unlocks a video and a few additional demonstration tracks. Money earned by winning championships can be used to purchase additional vehicles, and for parts and tuning of all vehicles.\r\n\r\nGran Turismo features 180 cars and 11 race tracks (as well as reversed versions). Two Honda del Sol cars from 1995 were included in the Japanese version, but were removed from the North American and European versions. They can be found in the North American version's code (and are unlockable via a GameShark cheat device). In addition to the hidden del Sols, there is also a 1967 Chevrolet Corvette and a 1998 Mazda Roadster exclusive to Arcade mode. The Corvette and Roadster can also be accessed via GameShark.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Gran%20Turismo%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Gran%20Turismo%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "backgroundPixelated": true,
          "longTitle": "Gran Turismo",
          "added": 1665743942039
        },
        {
          "props": {
            "uid": "cadff021-96a5-4d87-8392-d33ca1da58e9",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Gran%20Turismo%202%20%28USA%29%20%28Arcade%20Mode%29.chd"
            ]
          },
          "type": "psx",
          "title": "Gran Turismo 2 (Arcade Mode)",
          "description": "Gran Turismo 2 is fundamentally based on the racing game genre. The player must maneuver an automobile to compete against artificially intelligent drivers on various race tracks. The game uses two different modes: arcade and simulation. In the arcade mode, the player can freely choose the courses and vehicles they wish to use. However, the simulation mode requires the player to earn driver's licenses, pay for vehicles, and earn trophies in order to unlock new courses. Gran Turismo 2 features nearly 650 automobiles and 27 racing tracks.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Gran%20Turismo%202%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt)%20(Disc%201)%20(Arcade%20Mode).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Gran%20Turismo%202%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt)%20(Disc%201)%20(Arcade%20Mode).png",
          "backgroundPixelated": true,
          "longTitle": "Gran Turismo 2 (Arcade Mode)",
          "added": 1665743919522
        },
        {
          "props": {
            "uid": "cadff021-96a5-4d87-8392-d33ca1da58e9",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Gran%20Turismo%202%20%28USA%29%20%28Simulation%20Mode%29.chd"
            ]
          },
          "type": "psx",
          "title": "Gran Turismo 2 (Simulation Mode)",
          "description": "Gran Turismo 2 is fundamentally based on the racing game genre. The player must maneuver an automobile to compete against artificially intelligent drivers on various race tracks. The game uses two different modes: arcade and simulation. In the arcade mode, the player can freely choose the courses and vehicles they wish to use. However, the simulation mode requires the player to earn driver's licenses, pay for vehicles, and earn trophies in order to unlock new courses. Gran Turismo 2 features nearly 650 automobiles and 27 racing tracks.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Gran%20Turismo%202%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt)%20(Disc%201)%20(Arcade%20Mode).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Gran%20Turismo%202%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt)%20(Disc%201)%20(Arcade%20Mode).png",
          "backgroundPixelated": true,
          "longTitle": "Gran Turismo 2 (Simulation Mode)",
          "added": 1665744000655
        },
        {
          "props": {
            "uid": "fc2924aa-661e-4e48-a1ca-ba5639036a4a",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Metal%20Gear%20Solid%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Metal%20Gear%20Solid%20%28USA%29%20%28Disc%202%29.chd"
            ]
          },
          "type": "psx",
          "title": "Metal Gear Solid",
          "description": "Metal Gear Solid follows Solid Snake, a soldier who infiltrates a nuclear weapons facility to neutralize the terrorist threat from FOXHOUND, a renegade special forces unit. Snake must liberate two hostages, the head of DARPA and the president of a major arms manufacturer, confront the terrorists, and stop them from launching a nuclear strike.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Metal%20Gear%20Solid%20(Asia)%20(Demo).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Metal%20Gear%20Solid%20(Asia)%20(Demo).png",
          "backgroundPixelated": true,
          "longTitle": "Metal Gear Solid",
          "added": 1665744537272
        },
        {
          "props": {
            "uid": "4f5b8059-c7ff-4e31-821f-303fa527e1fe",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Need%20for%20Speed%20-%20High%20Stakes%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Need for Speed - High Stakes",
          "description": "Need 4 Speed games always took a slight step into sequels, but this time it's like a totally new dimension of playing. There are about 20 or such cars to choose, and you can play split-screened on the same computer, or via modem. You can hunt or be hunted, either way it's difficult, but driving in the moonlight with fireworks in deep distance makes it worthy at least a look.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Need%20for%20Speed%20-%20High%20Stakes%20(Australia).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Need%20for%20Speed%20-%20High%20Stakes%20(Australia).png",
          "backgroundPixelated": true,
          "longTitle": "Need for Speed - High Stakes",
          "added": 1665744753208
        },
        {
          "props": {
            "uid": "afb08a43-f355-4b8f-afb2-84d7866d26ba",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Need%20for%20Speed%20-%20Porsche%20Unleashed%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Need for Speed - Porsche Unleashed",
          "description": "Need for Speed is back with more! Drive over 80 different Porsches, from the first 356 Ferdinand to the 2000 911 Turbo over multiple tracks. Some tracks have alternate paths. Others are rally tracks where you go from one end of the track to the other instead of doing circuit racing. \n\nTwo completely different single-player modes available. First, there's factory driver, which have you join Porsche as a test driver. As you complete different challenges, which can vary from doing specific manoeuvres in pre-alloted time to racing fellow drivers, you will make your way up to Ace Test Driver. Second, there's Evolution, which is the \"career mode\", you start with enough money to buy one 356, and start racing. As you win races, time will pass, new cars will become available, or you can peruse the used car market. Buy/repair/sell cars, win races, buy enhancement parts for your car, and make your way to the end of the modern era...\n\nYou can also play online via EARacing.com, where you can pick customized cars in your Evolution stable or choose stock cars and race up to 7 other cars simultaneously. \n\nThe graphics have been enhanced and the physics model changed to reflect a true 4-point system, and you can feel the difference between the different vehicles.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Need%20for%20Speed%20-%20Porsche%20Unleashed%20(USA).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Need%20for%20Speed%20-%20Porsche%20Unleashed%20(USA).png",
          "backgroundPixelated": true,
          "longTitle": "Need for Speed - Porsche Unleashed",
          "added": 1665744770076
        },
        {
          "props": {
            "uid": "2a3d66e0-6ad4-40ac-92ad-19dd76a58fcf",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Need%20for%20Speed%20II%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Need for Speed II",
          "description": "Take control of eight Super Cars and race your way through six different tracks from Australia to Nepal.  Much like the first in the series, the sequel has plenty of high performance cars to choose from, including the McLaren F1 or Ferrari F50 and a few concept cars, each handling differently.\n\nOnce you've beaten the six tracks, a new track is available to you. It's a fast paced racing game which is intended to play more like an arcade racer than a true simulation.\n\nThe main difference between this and the previous Need for Speed game is in the tracks, with less open road tracks in this sequel. Also, there are no cops to chase you. However, the tracks available are have a range of detail, and some have changing weather conditions while you race.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Need%20for%20Speed%20II%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt%2CSv).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Need%20for%20Speed%20II%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt%2CSv).png",
          "backgroundPixelated": true,
          "longTitle": "Need for Speed II",
          "added": 1712691715766
        },
        {
          "props": {
            "uid": "f4c27ea0-ab17-4c8c-88bd-4066898f69d8",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Need%20for%20Speed%20III%20-%20Hot%20Pursuit%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Need for Speed III - Hot Pursuit",
          "description": "In the third major installment of Electronic Arts'\nArcade racing series, there are several modes of play available. You have the standard race, with one big difference - now there are traffic cops out to ticket you for your excessive speed. Alternatively, you can take your turn with the radar gun and attempt to pull over speeding computer or human racers. \n\nReturning to the flavour of the original Need for Speed, this adds a new Pursuit mode, where you must out run the cops through fast, open area tracks, while also out-lasting the rest of the pack. Another new mode is knockout, where you race through all the tracks, and whoever is last after each race is knocked out. The winner is, of course, the one that lasts the distance.\n\nAs for the cars; there are the Ferrari 550 Maranello, Ferrari 355 F1 Spider, Italdesign Scighera, Lamborghini Diablo SV, Lamborghini Countach, Jaguar XJR-15, Jaguar XK8, Aston Martin DB7, '98 Corvette C5, Mercedes SL600 and the Mercedes CLK GTR.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Need%20for%20Speed%20III%20-%20Hot%20Pursuit%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt%2CSv).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Need%20for%20Speed%20III%20-%20Hot%20Pursuit%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt%2CSv).png",
          "backgroundPixelated": true,
          "longTitle": "Need for Speed III - Hot Pursuit",
          "added": 1665744787424
        },
        {
          "props": {
            "uid": "f84677a8-00eb-4ef8-aedb-dad3855ab976",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Oddworld%20-%20Abe%27s%20Oddysee%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Oddworld - Abe's Oddysee",
          "description": "Abe's Oddysee is the first game set in Oddworld, a fictional universe created by Oddworld Inhabitants. \n\nThe protagonist of the game is Abe, who is a Mudokon - a member of a once prosperous race, which has now been enslaved by the Glukkons, forced to work in their huge corporations. The food factories have found a new type of meat - delicious to all the inhabitants, and no-one knows the recipe. Following his stomach, Abe eavesdrops on the corporate leaders' conversation, and makes the most frightening and disgusting discovery: his own race is that secret delicious food. \n\nAlas, Abe is discovered, and the guards are marching towards him. He must escape, but he can't leave his friends to mercy of those eaters. He must rescue as many as he can, and tell the world the truth that lies beyond.\n\nEssentially Abe's Oddysee is a platform game, though with a darker atmosphere than most titles in the genre. The game has several unique gameplay features. Abe is almost completely helpless, cannot wield weapons, and can be easily killed by his brutal enemies. That's why most of the game involves moving with careful timing, sneaking, and outsmarting your foes, even though there are also many parts where Abe runs and jumps, as in most platformers. Abe's only power is chanting, which he can use to stun certain enemies for a while, and also to open \"bird portals\". Opening those portals is the final action needed to bring a fellow Mudokon to safety. Before that, Abe needs to locate his enslaved friends and lead them out of the hostile environment by using what the game calls \"Gamespeak\". Gamespeak is a way of verbal communication through simple one-button commands, which are assigned to various expressions, such as \"Hello\", \"Follow me\", \"Wait here\", etc.\n\nThe game has pre-rendered background graphics, and uses pre-rendered CG movies of similar style to advance the story between the levels.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Oddworld%20-%20Abe's%20Oddysee%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Oddworld%20-%20Abe's%20Oddysee%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Oddworld - Abe's Oddysee",
          "added": 1665743747804
        },
        {
          "props": {
            "uid": "a61cdfe4-b6be-4023-abc5-d815315412f0",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/PaRappa%20the%20Rapper%20%28USA%29%20%28En%2CFr%2CDe%2CEs%2CIt%29.chd"
            ]
          },
          "type": "psx",
          "title": "PaRappa the Rapper",
          "description": "The original music video game.\r\n\r\nHelp Parappa rap with the best of the master rappers and straight into Sunny's heart.\r\n\r\nGuaranteed you'll be singin' and dancin' along with Parappa and his pals to the most fun music mixes.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/PaRappa%20the%20Rapper%20(Japan).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/PaRappa%20the%20Rapper%20(Japan).png",
          "backgroundPixelated": true,
          "longTitle": "PaRappa the Rapper",
          "added": 1665743822506
        },
        {
          "props": {
            "uid": "d2cf2f1d-beb6-4943-b03b-82e6c04bb6b1",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Parasite%20Eve%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Parasite%20Eve%20%28USA%29%20%28Disc%202%29.chd"
            ]
          },
          "type": "psx",
          "title": "Parasite Eve",
          "description": "THE CINEMATIC RPG\r\n\r\nOne of them is a police officer. The other is possessed by an ancient evil threatening all life on Earth. The horrifying bond between them will continue until something dies.\r\nA chilling adventure that could only come from the creators of Final Fantasy VII\r\nAn epic sci-fi tale told through stunning 3D rendered sequences\r\nBattle mutant monsters in real-time polygon combat\r\nCustomize weapons, armor, and character abilities",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Parasite%20Eve%20(Japan)%20(Disc%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Parasite%20Eve%20(Japan)%20(Disc%201).png",
          "backgroundPixelated": true,
          "longTitle": "Parasite Eve",
          "added": 1665745095177
        },
        {
          "props": {
            "uid": "68f27412-e34c-448c-8df2-e53c5c60936c",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/R4%20-%20Ridge%20Racer%20Type%204%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "R4 - Ridge Racer Type 4",
          "description": "Developed exclusively for the Sony Playstation, this fourth title in the Ridge Racer series features new visuals, powered by goraud-shaded polygons, giving each car and track a more refined appearance, while keeping the same arcade gameplay popularized by the first game of the series.\n\nWhile it includes the usual time attack and a new split-screen versus mode, the focus of the game is the Real Racing Roots '99, Ridge City's three heat, seven race championship, with the grand finale in a speedway during New Year's Eve.\n\nThe player starts by choosing one of the four teams available (from easiest to harder): Micro Mouse Mappy, directed by the lovely Sophie Chevalier who hopes to win the first title in many years for the French team to honour her ill grandfather, Pac Racing Team, a recently created Japanese team directed by Shinji Yazaki who expects to create an immediate splash in the Ridge City racing scene, from Italy the RRR champions Racing Team Solvalou, with the demanding Enki Gilbert at the helm, and the American team Dig Racing Team, who has fallen into financial difficulties, with team director Robert Chrisman struggling to provide the driver with a car capable of out-handling opponents.\n\nAfter picking a team, the player can choose one of the four car makers available: Lizard and Assoluto keep the old RR tradition of cars drifting wildly on corners, but Age Solo and Terrazi offer a new experience with their \"Grip\" cars that require more breaking and careful trajectories, but are easier to control during turns.\n\nThe player earns (and so, unlocks for free play) cars by completing races; however, final placement defines how good the car will be. By scraping through the first two heats (the Final GP accepts nothing but a victory), sponsors will be unwilling to invest in the team and instead of a new car, the mechanics will only upgrade the current vehicle. But winning all races allows the driver to reach the Shooting Hoops speedway with the fastest car. By combining all qualifying placements, 320 cars are waiting to be unlocked.\n\nR4 Ridge Racer Type 4 also includes an extra disk, featuring the original Ridge Racer in higher resolution. For a time, the game was also sold as a bundle along Namco's innovative Jogcon controller.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/R4%20-%20Ridge%20Racer%20Type%204%20(Japan)%20(R4%20%2B%20JogCon).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/R4%20-%20Ridge%20Racer%20Type%204%20(Japan)%20(R4%20%2B%20JogCon).png",
          "backgroundPixelated": true,
          "longTitle": "R4 - Ridge Racer Type 4",
          "added": 1665742985500
        },
        {
          "props": {
            "uid": "0ab4ebc4-2159-4bc4-8ac9-17222d00622f",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Rayman%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Rayman",
          "description": "Captivating, mind-bending and addictive one trip and you're hooked!\r\n\r\nEnter the challenging world of Rayman and suddenly reality seems far too tame. Free your mind as Rayman takes you on an arduous adventure through a complex realm of psychedelic landscapes, absurd characters, formidable opponents, and uncharted levels of dementia. This mind-altering platform game features...\r\n\r\n* Menacing opponents that learn your playing style to defeat you.\r\n* Incredibly intense visuals with 65,000 colors and four independently scrolling backdrops.\r\n* 70 surrealistic levels.\r\n* Over 50 demented characters.\r\n* Exhilarating CD-quality sound effects and music.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Rayman%20(Europe)%20(En%2CFr%2CDe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Rayman%20(Europe)%20(En%2CFr%2CDe).png",
          "backgroundPixelated": true,
          "longTitle": "Rayman",
          "added": 1665745006292
        },
        {
          "props": {
            "uid": "62a616df-7c63-434a-9893-6abb695c8c5d",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Rayman%202%20-%20The%20Great%20Escape%20%28USA%29%20%28En%2CFr%2CEs%29.chd"
            ]
          },
          "type": "psx",
          "title": "Rayman 2 - The Great Escape",
          "description": "A gang of pirates have invaded Rayman's world to seize its unique creatures and sell them to an intergalactic circus. Our mighty hero, Rayman, has been captured and stripped of his powers. He flees captivity and embarks on a dangerous mission to return to his conquered world where he must liberate all of his imprisoned friends from the pirates.\n\nJust like Bugs Bunny: Lost in Time, the game is rendered in full 3D and contains action, adventure and mind twisting puzzles!",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Rayman%202%20-%20The%20Great%20Escape%20(Europe)%20(En%2CEs%2CIt).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Rayman%202%20-%20The%20Great%20Escape%20(Europe)%20(En%2CEs%2CIt).png",
          "backgroundPixelated": true,
          "longTitle": "Rayman 2 - The Great Escape",
          "added": 1665745028291
        },
        {
          "props": {
            "uid": "6ebc483a-49bd-41d9-baf1-3b789bf5524d",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Resident%20Evil%20-%20Director%27s%20Cut%20-%20Dual%20Shock%20Ver.%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Resident Evil - Director's Cut - Dual Shock Ver.",
          "description": "A team of S.T.A.R.S (Special Tactics And Rescue Squad) members are called to investigate a series of murders near Raccoon City.\nWhile searching the woods near the city, the team is attacked by bloodthirsty dogs and they have to retreat to a nearby mansion. \n\nThe player chooses between Jill Valentine or Chris Redfield and starts to explore the mansion. It soon becomes very clear that it isn't just any mansion, but a hellish place where the undead walk the corridors and other horrors are lurking in the darkness, waiting to eat some heads. While solving puzzles, collecting keys, and shooting monsters, the player has to unravel the mystery behind this mansion and, if possible, get out alive.\n\nExclusive to the SEGA Saturn version is a Battle Mode bonus mode, where, with limited ammo and under the threat of limited time, the player must survive a series of rooms filled with monsters",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Resident%20Evil%20-%20Director's%20Cut%20-%20Dual%20Shock%20Ver.%20(USA).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Resident%20Evil%20-%20Director's%20Cut%20-%20Dual%20Shock%20Ver.%20(USA).png",
          "backgroundPixelated": true,
          "longTitle": "Resident Evil - Director's Cut - Dual Shock Ver.",
          "added": 1665744337058
        },
        {
          "props": {
            "uid": "3f773bac-d90e-4c68-8271-2dd116b5cec8",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Resident%20Evil%202%20-%20Dual%20Shock%20Ver.%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Resident%20Evil%202%20-%20Dual%20Shock%20Ver.%20%28USA%29%20%28Disc%202%29.chd"
            ]
          },
          "type": "psx",
          "title": "Resident Evil 2 - Dual Shock Ver.",
          "description": "Even though Chris Redfield and Jill Valentine were able to destroy the Umbrella corporation's undead monsters in the original Resident Evil, Umbrella's experiments into the T-virus continued unhindered. Claire Redfield, the younger sister of Chris, and Leon Kennedy, a rookie cop on his first day of the job, arrive in the sleepy midwestern town of Raccoon City only to find the city in flaming ruins due to the inhabitants having been transformed into mindless flesh-eating freaks. Although Claire and Leon team up, they are soon separated from each other and trapped inside the city by an accidental car crash. Barricading themselves within the Raccoon City police station, each character must find a way to escape from the nightmare while solving the mystery of what happened to Raccoon City. Each character will gain the periodic assistance of a fellow survivor... Leon will team up with a mysterious but well armed woman calling herself Ada Wong, while Claire will find herself charged with protecting a little girl named Sherry Birkin. \n\nBesides the zombie population (which is much more diverse than the original, including teen girl zombies, maniac cop zombies, and even melting naked zombies), Claire and Leon will also have to deal with a variety of freakish mutants including giant poisonous spiders, walking venus-fly-traps, and speedy wall-crawling Lickers. They will also be pursued by not one but two seemingly unstoppable foes: a horrific and constantly evolving man-monster known as the \"G-Type\", and a taciturn but inhumanly powerful Umbrella agent who is nonetheless saddled with the rather quaint name of Mr. X .\n\nLike the previous game in the series, Resident Evil 2 is a 3D action-adventure using three-dimensional polygon characters over two-dimensional pre-rendered backgrounds, with the action viewed through a variety of cinematic fixed camera angles in each room. Just like the original Resident Evil, players can choose to play as one of two possible characters. Each character goes through the same initial scenario, but with differences in the type of weaponry they find and the people they meet along the way. Unlike the original Resident Evil, beating the game for the first time unlocks a second scenario to be played with the character you didn't choose, with all new locations, maps, enemies, and a longer more climactic ending. Your actions in the first scenario can also affect the outcome of certain events in the second scenario. Additionally ammo and healing items are more plentiful than in the original game, although you still aren't given enough bullets to kill every enemy you meet.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Resident%20Evil%202%20-%20Dual%20Shock%20Ver.%20(USA)%20(Disc%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Resident%20Evil%202%20-%20Dual%20Shock%20Ver.%20(USA)%20(Disc%201).png",
          "backgroundPixelated": true,
          "longTitle": "Resident Evil 2 - Dual Shock Ver.",
          "added": 1665744361675
        },
        {
          "props": {
            "uid": "cb2d6f24-ae26-43d9-892f-eb44166a590e",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Resident%20Evil%203%20-%20Nemesis%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Resident Evil 3 - Nemesis",
          "description": "So Evil they even gave it a subtitle!\n\nThe final installment of the Resident Evil series for the Playstation, Resident Evil 3 takes place during the events of Resident Evil 2. The midwestern town of Raccoon City is in ruins, having been overrun with the undead creating T-virus thanks to the wacky hijinks of William Birkin and Umbrella Inc. As Jill \"master of unlocking\" Valentine (one of the two main protagonists of the original Resident Evil), you must find a way out of the zombie-infested remains of the city alive. Along the way, you'll interact with and receive help from three heavily armed Umbrella mercenaries who have also become stranded in Raccoon City thanks to the incompetence of their employer. Standing in the way of your group's last escape are a horde of flesh-eating zombified citizens, homicidal mutants, and a relentless killing machine known only as Nemesis who is determined to hunt down and kill the survivors of the original Resident Evil, including Jill.\n\nA dramatic improvement over Tyrant/Mr. X/G from the previous games, Nemesis possesses the same maneuverability as Jill allowing him to run (faster than you, in fact), use firearms (such as a rocket launcher), dodge attacks, and even move through doors and from room to room in pursuit of Jill. On top of that he still possesses the nigh indestructibility we've come to know and... well, know from Umbrella's ultimate bio-weapons. \n\nLike its two predecessors Resident Evil 3 is a third-person action-adventure game with polygonal characters on pre-rendered backgrounds with cinematic camera angles, a technique originally pioneered by Alone in the Dark. Although the game uses the same basic engine and gameplay as the previous games, improvements include auto-targeting, a 180 degree spin, and a new dodge move that allows you to avoid enemy attacks by pressing a button a second before they strike. Another addition is Jill's ability to create different kinds of ammunition by mixing together three different types of gunpowder found throughout the game. Compared to Resident Evil 2, the amount of available ammunition and healing items has been significantly decreased, making the game more difficult. The variety of zombie citizens has also been made more diverse.\n\nThe number of polygons in the character models has also been increased, along with the possible screen resolution and color depth for the PC version (up to 1600 X 1200 at 32 bits, from a maximum of 640 X 480 at 16 bits for Resident Evil 2). Another welcome addition in the PC version is the ability to skip cutscenes as well as the door loading animation.\n\nThe PC and Dreamcast versions includes all eight of Jill's possible costumes, as well as the mercenary mini-game Operation Mad Jackal which allows you to play as one of the three Umbrella soldiers. On the Playstation version, these special features must be unlocked by beating the game with a high score.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Resident%20Evil%203%20-%20Nemesis%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Resident%20Evil%203%20-%20Nemesis%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Resident Evil 3 - Nemesis",
          "added": 1665744387473
        },
        {
          "props": {
            "uid": "94f8e72f-fa40-42e6-92a4-c6569a30a9e5",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Silent%20Hill%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Silent Hill",
          "description": "Silent Hill is a 1999 survival horror video game for the PlayStation. The first in a series about a mysterious town of the same name, Silent Hill generated a direct sequel, three indirect sequels, a prequel and a film adaptation. The game was included in Sony's Greatest Hits and Platinum Range of budget titles as a result of strong sales. A reinterpretation of the game was developed for the Wii, PlayStation 2 and PlayStation Portable.\r\nThe plot focuses on Harry Mason as he searches for his daughter, Cheryl, who has disappeared following a car accident which left Harry unconscious. He finds Silent Hill to be largely abandoned, shrouded in a thick fog, snowing out of season, filled with monsters and being over taken by a hellish otherworld. As Harry scours the town, he begins learning about the history of Silent Hill and stumbles upon a cult ritual undertaken to bring a god to Earth.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Silent%20Hill%20(Australia)%20(Demo).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Silent%20Hill%20(Australia)%20(Demo).png",
          "backgroundPixelated": true,
          "longTitle": "Silent Hill",
          "added": 1665743848256
        },
        {
          "props": {
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Spider-Man%20%28USA%29.chd"
            ],
            "uid": "779d110b-d22e-4641-80de-c901fed89ad7"
          },
          "type": "psx",
          "title": "Spider-Man",
          "description": "YOU DON'T JUST PLAY IT... YOU LIVE IT He spins a web, swings across the sky and lands with a somersault onto the Daily Bugle building. Who is this masked hero? It's you!\r\n\r\nFight, jump and web-sling as Spider-Man as you take on a legion of sinister villains. The city is depending on you. Start swinging...\r\n\r\n-Wall-crawl and web-sling in a totally free-roaming, 3-D New York.\r\n-Fight notorious bosses and an assortment of freak-specimens, criminals and tunnel dwellers.\r\n-Web shooters and Spider-Sense let you thwart your enemies' sinister plans.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Spider-Man%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Spider-Man%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Spider-Man",
          "added": 1665742888650
        },
        {
          "props": {
            "uid": "a82b2158-1c58-403f-b27b-5a21822b2cd4",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Spider-Man%202%20-%20Enter%20-%20Electro%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Spider-Man 2 - Enter - Electro",
          "description": "Spider-Man is out to save New York City (and in the process the world) once again. This time it is Electro that is out to take Earth, and the galaxy itself, for his own. As you fight your way towards the final battle with Electro, you will come across a range of enemies, objectives and bosses. Climb buildings, save hostages, disarm bombs, all while avoiding hidden traps and enemies.\n\nSpider-Man has a range of new techniques and power-ups for use, including Electric webs, ice webs, tasers, and electricity armor, plus all of the original moves from the first Playstation Spider-Man adventure. Punch and kick are your main attack abilities, but coupled with your web you can swing into and out of fights, tie up the enemy and surprise them from above. You can of course crawl along walls and roofs to get to hard to reach places, and find the hidden comic books (which opens up pictures in the gallery).",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Spider-Man%202%20-%20Enter%20-%20Electro%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Spider-Man%202%20-%20Enter%20-%20Electro%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Spider-Man 2 - Enter - Electro",
          "added": 1665742952798
        },
        {
          "props": {
            "uid": "e8a7cfa0-18de-4ec3-90e6-acd7f49c6b57",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Spyro%20-%20Year%20of%20the%20Dragon%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Spyro - Year of the Dragon",
          "description": "The third in the Playstation Spyro the Dragon series sees Spyro having to recover a clutch of Dragon eggs from the evil Sorceress.\n\nThe player can now play as not only Spyro, but Agent 9 the Space Monkey, Sheila the Kangaroo, Bentley the Yeti, Sgt. Byrd the Penguin and his two best friends Sparx and Hunter. Sparx has his own levels for the very first time. Also, Spyro has learned a few new abilities, including skateboarding!",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Spyro%20-%20Year%20of%20the%20Dragon%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Spyro%20-%20Year%20of%20the%20Dragon%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "backgroundPixelated": true,
          "longTitle": "Spyro - Year of the Dragon",
          "added": 1665743376768
        },
        {
          "props": {
            "uid": "b45cebca-f242-4f72-9df5-1a75f8e60b4e",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Spyro%202%20-%20Ripto%27s%20Rage%21%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Spyro 2 - Ripto's Rage!",
          "description": "Players control Spyro the Dragon as he fights against various enemies and obstacles using his flame breath, charge attack, and glide abilities. His health is indicated by the color of his dragonfly partner, Sparx, who can replenish his health by eating butterflies. Bottled butterflies will both completely restore Sparx's health and give Spyro an extra life. The game is split up into three main hub worlds containing portals to various realms. In order to progress through the first two hub worlds, the player must acquire a talisman from each realm, which is awarded for reaching the end of the level, before facing the boss of each world. Each level also contains a certain number of orbs, which can be earned by completing secondary tasks for particular NPCs, such as lighting a series of lamps or protecting characters from attacks. These orbs are required for opening some of the portals to certain levels, as well as progressing through the third hub world. Gems gathered throughout the game are required to pay fees Moneybags charges in order to progress through the game. As well as opening portals or granting access to certain areas, Moneybags also teaches Spyro three brand new abilities over the course of the game. Swimming lets Spyro dive underwater to reach submerged treasure and hidden tunnels, climbing lets Spyro climb up certain surfaces, and the headbash lets Spyro perform an overhead smashing attack which can break rocks and certain cages. In addition, each level has a power-up gate, activated after defeating a specific number of enemies in a level, which grants Spyro a temporary super-ability. The power-up can grant invulnerability or the abilities to fly, supercharge, super flame, breathe ice, or super jump to reach high up areas.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Spyro%202%20-%20Ripto's%20Rage!%20(USA).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Spyro%202%20-%20Ripto's%20Rage!%20(USA).png",
          "backgroundPixelated": true,
          "longTitle": "Spyro 2 - Ripto's Rage!",
          "added": 1665743350651
        },
        {
          "props": {
            "uid": "d282ab42-2ca7-499e-a4b2-42c8d16cb65e",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Spyro%20the%20Dragon%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Spyro the Dragon",
          "description": "Spyro the Dragon is a platform game developed by Insomniac Games for the PlayStation. It stars the title character, a young purple dragon named Spyro and his dragonfly friend, Sparx, and is the first game in the Spyro the Dragon series. The first game was massively popular at its initial release and Spyro would later become one of the most recognizable, popular and respected gaming icons for the PlayStation gaming console. Spyro's best friend, Sparx the dragonfly, acts like the player's health meter and assists in gathering gems. The various dragons Spyro unfreezes along the way are also key characters in Spyro's progression through the game. Gnasty Gnorc is the main antagonist, who froze all the dragons of the land in crystal.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Spyro%20the%20Dragon%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Spyro%20the%20Dragon%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "backgroundPixelated": true,
          "longTitle": "Spyro the Dragon",
          "added": 1665743301601
        },
        {
          "props": {
            "uid": "49c3b724-3f96-4bd2-bf9b-d9caa0707ddc",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Star%20Gladiator%20-%20Episode%20I%20-%20Final%20Crusade%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Star Gladiator - Episode I - Final Crusade",
          "description": "Star Gladiator - Episode 1: Final Crusade is a 1996 weapon-based 3D fighting game released by Capcom for the PlayStation-based ZN-1 arcade hardware. It was Capcom's first in-house polygonal fighting game (the earlier Battle Arena Toshinden 2 was licensed to Capcom from an outside developer). A PlayStation port was released in October 1996. It was followed by a single sequel, Plasma Sword: Nightmare of Bilstein, in 1998.\n\nInstead of the six-button configuration system seen in past Capcom fighting game series such as Street Fighter II: The World Warrior and Darkstalkers, Star Gladiator utilizes a Soulcalibur series-esque four-button configuration system, which consists of two attack buttons for a character's weapon, a kick attack, and a guard defense. The fighters battle upon a hovering arena, and if a fighter is knocked off the arena they lose the round.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Star%20Gladiator%20-%20Episode%20I%20-%20Final%20Crusade%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Star%20Gladiator%20-%20Episode%20I%20-%20Final%20Crusade%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Star Gladiator - Episode I - Final Crusade",
          "added": 1665744973210
        },
        {
          "props": {
            "uid": "5fb27c70-d0e3-4ba7-b750-f75eec357356",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tales%20of%20Destiny%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tales of Destiny",
          "description": "A great swordsman named Stahn Aileron takes a ride on a giant dragon ship. During the flight, the ship is attacked by pirates. Looking for a weapon to defend himself, Stahn discovers a sword. Very soon he finds out it is not just an ordinary sword, but the legendary talking sword Dymlos, who has been sleeping for many years and who can be awakened only if the world is in grave danger. But what exactly is the danger that awakened Dymlos now? With the help of a few friends, Stahn decides to explore the world and to find out what is wrong.\n\n\"Tales of Destiny\" is a follower of the SNES RPG Tales of Phantasia. The combat in this game is action-based. You control the main hero in real time and make him perform various attacks. Other party members are controlled by the game's AI, but you can pause the battle at any time and assign new combat style to any one of them.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tales%20of%20Destiny%20(Japan).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tales%20of%20Destiny%20(Japan).png",
          "backgroundPixelated": true,
          "longTitle": "Tales of Destiny",
          "added": 1712691685404
        },
        {
          "props": {
            "uid": "f1478058-bc3a-495c-a210-bced0c097f8f",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tales%20of%20Destiny%20II%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tales%20of%20Destiny%20II%20%28USA%29%20%28Disc%202%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tales%20of%20Destiny%20II%20%28USA%29%20%28Disc%203%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tales of Destiny II",
          "description": "Tales of Destiny II follows Reid Hershel as he tries to prevent the Grand Fall, a cataclysmic event that would destroy his planet along with that of newly-found traveling companion Meredy. Specifically, the Grand Fall entails the violent collision of twin planets Inferia and Celestia. The journey takes Reid across both planets, as he seeks out those responsible for this movement towards the brink of annihilation.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tales%20of%20Destiny%20II%20(USA)%20(Disc%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tales%20of%20Destiny%20II%20(USA)%20(Disc%201).png",
          "backgroundPixelated": true,
          "longTitle": "Tales of Destiny II",
          "added": 1665744865859
        },
        {
          "props": {
            "uid": "86871873-cc3f-4089-a7d7-09383e547709",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tekken%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tekken",
          "description": "The last eight fighters in the Tekken tournament all have their own range of moves, something to prove, and a reason for any combat opponent to fear them. For example, Nina Williams is a trained assassin, Yoshimitsu is a robotic recreation of a ninja, and Marshall Law (spot the pun) aims to set up a fighting school to pass on his knowledge. \n\nAs one of these eight figures, you must come through tough fights in a 360-degree 3D environments with texture mapped backdrops and polygon graphics . After beating your seven rivals there are two Bosses to beat. There are three difficulty levels, and fight lengths and number of rounds can be varied.\n\nEach limb's movement is controlled with a different button, making finding the right combos a matter of instinct and planning rather than experimentation. Pure martial arts inspire most of the moves. This was the first beat 'em up allowing you to dodge an opponent's attack, something made possible by the 3D perspective. The final slow-motion replay of the final moves allows you to see where you went right or wrong.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tekken%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tekken%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Tekken",
          "added": 1712691697963
        },
        {
          "props": {
            "uid": "7e1670c5-60f5-4303-8e77-dde5877e931e",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tekken%202%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tekken 2",
          "description": "MORE THAN A SEQUEL. THE UNDISPUTED #1 FIGHTING GAME ON THE PLANET.\r\n\r\n23 OF THE GREATEST FIGHTERS ON EARTH.\r\nIncludes new characters, new bosses, each with new ways to inflict multiple ten-hit combos.\r\n\r\n23 NEW STAGES.\r\nMind blowing backgrounds with phenomenal light-sourcing. Jam to 23 new music tracks as you jam an opponents face in the ground.\r\n\r\nBRAND NEW 3D ANIMATIONS.\r\nCinematics at their finest. All-new intro sequence plus animations for each character not found in the arcade version.\r\n\r\nTHREE NEW FIGHTING MODES.\r\nNot available in the original: Survival Mode, Battle Mode & Practice Mode.\r\n\r\nMORE MOVES AND MULTIPLE COMBOS.\r\nNew attack and throw reversals plus new bone-snapping techniques.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tekken%202%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tekken%202%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Tekken 2",
          "added": 1665744184256
        },
        {
          "props": {
            "uid": "17c60633-1afa-4262-8765-a5ef17f89dd2",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tekken%203%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tekken 3",
          "description": "The Fight of Your Life\r\n\r\nAn ancient evil force has reawakened, attacking in secret and feeding on the souls of mighty warriors. To lure it out of hiding will take the greatest fighting contest the world has ever seen... Tekken 3. Some are fighting for revenge, some for honor. Ultimately, all are fighting for their lives and the fate of all mankind.\r\n\r\nHidden Features\r\nSecret characters, secret game modes, and dramatic cinematic sequences for each character.\r\n\r\nNew Fighting Styles\r\nIncluding the Brazilian art of the Capoeira fighting and two new styles of Kung Fu.\r\n\r\nNew Characters\r\nIncludes your favorite arcade characters: Eddy, Jin, Xiaoyu, Hwoarang, Julia, Law, Mokujin, Bryan, Ogre, and more, along with new characters created just for the PlayStation version.\r\n\r\nFaster Gameplay\r\nInstant bounce-back from falls, more escapes from tackles and stuns, plus all-new throws make gameplay faster then ever before.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tekken%203%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tekken%203%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Tekken 3",
          "added": 1665744198975
        },
        {
          "props": {
            "uid": "065b61d2-423c-4634-a4de-51d69c7104a5",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tom%20Clancy%27s%20Rainbow%20Six%20-%20Rogue%20Spear%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tom Clancy's Rainbow Six - Rogue Spear",
          "description": "More of the same from the Rainbow Six series. Your team is back saving the world again. This time from a group known as \"Rogue Spear\". Their forces are powerful and you must strike quick and hard if you wish to win.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tom%20Clancy's%20Rainbow%20Six%20-%20Rogue%20Spear%20(Europe)%20(En%2CFr%2CDe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tom%20Clancy's%20Rainbow%20Six%20-%20Rogue%20Spear%20(Europe)%20(En%2CFr%2CDe).png",
          "backgroundPixelated": true,
          "longTitle": "Tom Clancy's Rainbow Six - Rogue Spear",
          "added": 1665743566320
        },
        {
          "props": {
            "uid": "008163e2-1155-4665-ac14-f492e157ef94",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tomb%20Raider%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tomb Raider",
          "description": "In Tomb Raider, the player controls the female archaeologist Lara Croft, in search for the three mysterious Scion artefacts across the world. The game is presented in third person perspective. Lara is always visible and the camera follows the action from behind or over her shoulder. The world she inhabits is fully drawn in three dimensions and characterized by its cubic nature. Ledges, walls and ceilings mostly sit at 90 degrees to each other, but sometimes feature sloping planes.\r\nThe object of Tomb Raider is to guide Lara through a series of tombs and other locations in search of treasures and artefacts. On the way, she must kill dangerous animals and other creatures, while collecting objects and solving puzzles to gain access to an ultimate prize, usually a powerful artefact. Gunplay is restricted to the killing of various animals that appear throughout each stage, although occasionally Lara may be faced with a human opponent. Instead the emphasis lies on solving puzzles and performing trick jumps to complete each level.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tomb%20Raider%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tomb%20Raider%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Tomb Raider",
          "added": 1665743467237
        },
        {
          "props": {
            "uid": "0cc8de87-54b3-4dff-a596-b98b31921b36",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tomb%20Raider%20-%20The%20Last%20Revelation%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tomb Raider - The Last Revelation",
          "description": "According to Egyptian legend, the Egyption god Horus outwitted the evil god Set and imprisoned him in a secret tomb...\n\nFive thousand years later, Lara Croft discovers the lost tomb and unwittingly unleashes the evil god Set, fulfilling the ancient prophecy of his return to plunge mankind into darkness! In a race against time, Lara must use all of her wit and skill to reimprison Set and save the world from Armageddon. Pursued at every turn by her arch-rival, the unscrupulous archaeologist Werner Von Croy, Lara embarks on a journey of discovery across Egypt, where she must overcome the most ingenious puzzles and infernal traps ever devised, and face terrifying evil from beyond the grave...",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tomb%20Raider%20-%20The%20Last%20Revelation%20(Europe%2C%20Australia).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tomb%20Raider%20-%20The%20Last%20Revelation%20(Europe%2C%20Australia).png",
          "backgroundPixelated": true,
          "longTitle": "Tomb Raider - The Last Revelation",
          "added": 1665743607553
        },
        {
          "props": {
            "uid": "9f9c3731-acbf-4d8e-a4db-2272460cc3de",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tomb%20Raider%20Chronicles%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tomb Raider Chronicles",
          "description": "A few days after the events described in Tomb Raider: The Last Revelation, Lara Croft is presumed dead. Her close friends begin to recollect her previous adventures, which occurred during different periods of her life. These include searching for the Philosopher's Stone in Rome; preventing the Spear of Destiny from falling into the hands of a ruthless gang leader; facing monsters on the Black Isle of Ireland as a child; and, finally, infiltrating a high-tech complex in pursuit of the Iris artefact.\r\n\r\nLike its predecessors, Tomb Raider: Chronicles is an action game with puzzle-solving and platforming elements. The gameplay is very similar to that of the previous games, with the addition of a few new skills. Lara can now walk on tightropes, swing on horizontal bars, and somersault forwards from a ledge while crouching. A grappling hook has been added to her inventory. The game also includes a level editor, allowing the player to create new stages for Lara to explore.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tomb%20Raider%20Chronicles%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tomb%20Raider%20Chronicles%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Tomb Raider Chronicles",
          "added": 1665743626668
        },
        {
          "props": {
            "uid": "8a83aade-c195-4249-80e3-4c60f7d5e362",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tomb%20Raider%20II%20-%20Starring%20Lara%20Croft%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tomb Raider II - Starring Lara Croft",
          "description": "In part 2 of the Tomb Raider series Lara Croft searches for the dagger of Xian. Her travel starts at the chinese wall and continues over various places on earth. But she is not alone, for there are other ones who also want the dagger. Not many new features, Lara can do some new moves, drive various vehicles and use new weapons. The game now also supports 3D graphic cards.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tomb%20Raider%20II%20-%20Starring%20Lara%20Croft%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tomb%20Raider%20II%20-%20Starring%20Lara%20Croft%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Tomb Raider II - Starring Lara Croft",
          "added": 1665743662624
        },
        {
          "props": {
            "uid": "dd462a59-a6ff-483b-a183-1b37ab1449bc",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tomb%20Raider%20III%20-%20Adventures%20of%20Lara%20Croft%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tomb Raider III - Adventures of Lara Croft",
          "description": "Past, present, everytime plays its role, and today Lara plays hers. Deadly and beautiful as ever, she'll give you the adventure of all times. Be careful about each level, 'cuz this time end can be reached on many paths, so be sure to check the right one, and not miss the great adventure. Third installment of a series gently follows its predecessors with no much differences in anything whatsoever, but that won't stop Lara Croft fans to enjoy for the third time as well.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tomb%20Raider%20III%20-%20Adventures%20of%20Lara%20Croft%20(Asia)%20(Disc%201)%20(Japanese%20Version).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tomb%20Raider%20III%20-%20Adventures%20of%20Lara%20Croft%20(Asia)%20(Disc%201)%20(Japanese%20Version).png",
          "backgroundPixelated": true,
          "longTitle": "Tomb Raider III - Adventures of Lara Croft",
          "added": 1665743690154
        },
        {
          "props": {
            "uid": "de329ca7-0a64-47ce-a980-f5c7e534fa0e",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tony%20Hawk%27s%20Pro%20Skater%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tony Hawk's Pro Skater",
          "description": "Tony Hawk's Pro Skater is a skateboarding simulation in which you control a famous skate star around 3D environments.  Each game area contains a plethora of objects like ramps, rails, and half-pipes which can be used to perform tricks. Each trick you perform earns you more points for your score.\n\nThe game is divided into two types of levels.  In the first, you skate around locations like a mall, a city street, or a warehouse.  In each of these areas, there are 5 goals for the you to complete.  Some goals involve obtaining a high score, others smashing objects, and some collecting objects. For every goal you complete, you earn a video tape.  By collecting enough video tapes, you unlock levels and skateboards for you to use. There are 6 levels like this. The second type of level is a competition. You get to make 3 timed runs through a skate park, and attempt to get the highest score possible.  If you do well enough, you will beat the scores of the computer controlled skaters and win a medal.  There are 3 levels like this.\n\nThere are nine real life pro skaters you can choose to play as, including Tony Hawk himself.  Each skater has their own signature moves that earn you big points if pulled off successfully.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tony%20Hawk's%20Pro%20Skater%20(Japan).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tony%20Hawk's%20Pro%20Skater%20(Japan).png",
          "backgroundPixelated": true,
          "longTitle": "Tony Hawk's Pro Skater",
          "added": 1712691604102
        },
        {
          "props": {
            "uid": "924473fa-bb26-4da9-973e-1a699462835c",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tony%20Hawk%27s%20Pro%20Skater%202%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tony Hawk's Pro Skater 2",
          "description": "The sequel to the award winning PSX and N64 title, Tony Hawk 2 adds heaps of new tricks, as well as those from the original, and a complete roster of all the greatest skaters worldwide. Fly through some of the greatest skate parks in the world, or create your own, and share them with your mates. You can also create your own skater, with a choice of clothing and official skateboards. Improved graphics and a choice of alternative or hip-hop music add to the endless options and full on action.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tony%20Hawk's%20Pro%20Skater%202%20(Australia)%20(Demo).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tony%20Hawk's%20Pro%20Skater%202%20(Australia)%20(Demo).png",
          "backgroundPixelated": true,
          "longTitle": "Tony Hawk's Pro Skater 2",
          "added": 1665744229308
        },
        {
          "props": {
            "uid": "d6d7ee92-a775-4d2d-b2de-8b5da0295a59",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tony%20Hawk%27s%20Pro%20Skater%203%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tony Hawk's Pro Skater 3",
          "description": "Tony Hawk returns with an all new line-up of skaters, an all new line-up of parks to crash through, and a whole new level of graphics.\n\nThe line-up of street and vert riders include Elissa Steamer, Jamie Thomas, Steve Caballero, Rune Glifberg, Geoff Rowley, Andrew Reynolds, Rodney Mullen, Eric Koston, Chad Muska, Bucky Lasek and Bam Margera from MTV's Jackass (and Tony Hawk, of course).\n\nThe create a skater mode returns, allowing for even further levels of options for your character, like adding glasses and tatoos to changing the colour of the knee and elbow pads or even the hair.\n\nAnd the levels themselves that you must skate through are now more interactive, with cars and humans blocking paths and making noise as you race around to make as many points as possible. Use items around the streets or the park to jump from or over to increase your score, and pull of as many wild and wacky tricks as you can.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tony%20Hawk's%20Pro%20Skater%203%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tony%20Hawk's%20Pro%20Skater%203%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Tony Hawk's Pro Skater 3",
          "added": 1665744695940
        },
        {
          "props": {
            "uid": "4ffcc1a0-c4a3-49d5-9495-717253954071",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Tony%20Hawk%27s%20Pro%20Skater%204%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Tony Hawk's Pro Skater 4",
          "description": "THPS4 is the fourth game in Activision's ever popular franchise.\n\nThe main feature of this game is it's redesigned career mode.  When beginning a level, you have all the time in the world to skate around, perform tricks, get a feel for the level, without the hassel of any goals or time limits.  When you're ready to attempt a goal, simply find a pro skater, talk to him, then receive the goal, similar to Dave Mirra Freestyle BMX.  Goals are similar to the previous games, such as collect SKATE, get a certain amount of points, transfer over this and grind that.  There are new goals, however, such as collecting the word COMBO while doing one big combo.  Miss a trick, and goal fails.  Once all regular goals are accomplished, you can attempt the Pro Goal, which is specific to each skater, and is extremely hard.\n\nAll the major skaters are here, including Tony Hawk, Bob Burnquist, Steve Caballero, Kareem Campbell, Rune Gilfberg, Eric Koston, Bucky Lasek, Bam Margera, Rodney Mullen, Chad Muska, Andrew Reynolds, Geoff Rowley, Elissa Steamer and Jamie Thomas.\n\nThe levels are been expanded and are huge.  Some of the levels include a college campus, a shipyard, and the infamous prison complex Alcatraz.\n\nFor multiplayer, all the favorite modes are back, from Graffiti and Trick Attack to Horse and King Of The Hill.  New modes include Capture The Flag and Combo Mambo.  THPS4 also supports System Link play, but not XBox Live.\n\nThe PlayStation 2 version offers everything from the XBox version, but also has online play, utilizing either your own network adaptor or the official one.  The PS2 version also features a one level demo of Shaun Murray's Pro Wakeboarder, which is not featured on any other version of the game.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Tony%20Hawk's%20Pro%20Skater%204%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Tony%20Hawk's%20Pro%20Skater%204%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Tony Hawk's Pro Skater 4",
          "added": 1712691567255
        },
        {
          "props": {
            "uid": "655a7100-492d-4a91-9f5a-8ef3b0db27e2",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Vagrant%20Story%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Vagrant Story",
          "description": "Vagrant Story is a role-playing game with several distinguishing characteristics. The entire game (including the numerous cutscenes that advance the plot) is rendered in 3D. The game focuses on exploration of large, complex dungeon-like areas and combat; there are no \"friendly\" areas, NPC interaction, or monetary system. Dungeons contain many optional rooms and environmental puzzles that mostly involve pushing, destroying, and re-arranging different types of crates to access higher areas. Ashley can also jump and grab ledges of higher platforms during exploration.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Vagrant%20Story%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Vagrant%20Story%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "Vagrant Story",
          "added": 1665743226284
        },
        {
          "props": {
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx_eur/CHD-PSX-EUR/Vib-Ribbon%20%28Europe%29%20%28En%2CFr%2CDe%2CEs%2CIt%29.chd"
            ],
            "sbi": [],
            "uid": "d5c27353-42f6-4039-bab8-dc93f62753a6"
          },
          "type": "psx",
          "title": "Vib-Ribbon",
          "description": "Your rabbity character, Vibri, is composed of some fairly basic geometric shapes.  Vibri skips around along the eponymous vib ribbon and you have to control Vibri until the end, dodging obstacles to rack up as many points as you can.\n\nThe game is a music/party game.   Japanese band Laugh and Peace provides this game with some of it's soundtrack.  The soundtrack is used to generate the game levels.  By analyzing the music being played, the game creates the level you are playing in real-time and forces you to navigate that level.  Then once you have mastered the songs that come with Vib Ribbon, you can then put in your own music CD's to see what wild challenges you can create.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Vib-Ribbon%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Vib-Ribbon%20(Europe)%20(En%2CFr%2CDe%2CEs%2CIt).png",
          "backgroundPixelated": true,
          "longTitle": "Vib-Ribbon",
          "added": 1712691510527
        },
        {
          "props": {
            "uid": "44431bf6-b817-4e73-8cb6-994f376de612",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/WipEout%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "WipEout",
          "description": "Wipeout is a futuristic racing game set in the year 2052. Racing for one of four teams, the player competes in the F3600 Anti-Gravity Racing League on six tracks. Each team's hovercraft racer has different ratings in speed, acceleration and turning. In addition to high-speed racing, there is also shooting in the game, with different weapon pickups like rockets and mines available, useful for slowing one's opponents down. Shields can also be picked up and can block the weapons' effects.\n\nThere are championship, single race and time trial modes. Winning the championship in the regular Venom class unlocks the Rapier class, where the craft are faster and the tracks have slightly different looks.\n\nThere is also a two-player mode where two opponents can race and shoot at each other.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/WipEout%20(Europe).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/WipEout%20(Europe).png",
          "backgroundPixelated": true,
          "longTitle": "WipEout",
          "added": 1712691543177
        },
        {
          "props": {
            "uid": "eeb85f0c-44a0-401d-86fe-d0eb11b4dc0b",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/WipEout%203%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "WipEout 3",
          "description": "Wipeout 3 is a racing game that retains the same basic elements of its predecessors, and introduces players to the F7200 Anti-Gravity Race League. Players control futuristic anti-gravity ships owned by racing corporations and pilot them on eight circuits. Each craft is equipped with an energy shield that absorbs damage sustained on the track; if the shield is disabled, the player's craft can be knocked out of the race. Shields are regenerated in a pit lane that is set apart from the main course. The less time spent in the pit lane, the less the shield will regenerate.\r\n\r\nIn addition to shields, each racing craft contains air brakes for navigating tight corners, as well as a \"hyper-boost\" option. Players can activate the hyper-boost to increase their speed, but the boost drains energy from the shields, making the craft more vulnerable. Using special speed pads on the course allows players to increase their speed without resorting to the boost.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/WipEout%203%20(Japan).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/WipEout%203%20(Japan).png",
          "backgroundPixelated": true,
          "longTitle": "WipEout 3",
          "added": 1665743778855
        },
        {
          "props": {
            "uid": "733972c6-aaf1-43d5-a07e-71287949bb4e",
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Wipeout%20XL%20%28USA%29.chd"
            ]
          },
          "type": "psx",
          "title": "Wipeout XL",
          "description": "Anti-gravity racing that’s light years ahead of the pack!\r\n\r\nThe original scorched the game world and became an instant classic. Fast-forward now to a brutal new generation of anti gravity racing. Loaded with faster, smoother graphics, more tracks, more crafts, and a range of nasty new weaponry. Wipeout XL will give you the rush of your life. \r\n\r\n-Up to 15 ships on the track as the same time\r\n-Secret racing features for accomplished players\r\n-New range of strategic and more explosive weapons\r\n-Multiple racing classes for a variety of player ability levels\r\n-Cool soundtrack by Future Sound of London, Chemical Brothers, Prodigy, Underworld, Fluke, and Photek",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Wipeout%20XL%20(Japan%2C%20Asia).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Wipeout%20XL%20(Japan%2C%20Asia).png",
          "backgroundPixelated": true,
          "longTitle": "Wipeout XL",
          "added": 1665743793987
        },
        {
          "props": {
            "discs": [
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Parasite%20Eve%20II%20%28USA%29%20%28Disc%201%29.chd",
              "https://myrient.erista.me/files/Internet%20Archive/chadmaster/chd_psx/CHD-PSX-USA/Parasite%20Eve%20II%20%28USA%29%20%28Disc%202%29.chd"
            ],
            "sbi": [],
            "uid": "6b608073-9706-4144-81a3-fe35ac7a0658"
          },
          "type": "psx",
          "title": "Parasite Eve II",
          "description": "Aya Brea is back in a new game. This time there are fewer RPG elements than the first game, and the game plays more like Resident Evil. Battles are now in real-time, and a new range of weapons are available. Defeating enemies rewards money as well as points used to revive and power-up Aya's suppressed Parasite powers, like healing and igniting foes. Weapons and armor now have fixed stats, but attachments can be swapped in and out of them to modify their properties.\n\nAfter surviving the events of Parasite Eve Aya left her job as a cop and became a member of MIST (Mitochondrion Investigation and Suppression Agency) in order to hunt down the remnant mutants spawned by Eve's awakening. In the year 2000 a new breed of Neo Mitochondrion takes over the Akropolis Tower in downtown LA. Aya is called in and uncovers a secret organization that threatens all humanity.",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Titles/resized/Parasite%20Eve%20II%20(Europe)%20(Disc%201).png",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-psx-images/master/Named_Snaps/output/Parasite%20Eve%20II%20(Europe)%20(Disc%201).png",
          "backgroundPixelated": true,
          "longTitle": "Parasite Eve II",
          "added": 1730583826168
        }
      ]
    },
    {
      "title": "2600",
      "longTitle": "Atari 2600",
      "background": "https://upload.wikimedia.org/wikipedia/commons/0/02/Atari-2600-Wood-4Sw-Set.png",
      "backgroundPixelated": false,
      "items": [],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/2600-thumb.png?raw=true",
      "description": "The Atari 2600, branded as the Atari Video Computer System (Atari VCS) until November 1982, is a home video game console developed and produced by Atari, Inc. Released in September 1977, it popularized microprocessor-based hardware and games stored on swappable ROM cartridges, a format first used with the Fairchild Channel F in 1976. The VCS was bundled with two joystick controllers, a conjoined pair of paddle controllers, and a game cartridge—initially Combat and later Pac-Man."
    },
    {
      "title": "5200",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/5200-thumb.png?raw=true",
      "longTitle": "Atari 5200 SuperSystem",
      "description": "The Atari 5200 SuperSystem or simply Atari 5200 is a home video game console introduced in 1982 by Atari, Inc. as a higher-end complement for the popular Atari Video Computer System. The VCS was renamed to the Atari 2600 at the time of the 5200's launch. Created to compete with Mattel's Intellivision, the 5200 wound up a direct competitor of ColecoVision shortly after its release. While the Coleco system shipped with the first home version of Nintendo's Donkey Kong, the 5200 included the 1978 arcade game Super Breakout which had already appeared on the Atari 8-bit family and Atari VCS in 1979 and 1981 respectively.\n\nThe CPU and the graphics and sound hardware are almost identical to that of the Atari 8-bit computers, although software is not directly compatible between the two systems. The 5200's controllers have an analog joystick and a numeric keypad along with start, pause, and reset buttons. The 360-degree non-centering joystick was touted as offering more control than the eight-way Atari CX40 joystick of the 2600, but was a focal point for criticism.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/5/5f/Atari-5200-Console-Set.png",
      "items": []
    },
    {
      "title": "7800",
      "longTitle": "Atari 7800 ProSystem",
      "background": "https://upload.wikimedia.org/wikipedia/commons/c/cf/Atari-7800-Console-Set.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "Midnight Mutants",
          "longTitle": "Midnight Mutants",
          "type": "7800",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-7800-images/master/Named_Snaps/output/Midnight%20Mutants%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-7800-images/master/Named_Titles/resized/Midnight%20Mutants%20(USA).png",
          "description": "Can you save Grampa from Plasmic Prison\r\n\r\n7800 Arcade adventure like you've never seen before. This game has it all places like rivers, deep dark forests, creepy caverns, labs, creatures like Vampires, Mutant zombies and menacing bats. Your adventure includes exploring large areas and finding awesome weapons. A press of a button brings instant on-screen hints and tips.\r\n\r\nIt all adds up to awesome action with mega Graphics. Grampa’s back, it’s up to you to wipe out the Monsters and clean up.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%207800/Midnight%20Mutants%20%28USA%29.zip"
          },
          "added": 1661266400528
        },
        {
          "title": "Super Skateboardin'",
          "longTitle": "Super Skateboardin'",
          "type": "7800",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-7800-images/master/Named_Snaps/output/Super%20Skateboardin'%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-7800-images/master/Named_Titles/resized/Super%20Skateboardin'%20(USA).png",
          "description": "Super Skateboardin' is a game where a young skateboarder is hired by his dad's company to do what he does best, Skateboard. Your job is to navigate the many rooms of the factory and turn off all the electrical equipment in 15 minutes, or else the electricity bill will skyrocket. Your wage is based on how fast you complete the task, and you need that money to enter the Skateboarding \nChampionship. Super Skateboardin' is a straightforward game from the designer of Pitfall!, David Crane.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%207800/Super%20Skateboardin%27%20%28USA%29.zip"
          },
          "added": 1661266305436
        },
        {
          "title": "Tank Command",
          "longTitle": "Tank Command",
          "type": "7800",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-7800-images/master/Named_Snaps/output/Tank%20Command%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-7800-images/master/Named_Titles/resized/Tank%20Command%20(USA).png",
          "description": "Tank Command is a vertically scrolling action game. You control a tank on a mission to capture the enemy flag as well as earn as many points as possible. To do this, you will need to blast your way through their defenses on three levels of increasing difficulty. Blocking your progress are enemy tanks, pillboxes, missiles, jeeps, infantry, huts, and more, all of which earn you points when destroyed. Your tank is equipped with a limited amount of fuel and ammo, however it can be replenished occasionally by collecting the bonus icons when they appear on the screen. If you can make it past all of the obstacles and capture the flag, then you win the game!\r\n\r\nThe 7800 is pretty much void of super-rare games like the 2600'?s Tooth Protectors and Chase the Chuckwagon, but don't worry, tracking down Tank Command in a box will cost you a pretty penny. As far as gameplay goes, Tank Command is not going to blow anyone away. Here you have a vertical scroller like Commando or Ikari Warriors minus the charm, quality level design, and reasonable difficulty. There are only three levels in the game, but just like its Froggo cousin Water Ski, the difficulty ramps so severely after the mindless first level that continuing takes strong will. The pink terrain is a bit odd, as well. Tank Command was only released in NTSC format.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%207800/Tank%20Command%20%28USA%29.zip"
          },
          "added": 1661266285570
        },
        {
          "title": "Water Ski",
          "longTitle": "Water Ski",
          "type": "7800",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-7800-images/master/Named_Snaps/output/Water%20Ski%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-7800-images/master/Named_Titles/resized/Water%20Ski%20(USA).png",
          "description": "In Water Ski you are water skiing on the Pharonna River. You control both the boat and skier in this vertically scrolling action game. Your goal is to reach the finish line before time runs out and also to earn as many points as possible. The river is quite dangerous, and features many twists and turns along with rocks, logs and other obstacles. For bonus points there are numerous ramps located throughout the river which your skier can jump over (and if you can manage to ski over every ramp on the level, you'll earn even more points!). You start the game with four skiers, and the game ends when all of you skiers have crashed.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%207800/Water%20Ski%20%28USA%29.zip"
          },
          "added": 1661266368017
        }
      ],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/7800-thumb.png?raw=true",
      "description": "The Atari 7800 ProSystem, or simply the Atari 7800, is a home video game console officially released by Atari Corporation in 1986 as the successor to both the Atari 2600 and Atari 5200. It can run almost all Atari 2600 cartridges, making it one of the first consoles with backward compatibility. It shipped with a different model of joystick from the 2600-standard CX40 and Pole Position II as the pack-in game. Most of the announced titles at launch were ports of 1980–83 arcade games."
    },
    {
      "title": "Lynx",
      "longTitle": "Atari Lynx",
      "background": "https://upload.wikimedia.org/wikipedia/commons/e/eb/Atari-Lynx-I-Handheld.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "Battle Wheels",
          "longTitle": "Battle Wheels",
          "type": "lnx",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Snaps/output/Battle%20Wheels%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Titles/resized/Battle%20Wheels%20(USA%2C%20Europe).png",
          "description": "The year is 2019, and the world is bored with conventional entertainment.  Enter the world of BattleWheels, where contestants fight in post-apocalyptic deserts and dead cities in the most violent destruction derby ever.  At your disposal are machine guns, flame throwers, missiles, mines, and even paint (to obstruct someone's view).  And if you survive your car getting destroyed, you can hoof it and try to wreak as much carnage as possible before becoming roadkill.  You can buy a pre-made car, or customize your own car with different levels of engine power, suspension, and armor.\n\nBattleWheels can be comlynxed up to 6 simultaneous players.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%20Lynx%20%28LYX%29/Battle%20Wheels%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1661266803935
        },
        {
          "title": "Checkered Flag",
          "longTitle": "Checkered Flag",
          "type": "lnx",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Snaps/output/Checkered%20Flag%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Titles/resized/Checkered%20Flag%20(USA%2C%20Europe).png",
          "description": "Checkered Flag for the Jaguar is a 3D F1-style racing game. The racing game staples are here: single race, practice, and tournament. You can choose to set up a variety of options for each race, also.  You can choose various weather conditions.  Or, you can set up your car to change it's handling characteristics.  There are 10 different tracks on which to race, each with a different theme.  Some take place on sunny beaches, others take place in the arctic.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%20Lynx%20%28LYX%29/Checkered%20Flag%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1661266857318
        },
        {
          "title": "Electrocop",
          "longTitle": "Electrocop",
          "type": "lnx",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Snaps/output/Electrocop%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Titles/resized/Electrocop%20(USA%2C%20Europe).png",
          "description": "Today, if a daughter of the President goes missing, I would look in the nearest bar. However, in the near future, the explanation is that she's been kidnapped by a Criminal Brain robot, and held in a booby-trapped lair. As the advanced hybrid Electrocop, your task is to rescue her within an hour.\n\nGameplay involves working your way through the complex warehouse maze, unlocking coded door along the way. Extra weapons can be collected to help dealing with the drones. There are also computer terminals to buy new weapons - these also have simple subgames built in. What makes the game unique, and intended as a showpiece for the Lynx hardware, is that full 3D is used, so that the character walks in and out of the screen as well as across it.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%20Lynx%20%28LYX%29/Electrocop%20%28World%29.zip"
          },
          "added": 1661266940482
        },
        {
          "title": "Gauntlet - The Third Encounter",
          "longTitle": "Gauntlet - The Third Encounter",
          "type": "lnx",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Snaps/output/Gauntlet%20-%20The%20Third%20Encounter%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Titles/resized/Gauntlet%20-%20The%20Third%20Encounter%20(USA%2C%20Europe).png",
          "description": "Generations ago an enchanted Star Gen crashed to Earth at the base of an ancient castle. Loathsome creatures crept from the castle and carried the Gem into the depths of the fortress.\n\nAll attempts to retrieve the Star Gem failed. The adventurers were destroyed.\n\nThe creatures in the castle gain magical strength from the Star Gem. Unless the Gem is taken from them, the evil ones will soon have the strength to venture forth and destroy mankind!\n\nYou and your friends must take up the quest to rescue the Star Gem... and your world!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%20Lynx%20%28LYX%29/Gauntlet%20-%20The%20Third%20Encounter%20%28World%29.zip"
          },
          "added": 1661266778235
        },
        {
          "title": "RoadBlasters",
          "longTitle": "RoadBlasters",
          "type": "lnx",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Snaps/output/RoadBlasters%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Titles/resized/RoadBlasters%20(USA%2C%20Europe).png",
          "description": "RoadBlasters is a futuristic racing action game. The goal is to reach the finish line in one piece throughout each of 50 levels. Numerous enemies are out on the road to try and stop you, including armored cars, motorcycles, canons on the side of the road, landmines, and more. \n\nYour vehicle is equipped with a machine gun to help you out, and occasionally a weapons plane will fly in and drop additional power ups that can be collected. Some of these are the U.Z. canon, cruise missiles, and speed boost. Your car has a very limited amount of fuel, however more can be picked up along the way by crossing the halfway point of a level, or by collecting the red and green fuel spheres that appear in the road or after destroying certain enemies.  On many levels collecting fuel is critical otherwise you won't be able to reach the finish line.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%20Lynx%20%28LYX%29/RoadBlasters%20%28World%29.zip"
          },
          "added": 1661266681873
        },
        {
          "title": "Shadow of the Beast",
          "longTitle": "Shadow of the Beast",
          "type": "lnx",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Snaps/output/Shadow%20of%20the%20Beast%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-lnx-images/master/Named_Titles/resized/Shadow%20of%20the%20Beast%20(USA%2C%20Europe).png",
          "description": "While very young, Aarbron was kidnapped and enslaved by the Priests of the Beast Lord. He grew up on drugs made to destroy his own will and turn him into the Beast Messenger, a powerful creature serving Maletoth, The Beast Lord himself. He did his job, until one day he noticed a man about to be sacrificed in a ritual, his face triggering ancient memories... and as the sacrificial knife descended into the man's body, Aarbron recognizes the face. Of his father.\nAs his father dies in the altar, memories of his childhood and tormented past at the hands of the Beast Lord emerged, and as feelings of hate over his captors took over him, he swore revenge and fled the temple, knowing the road to avenge his father and redemption would be hard.\n\nShadow of the Beast, one of Psygnosis most popular titles during the 16-bit computer era is a side-scrolling platformer best known for the use of parallax scrolling along lush graphics, a musical score  by David Whittaker, a iconic cover by Roger Dean and what many consider to be unforgiving gameplay, balancing between the \"very challenging\" and the \"impossible\". The player has to navigate through several areas filled with enemies and traps, collecting keys and activating triggers than open new areas or give Aarbron the means to overcome a sub-boss. The number of moves the player has at disposal is limited: duck, jump and only two attacks: punch and a flying kick. While most enemies die with just one hit, the player must time each attack accurately. However, there are also traps of objects that cannot be destroyed, and these require the player to jump, duck or move according the sequence. The player has only one life with 12 hit points that can be replenished by collecting some objects hidden in the level (like an off-route location or a under a megalith), which also contributes to the difficulty level.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Atari%20-%20Lynx%20%28LYX%29/Shadow%20of%20the%20Beast%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1661266593772
        }
      ],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/lynx-thumb.png?raw=true",
      "description": "The Atari Lynx is a hybrid 8-bit and 16-bit handheld game console released by Atari Corporation in September 1989 in North America, and in Europe and Japan in 1990.\n\nIt arose as the first handheld game console with a color LCD screen. Its advanced graphics and ambidextrous layout competed with Nintendo's Game Boy (released two months earlier), and with the Game Gear and TurboExpress, both released the following year. It was discontinued in 1995."
    },
    {
      "title": "Coleco",
      "longTitle": "ColecoVision",
      "background": "https://upload.wikimedia.org/wikipedia/commons/2/2a/ColecoVision-wController-L.png",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/coleco-thumb.png?raw=true",
      "description": "ColecoVision is a second-generation home video-game console developed by Coleco and launched in North America in August 1982. It was released a year later in Europe by CBS Electronics as the CBS ColecoVision.\n\nThe console offered a closer experience to more powerful arcade video games compared to competitors such as the Atari 2600 and Intellivision. The initial catalog of twelve games on ROM cartridge included the first home version of Nintendo's Donkey Kong as the pack-in game. Approximately 136 games were published between 1982 and 1984, including Sega's Zaxxon and some ports of lesser known arcade games that found a larger audience on the console, such as Lady Bug, Cosmic Avenger, and Venture.",
      "items": []
    },
    {
      "title": "PCE",
      "longTitle": "NEC PC Engine",
      "background": "https://upload.wikimedia.org/wikipedia/commons/e/e0/PC-Engine-Console-Set.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "Air Zonk",
          "longTitle": "Air Zonk",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Air%20Zonk%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Air%20Zonk%20(USA).png",
          "description": "In 1992, Hudson Soft expanded upon the Bonk's Adventure franchise they had built by creating Air Zonk, a 2D side-scrolling \"cute 'em up\" shooter set in a cyberpunk-esque future. While Air Zonk differed from its successor in terms of gameplay, the cartoonish style of the Bonk series could still be seen all throughout the game, especially in the graphics, the characters, & of course, Zonk himself.\r\n\r\nAir Zonk may appear to feature a candy cartoon coating on the outside, but it's still a traditional shoot-'em-up at heart. You still have a selection of your basic weapon power-ups (8 in total here), but spread guns & powerful bursts are now represented by killer decks of cards & giant metal mandibles. Large, imposing endbosses are still the norm, but here your foes range from giant heaps of living garbage to killer football players. And outer space? Who needs to blow up things there when you have other venues (5 in total) such as a gigantic stadium to do it in?\r\n\r\nIn addition to all of this, Air Zonk gives you a feature that allows you to choose from one of 10 \"friends\" at the beginning of each level who will fight by your side once you pick up a certain power-up. These friends range from giant scud missiles to living dump trucks to floating cow-things, among others. Pick up another power-up, & Zonk & his friend combine to create a powerful hybrid form, featuring some of the strangest attacks you may ever see in a video game.\r\n\r\nSo will Zonk be able to defeat King Drool, rescue the moon from his clutches, & save the world? As usual, the answer is up to you...",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Air%20Zonk%20%28USA%29.zip"
          },
          "added": 1661267148169
        },
        {
          "title": "Barunba",
          "longTitle": "Barunba",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Barunba%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Barunba%20(Japan).png",
          "description": "The Engine is hardly lacking in shooters, so to be successful, you have to stand out from the crowd. Barunba tries to add a hint of originality in its own subtle way. You control what is basically a floating globe (complete with little man inside) that has a weapons ring around it - this ring can be rotated right around the ship giving a fully controllable direction of fire, something obviously useful for those pesky critters approaching from behind. From the start, you are equipped with several different types of weapon, each of which can be temporarily boosted by collecting items that are dropped by exploding enemies. The levels are auto-scroll, moving around in all directions and contain mid-level as well as end-of-level bosses. Your ship has an energy bar, located at the bottom left of the screen, and once it is depleted it's 'Game Over'.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Barunba%20%28Japan%29.zip"
          },
          "added": 1661267772657
        },
        {
          "title": "Blazing Lazers",
          "longTitle": "Blazing Lazers",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Blazing%20Lazers%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Blazing%20Lazers%20(USA).png",
          "description": "Blazing Lazers is a top-down shooter featuring 9 levels of varied and fast-paced action.  The story here is the usual save-the-world variety. You must pilot your ship against 8 super-weapons and ultimately destroy the menace once and for all.\r\n\r\nThe power-up system in Blazing Lazers deserves special mention. There are four main types of weapons, and each type of weapon can be upgraded several times to produce an incredible amount of firepower. In addition, there are secondary weapons systems that provide you with shields, homing missiles, multi-fire units, or super weapon power.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Blazing%20Lazers%20%28USA%29.zip"
          },
          "added": 1661267173336
        },
        {
          "title": "Bloody Wolf",
          "longTitle": "Bloody Wolf",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Bloody%20Wolf%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Bloody%20Wolf%20(USA).png",
          "description": "Snake and Eagle, two commandos of the Bloody Wolf special forces, receive instructions from their commander to destroy the enemy's heavily armed base to rescue the President and any allies who have been reported as MIA.\r\n\r\nBased off the 1988 arcade game, this single-player, top-down, run and gun shooter takes a nod to Contra-style gameplay, allowing one of the two mercenaries to blast their way through eight levels of enemy opposition armed with only a knife and a machine gun. \r\n\r\nAlong the way, new weapons such as shotguns, bazookas, flash bombs and grenades grenades can be added to the arsenal, as well as health and defensive power-ups. Players can even find a motorcycle to ride in some areas, or swim through certain parts of a level.\r\n\r\nThe President and your fellow soldiers need you!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Bloody%20Wolf%20%28USA%29.zip"
          },
          "added": 1661267849994
        },
        {
          "title": "Cadash",
          "longTitle": "Cadash",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Cadash%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Cadash%20(USA).png",
          "description": "Trouble is in the kingdom of Dilsarl: the young, beautiful princess Salasa was abducted by the evil arch-mage Balrog! The king seeks help by the four best warriors of the country. Your task is clear, but not so simple: find Balrog, destroy his evil minions and other monsters who try to stop you, and rescue the princess!\r\n\r\nThis is a platform action RPG. You choose one of the four character classes in the beginning of the game: fighter, priestess, mage, or ninja. You fight your way through dungeons, attacking physically or casting spells (as priestess or mage). Like in regular platform games, there are places where you should jump, duck, or climb. You gain experience for defeating monsters, and your level rises in a true RPG fashion.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Cadash%20%28USA%29.zip"
          },
          "added": 1661267654535
        },
        {
          "title": "Devil's Crush",
          "longTitle": "Devil's Crush",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Devil's%20Crush%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Devil's%20Crush%20(USA).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Devil%27s%20Crush%20%28USA%29.zip"
          },
          "added": 1661267692728,
          "description": "Devil's Crush is a pinball video game developed by Compile for the TurboGrafx-16 and released in 1990. The second installment in the Crush Pinball series after Alien Crush, the game has an eerie occult theme with skulls, skeletons, and demons. It was later followed by Jaki Crush and Alien Crush Returns."
        },
        {
          "title": "Dungeon Explorer",
          "longTitle": "Dungeon Explorer",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Dungeon%20Explorer%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Dungeon%20Explorer%20(USA).png",
          "description": "The former king of Oddesia has entrusted you with an important, dangerous task. You must find the sacred ORA stone, which possesses the powers of life, light and happiness, and retrieve it before the king of the alien race, Natas, does. He has conquered this land and plunged it into an age of terror and despair, plagued with violence. It is up to you to stand against him and return your world to its former glory.\r\n\r\nDungeon Explorer plays like Gauntlet: you choose one of several different characters to play as (Fighter, Thief, Warlock, Witch, Bard, Bishop, Elf and Knome) and set out on your adventure alone or with up to four other players. Battles are real-time and of the shooter variety, ie, rather than swing a sword, you fire knives (or spells depending on your class). Enemies respawn out of holes in the ground which must be eradicated to keep them from pouring forth in waves. There are a number of items to be found and used throughout the game including potions of white and black magic, healing drinks and the like, but unlike Gauntlet there is no food to worry about.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Dungeon%20Explorer%20%28USA%29.zip"
          },
          "added": 1661267593387
        },
        {
          "title": "Keith Courage in Alpha Zones",
          "longTitle": "Keith Courage in Alpha Zones",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Keith%20Courage%20in%20Alpha%20Zones%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Keith%20Courage%20in%20Alpha%20Zones%20(USA).png",
          "description": "As a member of N.I.C.E. (Nations for International Citizens of Earth), Keith Courage takes up the fight against the aliens of B.A.D. (Bad Alien Dudes) through seven levels in this side-scrolling action platformer.\r\n\r\nAs Keith Courage makes his way through the various zones, he attacks various forms of enemies in order to gain coins. The coins can be used in the shops for various power-ups, equipment, and other helpful items.\r\n\r\nWhen he makes it to a certain point in each level, Keith Courage is given access to the Nova Suit, an armored suit with a powerful sword that is used to dispatch the end bosses of each level in the Underworld. Once Keith Courage defeats the boss, the returns to the Overworld sans armor to complete the next set of challenges.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Keith%20Courage%20in%20Alpha%20Zones%20%28USA%29.zip"
          },
          "added": 1661267502158
        },
        {
          "title": "Neutopia",
          "longTitle": "Neutopia",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Neutopia%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Neutopia%20(USA).png",
          "description": "You play as a young warrior named Jazeta. The princess Aurora was kidnapped by the evil Dirth, and the king send you on a mission to rescue her. It appears that once Dirth way sealed by eight wise men who used the power of eight sacred medallions. Princess Aurora is the only one who knows how to use those medallions, and that is why Dirth abducted her! You must explore the land, descend to the dangerous labyrinths, retrieve the eight medallions, rescue the princess, and defeat Dirth.\r\n\r\nVery similar to the famous Zelda games, \"Neutopia\" is Turbo Grafx' answer to Nintendo's king of action adventures. You roam freely the vast land, fighting many different monsters in wilderness areas as well as in dungeons. Dungeons also require some puzzle-solving (pushing stones, blowing walls with bombs, etc.). The game has a slight RPG flavor, allowing you to power-up by collecting various items, and equip different weapons and armor.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Neutopia%20%28USA%29.zip"
          },
          "added": 1661267278373
        },
        {
          "title": "Ninja Spirit",
          "longTitle": "Ninja Spirit",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Ninja%20Spirit%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Ninja%20Spirit%20(USA).png",
          "description": "Conversion of a ninja-based action game that has the player leading Moonlight through numerous enemy-riddled levels on a quest to exact revenge against his father's murderer. To accomplish this task Moonlight is armed with a katana, shurikens, bombs, and a sickle and chain weapon. Each weapon offers its own advantages and must be used at certain times to overcome specific obstacles or opponents. \r\n\r\nThe game's coin-op origins are evident in the fact that it does not have passwords or saves. To compensate for this, however, adjustable difficulty settings were added.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Ninja%20Spirit%20%28USA%29.zip"
          },
          "added": 1661267679007
        },
        {
          "title": "Parasol Stars - The Story of Bubble Bobble III",
          "longTitle": "Parasol Stars - The Story of Bubble Bobble III",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Parasol%20Stars%20-%20The%20Story%20of%20Bubble%20Bobble%20III%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Parasol%20Stars%20-%20The%20Story%20of%20Bubble%20Bobble%20III%20(USA).png",
          "description": "Break out the bandages and get ready for some finger-searing action! Join Bubby on his latest quest to save the universe, this time with a Magic Umbrella. Umbrella!? Yes, Umbrella! This powerful Parasol puts the elements themselves at your command! Shock the tonnage out of the whales with Lightning! Fry the feathers off the crazed, beady-eyed birds with Fire! Or, drown your demented dinosaurs with a tidel wave of Raindrops! Need help? Your buddy Bobby is always nearby. Have a friend plug into your TurboTap and blast into two player simultaneous play. Be prepared for a quest that will take you to eight amazing planets, forcing you to uncover the secret that will unleash the Parasol Stars!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Parasol%20Stars%20-%20The%20Story%20of%20Bubble%20Bobble%20III%20%28USA%29.zip"
          },
          "added": 1661267568766
        },
        {
          "title": "Super Star Soldier",
          "longTitle": "Super Star Soldier",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Super%20Star%20Soldier%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Super%20Star%20Soldier%20(USA).png",
          "description": "Super Star Soldier takes place in the far future, where you are the last hope for planet Earth, which is being attacked by an alien race.\r\n\r\nThe game features top-down view with vertical scrolling levels, similar to it's prequel Star Soldier. \r\nThe game features the following game play modes: normal play, score play, 2 minutes play and 5 minutes play.\r\nEach level has it's own tough boss at the end.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Super%20Star%20Soldier%20%28USA%29.zip"
          },
          "added": 1661267218094
        },
        {
          "title": "The Legendary Axe",
          "longTitle": "The Legendary Axe",
          "type": "pce",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Snaps/output/Legendary%20Axe%2C%20The%20(USA).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-pce-images/master/Named_Titles/resized/Legendary%20Axe%2C%20The%20(USA).png",
          "description": "You are the mighty warrior Gogan, whose village has been required  by the Jagu tribe to give a human sacrifice each year. Flare, your childhood friend, has been chosen as the sacrifice. Your task is to rescue Flare and destroy the Jagu and their leader. To help you complete your mission, you are given the Legendary Axe, which is said to possess tremendous power that is usable only to its wielder. \r\n\r\nThere are six zones in the game and has Gogan exploring forests, caves, mountains, dungeons, and castles, while defeating enemies that get in his way with his axe. Idols can be broken to reveal power-ups that will increase the axe's power and speed up its swing. These power-ups can also award you extra lives, more points, and the ability to access secret areas. At the end of each zone, you have to defeat a boss in order to proceed.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/NEC%20-%20PC%20Engine%20-%20TurboGrafx-16/Legendary%20Axe%2C%20The%20%28USA%29.zip"
          },
          "added": 1661267317803
        }
      ],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/pce-thumb.png?raw=true",
      "description": "The TurboGrafx-16, known as the PC Engine outside North America, is a fourth-generation home video game console designed by Hudson Soft and sold by NEC Home Electronics. It was the first console marketed in the fourth generation of game consoles, commonly known as the 16-bit era, though the console has an 8-bit central processing unit (CPU). It was released in Japan in 1987 and in North America in 1989. In Europe, the console is known as the PC Engine, after the Japanese model was imported and distributed in the United Kingdom and France from 1988. In Japan, the system was launched as a competitor to the Famicom, but the delayed United States release meant that it ended up competing with the Sega Genesis and later the Super NES."
    },
    {
      "title": "PCECD",
      "longTitle": "NEC PC Engine CD-ROM²",
      "description": "The CD-ROM² is an add-on attachment for the PC Engine that was released in Japan on December 4, 1988. The add-on allows the core versions of the console to play PC Engine games in CD-ROM format in addition to standard HuCards. This made the PC Engine the first video game console to use CD-ROM as a storage media. The add-on consisted of two devices – the CD player itself and the interface unit, which connects the CD player to the console and provides a unified power supply and output for both. It was later released as the TurboGrafx-CD in the United States in November 1989, with a remodeled interface unit in order to suit the different shape of the TurboGrafx-16 console. The TurboGrafx-CD had a launch price of $399.99 and did not include any bundled games. Fighting Street and Monster Lair were the TurboGrafx-CD launch titles; Ys Book I & II soon followed.",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/pcecd-thumb.png?raw=true",
      "background": "https://upload.wikimedia.org/wikipedia/commons/2/26/PC-Engine-Duo-Console-Set.png",
      "items": []
    },
    {
      "title": "SGX",
      "longTitle": "NEC PC Engine SuperGrafx",
      "background": "https://upload.wikimedia.org/wikipedia/commons/e/e9/SuperGrafx-Console-Set.png",
      "backgroundPixelated": false,
      "items": [],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/sgx-thumb.png?raw=true",
      "description": "The PC Engine SuperGrafx is a fourth-generation home video game console manufactured by NEC Home Electronics and released in Japan in 1989. It is the successor system to the PC Engine, released two years prior. Originally known as the PC Engine 2 during production stages, it was purported as a true 16-bit home console, featuring improved graphics and audio capabilities over its predecessor."
    },
    {
      "title": "PC-FX",
      "longTitle": "NEC PC-FX",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/pcfx-thumb.png?raw=true",
      "description": "The PC-FX is a 32-bit home video game console developed by NEC and Hudson Soft. It was released in 1994 and discontinued in February 1998, as NEC's final home video game console. Based on the NEC V810 CPU and CD-ROM, it was intended as the successor to the PC Engine (known overseas as the TurboGrafx-16). Unlike its predecessor, the PC-FX was only released in Japan.\n\nIts form factor is like that of a tower PC, intended to be similarly upgradeable. The PC-FX was uncompetitive with its fifth generation peers due to lack of a 3D polygon-based graphics chip, high price, and limited developer support and is considered a commercial failure.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/b/bf/PC-FX-Console-Set.png",
      "items": []
    },
    {
      "title": "NeoCD",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/neogeocd-thumb.png?raw=true",
      "longTitle": "SNK Neo Geo CD",
      "description": "The Neo Geo CD is the second home video game console of SNK Corporation's Neo Geo family, released on September 9, 1994, four years after its cartridge-based equivalent. This is the same platform, converted to the cheaper CD format retailing at $49 to 79 per title, compared to the $300 cartridges. The system was originally priced at US$399, or £399. The system can also play Audio CDs. All three versions of the system have no region lock, but they are region aware, and some games will display English or Japanese depending on the console's region setting. The Neo Geo CD was launched with a bundled control pad instead of a joystick like the AES version. A newly designed joystick was released alongside the Neo Geo CD, and the system was compatible with controllers from the AES.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/3/3e/Neo-Geo-CD-TopLoader-wController-FL.png",
      "items": []
    },
    {
      "title": "3DO",
      "longTitle": "3DO Interactive Multiplayer",
      "background": "https://upload.wikimedia.org/wikipedia/commons/1/1c/3DO-FZ1-Console-Set.png",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/3do-thumb.png?raw=true",
      "description": "The 3DO Interactive Multiplayer, also referred to as simply 3DO, is a home video game console developed by The 3DO Company. Conceived by entrepreneur and Electronic Arts founder Trip Hawkins, the 3DO was not a console manufactured by the company itself, but a set of specifications, originally designed by Dave Needle and RJ Mical of New Technologies Group, that could be licensed by third parties. Panasonic produced the first models in 1993, and further renditions of the hardware were released afterwards by GoldStar, Sanyo, Creative Labs, and Samsung Electronics in 1997.",
      "items": []
    },
    {
      "title": "WS",
      "longTitle": "Bandai WonderSwan",
      "background": "https://upload.wikimedia.org/wikipedia/commons/2/27/WonderSwan-Black-Left.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "Buffers Evolution",
          "longTitle": "Buffers Evolution",
          "type": "ws",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ws-images/master/Named_Snaps/output/Buffers%20Evolution%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ws-images/master/Named_Titles/resized/Buffers%20Evolution%20(Japan).png",
          "description": "In a post-apocalyptic future a gambling syndicate seeks to make a quick buck in the gritty remains of earth. By fusing the best of animal and mechanical traits they create three bestial androids from a bird, a lion, and a rhinoceros. Bets are taken and then the robots are loosed into hostile mazes of scrap metal on old earth. Maybe they'll even make it back alive...\r\n\r\nThe goal of BUFFERS EVOLUTION is to run through a course while collecting ten parts in the best time possible. The courses are large and vary between jungle scenes, deserts, old factories, and general mechanical wastes. These areas are cased in by electricity to stop the contests from escaping and thereby ruining the entertainment of the masses. This will keep you in the bounds of the course. With the press of a button your character will momentarily turn into a 'buffer', a sharp pisiform metallic object, while being a buffer you can destroy enemies by slamming into them, this will often bounce you in a given direction, which is useful for reaching high ledges. \r\n\r\nAlthough you do not need to get all the parts to clear an area special items can be accrued by collection parts, while on the course proper these parts will heal any damage you may have taken. Perhaps if you collect all the part in all nine areas you'll have the means to escape you captors? \r\n\r\nGameplay is reminiscent of Sonic the Hedghog\r\nalthough in those games you race against a countdown while here you are merely trying to get good times.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Bandai%20-%20WonderSwan/Buffers%20Evolution%20%28Japan%29.zip"
          },
          "added": 1661268287448
        },
        {
          "title": "Kaze no Klonoa - Moonlight Museum",
          "longTitle": "Kaze no Klonoa - Moonlight Museum",
          "type": "ws",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ws-images/master/Named_Snaps/output/Kaze%20no%20Klonoa%20-%20Moonlight%20Museum%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ws-images/master/Named_Titles/resized/Kaze%20no%20Klonoa%20-%20Moonlight%20Museum%20(Japan).png",
          "description": "In this game, you control a boy named Klonoa. One day he sees a dream in which he learns that somebody has stolen a fragment of the moon. He is told that the thieves are probably some painters who took the moon fragment into a museum. As Klonoa enters the music, he gets teleported into a mysterious world. Now he has to use his wit in order to overcome all the obstacles in this world and retrieve the moon fragment.\r\n\r\nKaze no Klonoa: Moonlight Museum is a platform game with an emphasis on puzzle-solving. The enemies you encounter can be inflated with the help of Klonoa's yo-yo, and carried around. You can throw them at other enemies, or use them to jump to higher ledges. In addition, there are various kinds of symbols you have to collect to open locked doors, teleporters, switches, time bombs, and other ingredients for puzzles.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Bandai%20-%20WonderSwan/Kaze%20no%20Klonoa%20-%20Moonlight%20Museum%20%28Japan%29.zip"
          },
          "added": 1661268446164
        },
        {
          "title": "Rainbow Islands - Putty's Party",
          "longTitle": "Rainbow Islands - Putty's Party",
          "type": "ws",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ws-images/master/Named_Snaps/output/Rainbow%20Islands%20-%20Putty's%20Party%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ws-images/master/Named_Titles/resized/Rainbow%20Islands%20-%20Putty's%20Party%20(Japan).png",
          "description": "A spin-off of the Rainbow Islands games, this title features Putty instead of the classic Bub & Bob. Like the previous games set on the island the character's main tools and weapons are rainbows. These rainbows can be walked on to scale heights or cover gaps. Rainbows can also be used to kill enemies by striking them with the arc as it is created, or after it has taken form jumping on it so that it breaks and the shards rain death on those below. Enemies can also be trapped in rainbows. Enemies killed by rainbow shards will sometimes drop a special item or a gem. A series of gems are needed to properly clear each level.\r\n\r\nThe goal of each area, aside from collecting gems, is to scale to the top of the island. Islands are made out of a series of themed platforms covered with associated enemies. These areas are scattered with items, mostly food, that will increase your score. Sometimes a rainbow will dislodge hidden food or an enemy will drop some when killed. If your score is high enough you will start to send out more than one rainbow at a time. At the end of each island there will be a boss. If you fulfilled certain requirements in the level you may get a special item.\r\n\r\nThe islands in this game are, here listed with their theme:\r\n\r\n1. Insect Island: Insects and nature\r\n2. Monster Island: Classic horror monsters\r\n3. Doh Island: Geometric\r\n4. Darius Island: Machines\r\n\r\nThis game plays vertically.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Bandai%20-%20WonderSwan/Rainbow%20Islands%20-%20Putty%27s%20Party%20%28Japan%29.zip"
          },
          "added": 1661268138867
        }
      ],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/ws-thumb.png?raw=true",
      "description": "The WonderSwan is a handheld game console released in Japan by Bandai. It was developed by Gunpei Yokoi's company Koto Laboratory and Bandai, and was the last piece of hardware Yokoi developed before his death in 1997. Released in 1999 in the fifth generation of video game consoles, the WonderSwan and its two later models, the WonderSwan Color and SwanCrystal were officially supported until being discontinued by Bandai in 2003. During its lifespan, no variation of the WonderSwan was released outside of Japan."
    },
    {
      "title": "WSC",
      "longTitle": "Bandai WonderSwan Color",
      "background": "https://upload.wikimedia.org/wikipedia/commons/f/f0/WonderSwan-Color-Blue-Left.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "Grand Battle! Swan Colosseum",
          "longTitle": "Grand Battle! Swan Colosseum",
          "type": "wsc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-wsc-images/master/Named_Snaps/output/From%20TV%20Animation%20One%20Piece%20-%20Grand%20Battle%20Swan%20Colosseum%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-wsc-images/master/Named_Titles/resized/From%20TV%20Animation%20One%20Piece%20-%20Grand%20Battle%20Swan%20Colosseum%20(Japan).png",
          "description": "Grand Battle! Swan Colosseum is a fighting game based on the One Piece manga and anime, released for the WonderSwan Color. A handheld spin-off to Grand Battle! 2, it condenses many of the game elements to a smaller scale, with its story material adapted almost exclusively from the Arabasta Saga.\n\nThe game was developed by Dimps, published by Bandai, and released on July 12, 2002.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Bandai%20-%20WonderSwan%20Color/From%20TV%20Animation%20One%20Piece%20-%20Grand%20Battle%20Swan%20Colosseum%20%28Japan%29.zip"
          },
          "added": 1661268700507
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Bandai%20-%20WonderSwan%20Color/Judgement%20Silversword%20-%20Rebirth%20Edition%20%28Japan%29%20%28Rev%204321%29.zip"
          },
          "type": "wsc",
          "title": "Judgement Silversword - Rebirth Edition",
          "added": 1661268675218,
          "description": "Judgement Silversword was created by independent Japanese designer \"M-KAI\". It was programmed using the WonderWitch, a software development kit produced by Qute that allowed consumers to produce homebrew software for the WonderSwan hardware family using the C programming language. To promote the kit's release, Qute held a contest where programmers had to use it to make a game for the system, the winners having their games published as official releases. Judgement Silversword was one of the winning games, alongside M-KAI's sister project Cardinal Sins, both of which Qute published in Japan. Development lasted roughly a month and a half. The game is believed to be inspired by Treasure's 1998 arcade game Radiant Silvergun.",
          "longTitle": "Judgement Silversword - Rebirth Edition",
          "backgroundPixelated": true,
          "background": "https://www.retrogamer.net/wp-content/uploads/2013/10/112judgementsilversword.png",
          "thumbnail": "https://i.ytimg.com/vi/RDp7xeEQbsQ/hqdefault.jpg"
        },
        {
          "title": "Rhyme Rider Kerorican",
          "longTitle": "Rhyme Rider Kerorican",
          "type": "wsc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-wsc-images/master/Named_Snaps/output/Rhyme%20Rider%20Kerorican%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-wsc-images/master/Named_Titles/resized/Rhyme%20Rider%20Kerorican%20(Japan).png",
          "description": "You play as the rhyme rider Kerorcian, a vivacious space girl with a large frog helmet, as she skips to the music through the games four stages. The games music is largely comprised of jazzy techno pieces.\r\n\r\nKerorcian skips down a set line while randomly placed enemies and obstacles appear before her. Various button combos will avoid certain obstacles, although a \"one-button\" easy mode is available. When you avoid an obstacle a note will sound, clearing long chains of obstacles will result in funky melodies popping up inside the song that is playing. This gameplay is reminiscent of the studios earlier game Vib Ribbon. \r\n\r\nSome of the obstacles are interactive, such as a rocket one can jump on and ride a short distance, others can merely be kicked out of the way or jumped over.\r\n\r\nOccasionally a crown will appear over an obstacle, if you successfully clear it you will briefly soar over the stage avoiding anything that might have been in your path. This is especially common before obstacles that might require outlandish button combos.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Bandai%20-%20WonderSwan%20Color/Rhyme%20Rider%20Kerorican%20%28Japan%29.zip"
          },
          "added": 1661268709698
        },
        {
          "title": "SD Gundam - Operation U.C.",
          "longTitle": "SD Gundam - Operation U.C.",
          "type": "wsc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-wsc-images/master/Named_Snaps/output/SD%20Gundam%20-%20Operation%20U.C.%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-wsc-images/master/Named_Titles/resized/SD%20Gundam%20-%20Operation%20U.C.%20(Japan).png",
          "description": "SD Gundam: Operation U.C. is an Action game, developed and published by Bandai, which was released in Japan in 2002.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/Bandai%20-%20WonderSwan%20Color/SD%20Gundam%20-%20Operation%20U.C.%20%28Japan%29.zip"
          },
          "added": 1661268631933
        }
      ],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/wsc-thumb.png?raw=true",
      "description": "Bandai announced the WonderSwan Color which would incorporate a color screen while retaining backward compatibility with the original WonderSwan. It was released on December 9, 2000 in Japan and was available in pearl blue, pearl pink, crystal black, crystal blue, and crystal orange. The launch was a moderate success, with the system selling 270,632 units in under a month after its release."
    },
    {
      "title": "NGP",
      "longTitle": "SNK Neo Geo Pocket",
      "background": "https://upload.wikimedia.org/wikipedia/commons/2/27/Neo-Geo-Pocket-Anthra-Left.png",
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/ngp-thumb.png?raw=true",
      "description": "The Neo Geo Pocket (NGP) is a monochrome handheld game console released by SNK. It was the company's first handheld system and is part of the Neo Geo family. It debuted in Japan in late 1998 and was primarily sold in Japan and Hong Kong. The system and all five English games saw limited distribution in the west, where it could be ordered directly from SNK USA.\n\nThe Neo Geo Pocket received lower than expected sales and it was discontinued in 1999, immediately being succeeded by the Neo Geo Pocket Color (NGPC), a full color device allowing the system to compete more easily with the dominant Game Boy Color handheld, and which also saw an American release. Though the system enjoyed only a short life, there were some significant games released on the system such as Samurai Shodown!, and King of Fighters R-1.",
      "items": [
        {
          "title": "King of Fighters R-1 - Pocket Fighting Series",
          "longTitle": "King of Fighters R-1 - Pocket Fighting Series",
          "type": "ngp",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngp-images/master/Named_Snaps/output/King%20of%20Fighters%20R-1%20-%20Pocket%20Fighting%20Series%20(Japan%2C%20Europe)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngp-images/master/Named_Titles/resized/King%20of%20Fighters%20R-1%20-%20Pocket%20Fighting%20Series%20(Japan%2C%20Europe)%20(En%2CJa).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket/King%20of%20Fighters%20R-1%20-%20Pocket%20Fighting%20Series%20%28Japan%2C%20Europe%29%20%28En%2CJa%29.zip"
          },
          "added": 1712692168424,
          "description": "King of Fighters R-1 is a fighting game for the Neo Geo Pocket. It is based on The King of Fighters '97. This title is one of the many titles released on October 28, 1998. It was followed by King of Fighters R-2.\n\nThe game shares the same storyline as The King of Fighters '97, taking place after the events of The King of Fighters '96. Unlike the normal game, which has 10 teams, this game has only 5 teams."
        },
        {
          "title": "Samurai Shodown! - Pocket Fighting Series",
          "longTitle": "Samurai Shodown! - Pocket Fighting Series",
          "type": "ngp",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngp-images/master/Named_Snaps/output/Samurai%20Shodown!%20-%20Pocket%20Fighting%20Series%20(Japan%2C%20Europe)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngp-images/master/Named_Titles/resized/Samurai%20Shodown!%20-%20Pocket%20Fighting%20Series%20(Japan%2C%20Europe)%20(En%2CJa).png",
          "description": "In early feudal Japan, a man named Shiro Tokisada Amakusa preaches a heretic religion. Little does anyone know that Amakusa is really a servant of the evil Ambrosia, who had possessed and taken over Amakusa's body, as Ambrosia wishes to shroud the world into eternal darkness. Now, the player must select from out of 12 fierce warriors and plus 3 bonus characters in order to fight for the honor of defeating Amakusa once and for all, while fulfilling a specific mission for each and every warrior in the game.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket/Samurai%20Shodown%21%20-%20Pocket%20Fighting%20Series%20%28Japan%2C%20Europe%29%20%28En%2CJa%29.zip"
          },
          "added": 1712692187557
        }
      ]
    },
    {
      "title": "NGPC",
      "longTitle": "SNK Neo Geo Pocket Color",
      "background": "https://upload.wikimedia.org/wikipedia/commons/9/94/Neo-Geo-Pocket-Color-Blue-Left.png",
      "backgroundPixelated": false,
      "items": [
        {
          "title": "Biomotor Unitron",
          "longTitle": "Biomotor Unitron",
          "type": "ngc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Snaps/output/Biomotor%20Unitron%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Titles/resized/Biomotor%20Unitron%20(USA%2C%20Europe).png",
          "description": "Using the ore mined from the Unitice meteor, humans have been able to develop the man-shaped robots known as UNITRONS. As a Unitron master, you control one of these mighty machines as you explore mysterious dungeons and fight for the ultimate prize in the Unitron Arena! Create - Collect - Trade! Build your own weapons for your Unitron using Arms and Material. There are over 200 possible combinations! Battles against fearsome monsters and skilled Unitron masters await you! If you can defeat them all, you too can become... The Master of Masters!",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/Biomotor%20Unitron%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1661269094095
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/King%20of%20Fighters%20R-2%20-%20Pocket%20Fighting%20Series%20%28World%29%20%28En%2CJa%29.zip"
          },
          "type": "ngc",
          "title": "King of Fighters R-2 - Pocket Fighting Series",
          "added": 1661268849842,
          "longTitle": "King of Fighters R-2 - Pocket Fighting Series",
          "description": "King of Fighters R-2 is a fighting game for the Neo Geo Pocket Color. It's the sequel of King of Fighters R-1. The games features super-deformed sprites of The King of Fighters characters and has a simple gameplay based on Art of Fighting 2. The game is based on The King of Fighters '98 and can transfer data to its Dreamcast title, The King of Fighters: Dream Match 1999.\nThe game also features an extra journey mode which allows the player's favorite character to be buffed up with certain assets. Points earned in this mode can transfer to the Dreamcast port of The King of Fighters '98 to help boost characters and unlock gallery images.",
          "backgroundPixelated": true,
          "background": "https://www.giantbomb.com/a/uploads/original/0/2840/2433693-525936-king_of_fighters_r_223.gif",
          "thumbnail": "https://tcrf.net/images/4/41/Ngpckofr2-title.png"
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/Pocket%20Tennis%20Color%20-%20Pocket%20Sports%20Series%20%28World%29%20%28En%2CJa%29.zip"
          },
          "type": "ngc",
          "title": "Pocket Tennis Color - Pocket Sports Series",
          "added": 1661268814928,
          "longTitle": "Pocket Tennis Color - Pocket Sports Series",
          "description": "Pocket Tennis Color is a game from the Pocket Sports series for the Neo Geo Pocket Color handheld game system. It features eight main characters with two secret, unlockable tennis pros.",
          "backgroundPixelated": true,
          "background": "https://videogamecritic.com/images/ngp/pocket_tennis_color.png",
          "thumbnail": "https://cdn.mobygames.com/screenshots/16220757-pocket-tennis-neo-geo-pocket-color-title-screen.png"
        },
        {
          "title": "Rockman - Battle & Fighters",
          "longTitle": "Rockman - Battle & Fighters",
          "type": "ngc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Snaps/output/Rockman%20-%20Battle%20%26%20Fighters%20(Japan).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Titles/resized/Rockman%20-%20Battle%20%26%20Fighters%20(Japan).png",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/Rockman%20-%20Battle%20%26%20Fighters%20%28Japan%29.zip"
          },
          "added": 1661269004254,
          "description": "Rockman Battle & Fighters is a fighting game similar to the two arcade titles Mega Man: The Power Battle, and Mega Man 2: The Power Fighters. Playing as one of four characters (Mega Man, Proto Man, Bass, and Duo), the player chooses between three sets of boss battles with various Robot Masters from the series. The battles are fought linearly in any order, and after each boss is defeated, a special weapon is added to the player's arsenal. Each boss is weak to one specific weapon, so the player is encouraged to strategize the order in which the bosses are faced. Two players can use a link cable to transfer database information between systems, but no co-op or versus play is supported."
        },
        {
          "title": "Samurai Shodown! 2 - Pocket Fighting Series",
          "longTitle": "Samurai Shodown! 2 - Pocket Fighting Series",
          "type": "ngc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Snaps/output/Samurai%20Shodown!%202%20-%20Pocket%20Fighting%20Series%20(World)%20(En%2CJa).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Titles/resized/Samurai%20Shodown!%202%20-%20Pocket%20Fighting%20Series%20(World)%20(En%2CJa).png",
          "description": "One of SNK's legendary fighting game series has made a return! In Samurai Shodown II, you can take on one of the roles of 15 warriors as you fight your way through the land to defeat the evil Mizuki! Slash, kick, and slice your opponents in half...do whatever it takes...live by the sword, and die by its blade.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/Samurai%20Shodown%21%202%20-%20Pocket%20Fighting%20Series%20%28World%29%20%28En%2CJa%29.zip"
          },
          "added": 1712692272871
        },
        {
          "title": "SNK Gals' Fighters",
          "longTitle": "SNK Gals' Fighters",
          "type": "ngc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Snaps/output/SNK%20Gals'%20Fighters%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Titles/resized/SNK%20Gals'%20Fighters%20(USA%2C%20Europe).png",
          "description": "Organized and sponsored by a mysterious fighter nicknamed as \"Miss X\", the first Queen of Fighters Tournament is officially open, but this competition differs of the others for allowing ONLY women as participants. Meanwhile, after have passed for several and tough fights (including a final showdown with Miss X), the winner will be rewarded with a mystical artifact known as the \"K Talisman\", that has the capacity to grant any wish. With this rare-unique possibility of accomplish their pessoal dreams and ambitions, 8 powerful femme fatale fighters were invited to face the biggest combat of their lives...\n\nBehind this simple storyline, the title brings a cast of 8 all-female characters taken from SNK's fighting series The King of Fighters (Mai Shiranui, Yuri Sakazaki, Athena Asamiya, Leona Heidern, Shermie), The Last Blade (Akari Ichijyou) and Samurai Shodown (Shiki, Nakoruru); all with the same blows (parodied or not) of their origin games.\n\nThe gameplay is identical to KOF's Advanced Mode (e.g. Emergency Evasion and Run commands), but without SDMs. To increase the replay factor, a power-up mode was included: depending on your combat performance, you'll be favored with several random items (e.g. Start with full MAX gauge, Speed Up etc.) that can be used to improve your character for a while.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/SNK%20Gals%27%20Fighters%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1661268831237
        },
        {
          "title": "SNK vs. Capcom - Card Fighters' Clash - SNK Version",
          "longTitle": "SNK vs. Capcom - Card Fighters' Clash - SNK Version",
          "type": "ngc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Snaps/output/SNK%20vs.%20Capcom%20-%20Card%20Fighters'%20Clash%20-%20SNK%20Version%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Titles/resized/SNK%20vs.%20Capcom%20-%20Card%20Fighters'%20Clash%20-%20SNK%20Version%20(USA%2C%20Europe).png",
          "description": "Compete in the SC Card Fighters' Clash tournament with your SNK deck in this NGPC card game. Collect the 300 cards from both SNK and Capcom franchises and duel and trade with your friends using the extensive link mode. With mechanics similar to CCGs such as Yu-Gi-Oh and popular characters from both SNK and Capcom, Card Fighters clash offers both collection and strategy gameplay. This game also allows linking with SNK vs. Capcom: Match of the Millennium to transfer collectible points.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/SNK%20vs.%20Capcom%20-%20Card%20Fighters%27%20Clash%20-%20SNK%20Version%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1661269074052
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/SNK%20vs.%20Capcom%20-%20The%20Match%20of%20the%20Millennium%20%28World%29%20%28En%2CJa%29.zip"
          },
          "type": "ngc",
          "title": "SNK vs. Capcom - The Match of the Millennium",
          "added": 1661268930286,
          "description": "SNK vs. Capcom: The Match of the Millennium is a fighting game for the Neo Geo Pocket Color. It features a total of 26 characters from SNK and Capcom, eight of which are unlockable.\n\nPlay options includes 2-fighter tag teams, 3-fighter queue teams, and of course, fighting solo. After that, the player can choose either a Capcom-style level meter, an SNK-style charge meter, or a 'neutral' meter that enhances super attacks if full. Every character also has their own rival, whom they will fight at the fourth stage. The last two stages have the player's selected character fighting the tag team of Geese and Bison, then, depending what the side opposite to their character's is, Orochi Iori or Evil Ryu.",
          "longTitle": "SNK vs. Capcom - The Match of the Millennium",
          "background": "https://upload.wikimedia.org/wikipedia/en/1/15/SNKvsCapcom_NeoGeoPC.png",
          "backgroundPixelated": true,
          "thumbnail": "https://yourfellowgeek.files.wordpress.com/2019/03/39.png"
        },
        {
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/Sonic%20The%20Hedgehog%20-%20Pocket%20Adventure%20%28World%29%20%28En%2CJa%29.zip"
          },
          "type": "ngc",
          "title": "Sonic The Hedgehog - Pocket Adventure",
          "added": 1712692268140,
          "background": "https://upload.wikimedia.org/wikipedia/en/0/01/Sonic_Pocket_Adventure_Screenshot.png",
          "backgroundPixelated": true,
          "longTitle": "Sonic The Hedgehog - Pocket Adventure",
          "description": "Sonic the Hedgehog Pocket Adventure (also known as Sonic Pocket Adventure) is a platform game developed by SNK and published by Sega for the Neo Geo Pocket Color in 1999. The game is based on Sonic the Hedgehog 2 (1992) for the Sega Genesis, borrowing much of the stage themes and gameplay elements, but featuring unique stage layouts, elements from other Genesis Sonic the Hedgehog games, and extra game modes. Sega's Yuji Naka and the rest of Sonic Team supervised over production.\n\nThe game was released in December 1999 to positive reviews. Critics felt Sonic Pocket Adventure was a faithful adaptation of the traditional Sonic game formula, most importantly not making any sacrifices to the game's speed. Reviewers praised the game as one of the best among the Neo Geo Pocket Color's library and commended the quality of SNK's hardware. Several members of the SNK development team later formed Dimps which went on to develop several more Sonic games for handheld devices.",
          "thumbnail": "https://www.gameuidatabase.com/uploads/Sonic-the-Hedgehog-Pocket-Adventure03182023-045024-90802.jpg"
        },
        {
          "title": "SNK vs. Capcom - Card Fighters' Clash - Capcom Version",
          "longTitle": "SNK vs. Capcom - Card Fighters' Clash - Capcom Version",
          "type": "ngc",
          "background": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Snaps/output/SNK%20vs.%20Capcom%20-%20Card%20Fighters'%20Clash%20-%20Capcom%20Version%20(USA%2C%20Europe).png",
          "thumbnail": "https://raw.githubusercontent.com/webrcade-assets/webrcade-assets-ngc-images/master/Named_Titles/resized/SNK%20vs.%20Capcom%20-%20Card%20Fighters'%20Clash%20-%20Capcom%20Version%20(USA%2C%20Europe).png",
          "description": "Compete in the SC Card Fighters' Clash tournament with your Capcom deck in this NGPC card game. Collect the 300 cards from both SNK and Capcom franchises and duel and trade with your friends using the extensive link mode. With mechanics similar to CCGs such as Yu-Gi-Oh and popular characters from both SNK and Capcom, Card Fighters clash offers both collection and strategy gameplay. This game also allows linking with SNK vs. Capcom: Match of the Millennium to transfer collectible points.",
          "backgroundPixelated": true,
          "props": {
            "rom": "https://myrient.erista.me/files/No-Intro/SNK%20-%20NeoGeo%20Pocket%20Color/SNK%20vs.%20Capcom%20-%20Card%20Fighters%27%20Clash%20-%20Capcom%20Version%20%28USA%2C%20Europe%29.zip"
          },
          "added": 1730583271363
        }
      ],
      "thumbnail": "https://github.com/webrcade/webrcade-default-feed/blob/main/images/ngc-thumb.png?raw=true",
      "description": "The Neo Geo Pocket Color is a 16-bit color handheld video game console manufactured by SNK. It is a successor to SNK's monochrome Neo Geo Pocket handheld which debuted in 1998 in Japan, with the Color being fully backward compatible. The Neo Geo Pocket Color was released on March 16, 1999 in Japan, August 6, 1999 in North America, and on October 1, 1999 in Europe, entering markets all dominated by Nintendo, competing with Nintendo's Game Boy Color."
    },
    {
      "title": "C64",
      "longTitle": "Commodore 64",
      "description": "The Commodore 64, also known as the C64, is an 8-bit home computer introduced in January 1982 by Commodore International (first shown at the Consumer Electronics Show, January 7–10, 1982, in Las Vegas). It has been listed in the Guinness World Records as the highest-selling single computer model of all time, with independent estimates placing the number sold between 12.5 and 17 million units. Volume production started in early 1982, marketing in August for US$595 (equivalent to $1,880 in 2023). Preceded by the VIC-20 and Commodore PET, the C64 took its name from its 64 kilobytes (65,536 bytes) of RAM. With support for multicolor sprites and a custom chip for waveform generation, the C64 could create superior visuals and audio compared to systems without such custom hardware.",
      "background": "https://upload.wikimedia.org/wikipedia/commons/9/9d/Commodore-64-Computer-FL.png",
      "thumbnail": "https://github.com/webrcade/webrcade/blob/master/public/images/app/c64-thumb.png?raw=true",
      "items": []
    }
  ],
  "thumbnail": "https://cdn4.iconfinder.com/data/icons/small-n-flat/24/gamepad-512.png",
  "backgroundPixelated": false,
  "background": "https://sysconf16.github.io/assets/imgs/y2k.webp",
  "longTitle": "SYSCONF¹⁶ - Retro Collection",
  "description": "A collection of hand-picked titles for your favourite retro systems - now playable through your browser.\n\nhttps://sysconf16.github.io/",
  "props": {
    "lnx_boot": "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FAtari%20-%20Lynx%2Flynxboot.img",
    "neogeo_bios": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/neogeo.zip",
    "psx_bios": [
      "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FSony%20-%20PlayStation%2Fscph5500.bin",
      "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FSony%20-%20PlayStation%2Fscph5501.bin",
      "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FSony%20-%20PlayStation%2Fscph5502.bin"
    ],
    "threedo_bios": "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2F3DO%20Company%2C%20The%20-%203DO%2Fpanafz1.bin",
    "threedo_fonts": "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2F3DO%20Company%2C%20The%20-%203DO%2Fpanafz1-kanji.bin",
    "atari5200_rom": "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FAtari%20-%205200%2F5200.rom",
    "coleco_rom": "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FColeco%20-%20ColecoVision%2Fcolecovision.rom",
    "pcecd_bios": "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FPC%20Engine%20-%20PCE%20CD%2FPCE_System_Card_3%2Fsyscard3.pce",
    "pcfx_bios": "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2Fpcfxbios.bin",
    "segacd_bios": [
      "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FSega%20-%20Mega%20CD%20-%20Sega%20CD%2Fbios_CD_E.bin",
      "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FSega%20-%20Mega%20CD%20-%20Sega%20CD%2Fbios_CD_J.bin",
      "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FSega%20-%20Mega%20CD%20-%20Sega%20CD%2Fbios_CD_U.bin"
    ],
    "neogeocd_bios": "https://myrient.erista.me/files/Internet%20Archive/chadmaster/fbnarcade-fullnonmerged/arcade/neocdz.zip",
    "fds_bios": "https://archive.org/download/retroarch-system-bios-pack-backup/system.zip/system%2Fbios%2FNintendo%20-%20Nintendo%20Entertainment%20System%2Fdisksys.rom",
    "commodore8bit_bios": [
      "http://www.theflatnet.de/pub/cbm/65xx/JiffyDOS/JiffyDOS_C64.bin",
      "http://www.theflatnet.de/pub/cbm/65xx/JiffyDOS/JiffyDOS_1541-II.bin",
      "http://www.theflatnet.de/pub/cbm/65xx/JiffyDOS/JiffyDOS_1571_repl310654.bin",
      "http://www.theflatnet.de/pub/cbm/65xx/JiffyDOS/JiffyDOS_1581.bin"
    ]
  }
}